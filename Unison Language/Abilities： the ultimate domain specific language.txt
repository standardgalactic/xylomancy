Hi, everybody. Our next speaker is Alvaro Carrasco. Alvaro is a senior software engineer at Twitter.
He writes TypeScript, Scala, and now Unison. And he's going to tell us about abilities,
which is Unison's effect system. Go ahead, Alvaro.
Thanks, Runa. So, yeah, thank you for that introduction. And I would like to say that I'm just a huge fan of Unison.
I've been playing with it for quite a while. And I also love functional programming.
To the extent that it makes us productive, it makes me productive, makes my teammates productive.
So, yeah, I love functional programming. I do have some opinions about the state of technology
at the moment, or the state of development. I think it is way too hard to do the things
that you want to do, to build products, to build tools, partly because there are too many tools
trying to solve too many problems. And a lot of these problems are not really related to programming.
Wouldn't it be nice if most of our days were spent solving actual programming problems,
as opposed to build issues, dependency conflicts, all kinds of things like that.
So, that's one of the reasons I've been attracted to Unison, because it aims to solve a lot of these
these problems in a very nice way. And my hope is that when my kids start doing programming,
I have two twin boys who are 16 years old right now. But when they decide to do programming
professionally, my hope is that they will have a much, much better experience. And they will have a
lot more fun programming, if that's what they choose to do. So, yeah. So, I kind of want to
start by discussing the approach I've taken to sort of try to teach my kids how to program.
And I started with Scratch, MIT Scratch, which is the graphical tool where you drive around
blocks. And then they moved on to Khan Academy, and they've done a lot of stuff on an environment
kind of like this. Where they write JavaScript code, or something like JavaScript, I think it's
JavaScript code, that draws into a canvas. It's very approachable. The feedback is very immediate.
As they make changes, they can see the changes to their code. And I think that's part of why it's
so successful at helping kids sort of get into it. It's the fact that it's graphical and visual
makes it more and more fun. So, I thought, okay, I want, well, this comes with some drawbacks,
though. So, typically, these are very imperative APIs. And at some point, kids, especially something
like Scratch, they will outgrow it, and they have to move on to sort of like real programming,
where they don't have all these niceties. But I do want them to have an experience like this,
even if it is with a real hardcore programming language, maybe one that they would use for work.
So, what are my options here? I think Unison has some really good concepts that are important for
kids to learn at the beginning. Things like, I think they're important for kids to learn early on,
like immutability, modeling with some products, because it's a simple concept, and just functions
in general. And also Unison can be very approachable. It's syntactically very simple. And the Unison
Code Manager provides a really, a very sort of exploratory experience when it comes to writing
code, saving it for later, and browsing existing code, not having to worry about syntax and cleaning
up. It's an experience that's very interactive, like without leaving sort of like a mess as you're
exploring on your code. So, I really want one of my kids to use Unison. And they did
do some work on Unison, but I was missing the whole graphical portion of it. I wanted them to
build something and try immediately see what it looks like. So, how do I get there?
My first thought was, okay, this would work great if Unison could be compiled to JavaScript. That
way I could run it on a browser. And I hope that's still the case. I hope that at some point we get
Unison running fully in the browser, either through Compile to JavaScript or an interpreter
for an actual Unison codebase. I think that would be amazing. And I hope that we still get that.
But I need something now. I want to teach them Unison right now. So, next thing,
is there an existing sort of remote canvas that I can use a command line app written in Unison
to send drawing commands to. So, I looked for a while. I couldn't find anything exactly like that.
But I did find something called Apache Uwakamoli. At first, I thought it was maybe
hacky for me to try to use this. But when I looked at the API, I had a very simple API
for drawing. I could draw arcs, rectangles, and paths. Pretty much everything I would want
out of a canvas type of API. And since it's remote, I don't have to embed it in the language that
I'm working in. I could just use networking to send things to it. But when I tried to use it,
the code was a little unwieldy. So, I ended up not using this product, but implementing their
protocol for drawing. It turned out to be, it wasn't too complicated.
So, what I did was create this electron app that could be installed on a computer.
And ultimately, maybe also run from a web browser. But at the moment, just an electron app
that could run alongside a UCM session. And then whenever I want to execute drawing commands,
it would stream those commands to this running electron app. Written in TypeScript. It's not
really written in any way that makes it specific to Unison. It could be used with any other
command line tool. But my purpose for this was to connect Unison to it.
So, that's kind of what the code looks like. It's basically parsing commands
and sending them to an actual HTML5 canvas using JavaScript.
Yeah. Okay. So, my first attempt at doing this, I wrote some Unison code, defining what it is to,
you know, what some of the commands are. So, move to, line to,
rect, you know, close path, those kind of things. And since I'm trying to think, you know,
functionally declarative, I wanted to describe them as a list of commands that the user could
create and then stream into the canvas. So, I was very excited. It kind of looked to me like
how code looks like in Elm. They have something called Elm Canvas. And this looks like a very
similar approach. I thought, this is great. Now I can draw onto a canvas.
So, when I showed it to my kids, their first thought was, it's not as nice as JavaScript.
And I go, okay, okay, okay. That's fair. JavaScript can be more straightforward,
more imperative. But it comes with, I tried to explain that it comes with all these benefits
of this being a description of what you want done as opposed to a set of steps
and describing how you want it done. The typical description that people give for the benefit
of declarative programming. And they literally give me this face. Very skeptical. So, like, okay,
don't worry about that. You get used to the syntax. You get used to the style of programming.
And again, I literally got this face again. Luckily, when I posted this to the Unison Slack
channel, I can't remember who, but somebody mentioned, you know, you could do an imperative
API using abilities. And it doesn't have to look like this. So, light bulb went on,
and I took a crack at it. So, I like to, yeah, I like to demo what I ended up building. But
real quick, they're not wrong. Sometimes, depending on what it is that we're trying to do,
an imperative API is better than a declarative one. That's partly why we have something like
Monas that can describe sequential things and what we have syntax like has skills do notation.
That's basically an imperative API to a declarative approach behind the scenes.
Same with Scala 4 comprehension. But it's not perfect. It is a step that you have to take
outside of what you normally would have done. And you have to lift every step into the mona
that you're trying to sequence. It's not as nice, as clean as it could be. And, of course,
that's what they recognize when comparing it to JavaScript. Sometimes, if we want
something that looks imperative, especially when we're trying to model something that is
imperative behind the scenes, and we're trying to maintain to those semantics. So, things like
IO, future exceptions, or even defining flows, there are things that maybe we want them to be
declarative behind the scenes, but we want to work with them and define them in an imperative way.
Yeah, I think that's all I have on the slides or on the Unison Code Manager or share. I'm going to
share now some code.
Okay. So, here's a function that draws a happy face onto a canvas.
So, the interesting thing is that it looks a lot like it would on an imperative language like
JavaScript. I have commands that seem to directly just execute an action drawing to the screen.
There's no sort of like trying to represent it in a declarative way. This is very, very imperative.
But how is this possible in a language that's purely functional? Well,
it's because of this canvas layer ability. It provides this functionality that whenever
a function that gets called that requires an ability, like this size function or this arc
or fill, it basically stops execution of the program and sends the information
that you're passing to the function, sends it to the ability, the thing that's handling the ability,
and that ability can decide what to do with it.
And it can decide to not execute any of this code. It could decide to execute this code many times.
It could decide to store something internally for later use based on the parameters of this code
or it could
collect information about this running code. Oh, sorry. That's what I just said. It could
delay the execution of this code for later and then execute it at a later point,
sort of semantically blocking until the next step. But this code doesn't have to worry about
how the canvas layer or what the canvas layer ability decides to do.
As long as the methods are available and you can call them and how the canvas layer is implemented,
you know, it doesn't matter that much. I mean, it could also decide to stream these commands
as it's running to the canvas that I have running elsewhere, the actual UI.
All right. So first, I'm going to show an implementation of the canvas layer that just
takes all of these drawings, I mean, all of these commands and outputs them as a list,
because maybe we do want to get them in a declarative form. So if I do something like,
no, I suppose I could do it on a, yeah, I have it here as a watch expression.
So this can or this ability handler takes all the commands
that were run that do something with a canvas layer and produces a list of them.
So I haven't, I haven't lost any of this sort of declarative power that I had previously.
I still have this list that I could do anything I could before with it. I could process it in some
way and remove some commands or add other ones or put a delay in between each one.
I have all this sort of declarative power that I had before. But the API is imperative.
All right. Now, if I want a different implementation, one that, say, actually sends these to
the, my running canvas,
created this function called happy face main. I should probably show that function first.
Okay. So this function starts with a session to the canvas that I have running in Electron.
And then it draws the happy face at a particular layer and sends the sync command,
which tells it to actually perform the drawing. So if I run this,
but actually before I run it, I have to start the canvas. So
and you can see it, it drew the happy face.
Now, that's a nice start, but this is a very simple graphic. I want to do something more
complex. I want to draw something maybe from an SVG set of paths. So I'll take this out.
So for SVG, I actually might, I want to go a little bit into Deton, something else.
I'm going to share the tab again.
Okay, I'll find an output. Let's go back to the screen.
Okay.
I'm not sure if I didn't find that, but here it is.
So, if I have a list of SVG paths that were maybe drawn with a tool like Inkscape or something
like that, here's an example of a code that would parse the list of commands and produce
a list of an actual path command, a path command type that describes those commands.
So here's just another example of using an ability, sort of in an imperative way to do
parsing.
And that's something I had to do in order to implement the SVG path rendering thing.
So I can now demo, see, something a little bit more complex.
Okay, so here is a set of paths, so this is basically an SVG drawing I made with Inkscape,
but I entered all of the paths manually into Unison.
So Unison is the one actually doing all of the drawing thing, all the drawing commands
here.
So this is actually drawn by Unison, just using data from an SVG file.
Okay, so this is cool, I can draw something more complex, but now next step, I want to
animate this.
So next step, I need some way to loop and send data at regular intervals to the canvas
while drawing.
So I wrote this loop function that also uses abilities because it executes forever, obtains
the current time stamp, and then before it executes again, it delays execution by a certain
amount.
So this is a case of the ability receiving this request and deciding not to continue executing
until a little bit later.
It was a case of an ability used to just delay execution of something asynchronously.
So now using that function, here I have an example of a spinning wheel.
Okay, I have to go back actually.
Not too bad.
Now let's apply this to the car itself.
And there we go.
Now we have a car with moving wheels.
This is all drawn with Unison, the electron app that is actually doing this is just receiving
very raw basic draw commands, but the timing, the transformation from paths to actual canvas
commands is all being done with Unison using the canvas layer and canvas abilities.
Let's see what else we have here.
After I got animation working, I thought, okay, what do I actually need to make a game?
I haven't been able to make a game yet, but the thing I need first is some sort of way
to deal with interaction.
I need the canvas to be able to send information back into Unison so Unison can adjust how it
is rendered.
So I tried to use Elm canvas or Elm architecture as a sort of inspiration for it, and here's
an example that uses interaction.
So trying to follow the basic Elm pattern, I have an initial value for my model, which
is just the position of the mouse.
Let me move this down.
Then I have a function that will do the initial setup, which means just sizing the window.
It can't take the model, but in this case, it doesn't use it.
Then I have a function that updates the model whenever an event happens, and that event
could be the mouse moving, or a click, or a tick from the timer that's constantly executing
the code.
And then I have a function, a very simple function that just draws based on the state
of the model.
So it doesn't have to worry about timing or anything like that.
It just examines the model and performs the necessary drawing operation to do the animation.
And then I run it.
So, yeah, let's try running it.
Oh, first, this is just drawing a circle wherever the cursor is.
So pretty simple.
There we go.
So I barely got this to work yesterday, so I hope next time I can actually do something
more interesting where maybe you can pick colors and draw other things, but I was very
excited that I have two-way communication between the canvas and Unison.
And, yeah, I just wanted to show it off.
Okay, the main thing I wanted to leave with is the fact that the abilities are super powerful.
Here I used them for providing an imperative API to a declarative approach.
I used abilities for the parsing portion, being able to write very direct style of parsing,
you know, extract this, extract that without having to use these combinators as I would
on a regular, like a partial combinator library.
I was also able to use abilities to do concurrency where I send events, take events to this
running drawing operation and concurrency so I can stream data coming from the canvas
to my drawing calculation.
So it's everywhere.
Using it feels natural.
So, yeah, that's my presentation.
Awesome.
Thank you, Elvaro.
That was my drawing.
Chris, any questions?
Sure.
We definitely do.
I actually just want to start it off and ask, as you were learning abilities, you kind
of talked about how you started off with like an Elm interface where you were kind of just
building up this list bit by bit.
As you made the switch to abilities, what was kind of the trickiest part about groping
this new sort of way of programming?
Did you get caught up at all or did you have some sort of aha moment at some point where
it all clicked into place?
I feel like I had several aha moments.
It was understanding the handlers.
That was the toughest portion and it almost seems like it was too generic a solution,
this idea of the handler and the resume to solve so many different unrelated problems
and it took me some experimenting to get past that.
It's actually too general to understand how it applies to your more specific case.
I feel like once I got past it, I kept seeing more and more potential uses for it and I
came to understand other uses that I had seen already on the Unison Base like the exception
handling and things like delay.
Right.
I saw Paul released a debugger that's fully implemented with abilities too, which I believe
it can actually rewind and re-execute and all of that stuff is very cool.
Yeah, it's quite a superpower.
What I love about it is that it's something that if you're just turning out, you don't
have to understand.
I feel like my kids can do all kinds of stuff with the animation code without getting to
abilities yet.
They need a reference to the ability and they can use it, but they don't have to worry about
how it's implemented or the complexity of it.
Right.
You don't have to worry about some of those traditionally tricky things like lifting
monads or binding everything together.
Did you have experience with previous effects systems or monads or anything like that or
are you coming into this kind of fresh?
Just in Scala.
I had some experience doing just like Cat's I.O. and Monic's and using four comprehensions.
But this is a whole other level.
Whole new thing.
Yeah.
And the fact that even on those systems, mixing them up is complex.
And mixing abilities has been pretty easy for me.
It's almost like they don't get in each other's ways.
Right.
Yeah.
And you don't have to pick a monad stack when you're writing your code.
They kind of compose in a nice way there.
Did you, I'd be curious, did you go through any iterations on your Canvas API when you
were first kind of figuring out how abilities work?
Did you come up with multiple designs or was it pretty natural to find the one that ended
up working for you?
I think at first I was stuck on producing this list of commands and then sending them
in batches.
But then I, because I had that two-command list function and I thought, okay, that's
the simplest way to do it.
But then when I started looking into how the stream ability was implemented, I realized
I don't have to collect these.
I could send them off.
As soon as I get each one, and there's no reason to delay.
So then I went through another iteration of implementing that concept.
And that also helped solidify the concept of abilities and how handlers work.
But it was totally easy.
Start with the list first.
Right.
Yeah.
Yeah.
Learn kind of, well, that's almost static analysis, right?
Like you can kind of see what you were planning to do in your code and you can interpret that
in any way that you like as well.
However, I assume probably the streaming method was necessary when you started interleaving
these delays, you know, you can't, or animating, right, you can't get the full list of commands
if you have to wait at certain points in there that end up working, right?
I would ask, so when you first started doing this, and I know from Slack conversations
and stuff, you were just trying to figure out a way to get Unison to communicate with
something outside of itself.
Were there any key features or extension points to Unison or UCM that you'd be really interested
in seeing us add in the future that would make that sort of either plug-in or integration
with other tools easier?
One would be if I could do WebSockets, because I'm hoping all of this code that I have here
can run on a browser, not just on an electron app running locally, but maybe connect to
a remote canvas, like literally remote on somebody else's screen.
So yeah, I'm looking forward to more of those kind of network possibilities.
Definitely.
Yeah, we'll take that down.
I've actually often heard Haskell described as, you know, the world's best imperative
language, and it seems like there's kind of a common belief that actually this sort of
monadic style, once you have something equivalent to do notation or Unison's abilities, is actually
a really nice way to model imperative code.
So now on, do you think you'll model all of your Unison programs in this imperative
style or just when you're modeling a more imperative process like drawing on a canvas?
I think, yeah, that's a good question.
I think I would not use it for everything, mostly for things that, as you said, have this
imperative field to them, which is a lot of them.
But yeah, in some cases, I think, yeah, there are other things where you want to combine
things in ways that doesn't really feel monadic, and I wouldn't try to, yeah, I feel like I
still like the style, the applicative style, or I don't know if I'm using that correctly,
but the sort of combining things together as opposed to executing them in sequence.
And if that's what the model calls for.
Right, yeah, you want to model your program, however, it most naturally maps, yeah, that
makes a lot of sense.
So after you inevitably get interaction and games working, do you have a dream?
Do you have a future?
Do you have an end goal?
When will your kids be satisfied with what you're able to build for them?
I feel like it's pretty close.
I would like to make a framework that can sort of, okay, so right now, I wanted to stay
imperative because that's the basics of drawing, but sometimes animation is better handled
in a declarative way, once you've gotten the core imperative sort of like building blocks.
So yeah, we'll have to maybe build another abstraction on top of this that actually is
declarative, where you can specify things like gravity, velocity, inertia, and things
just sort of behave in that way without having to tell them, you know, modify this model
by this amount.
So that would be the next step.
And in that case, maybe you can provide two different interfaces for the same backing
drawing library or, you know, use the same ability and interpret it in different ways.
That would be very cool.
Yeah.
Yeah.
I for one will be very interested to play the first game that your kids make with this
thing.
It'll be very cool.
Was there anything that was extra surprising to you about abilities or their power?
I know we've talked a little bit about it, but if there's anything that stands out.
I think concurrency, how, and well, two things, I guess, concurrency, the staff on the STM
library, which is what I ended up using, I used a queue, a concurrent queue for the
events.
Okay.
And it sounded complicated to me, but when I used it, it came out very natural.
So that was kind of shocking, how simple it was and how I didn't have to think that
through all these concurrent concepts, it was very natural to use.
Same with the mutable stuff, like the T var.
Oh yeah.
I was surprised how natural it became after I started playing with it.
Hmm.
That's great.
Chat is demanding an answer.
Were the kids finally impressed with what you managed to build for them?
Yeah, because I've actually shown you guys before I've shown them.
We're the tougher audience.
Yeah.
They're the tougher audience, I think, right?
Yeah.
Yeah.
Maybe I'll add a little bit more nice, nice functions to help them before I get them started
on it.
Is all of this code available for, you know, if participants in the conference want to
check out some of it?
Is it pushed up somewhere on shirt?
I haven't pushed the latest version, but I will tonight.
So yeah, it's on GitHub for the canvas.
It's a project called Clarity under my GitHub name and I'll push to share.
