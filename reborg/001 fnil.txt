Hello and welcome to this first episode of The Closure Pills. I'm planning to
make this a weekly thing where we go through the functions in the standard
library, in the closure standard library. There are many of them. This is like worth
a few years of screencasts. I'm not sure if we are gonna go that far and do the
entire thing, but certainly I'm going to enjoy this and I hope you're going to
enjoy this too. The functions and the examples that we are going to
see in these screencasts are mostly coming from a book I'm working on by
Manning. It's available here on the Manning website. If you enjoy the content
of the screencast, you are interested in knowing more about the function in the
standard library. There's a good chance you're also gonna like this book. I hope
you enjoy the screencast and also enjoy the book if you buy it. For this very
first episode we are going to see something that is hopefully not too
complicated. It's a nice little function called f0. It's not very common. You're
not gonna hear this very often, but it's there and it's got a few interesting
use cases that you might be interested in the next time you're working on some
nil input. You might remember about f0 and remember what it can do for you. There
are alternatives. There are different ways of doing things and that's a good
thing. You can also quickly check the sources by doing source or f of f nil
and you can see it's got three arities. It's taking a function as the first
argument is taking then three arguments of any type. So what is the goal of this
function? This is a higher-order function. It takes your function, which is the
thing, your target that you want to patch, so to speak, and it takes up to three
arguments and those arguments are going to be used for the generated function as
defaults if any nil is passed in as an argument. Probably better showing an
example about how this can be used, but basically let's say you have a pattern
match, pattern matching string of some sort. You want to verify if you can say
hello you in some string that is coming to you and you can use refined for that
and refined is going to return the matching part of the string. If any, if
not, it's going to return nil. If you use refined and you are matching on maybe
external input that is coming from the input, the user input, or third-party
services, and so on, you might receive a nil instead. If you receive a nil you get
this nasty null pointer exception. So depending on the application you might
need to take care of that. There are many ways you can take care of that. You can
do a try-catch, you can use a condition, but maybe this is a very
good use case for functional programming. By using higher-order function you can
remove a condition essentially of removing a try-catch. Both of them
are not absolutely bad things to have, but they increase the complexity of the
program. So if you can remove this complexity and remove a condition you
don't need to think about the two branches of a condition. That is a
decrease in the complexity of the program. So fnil can be helpful in this.
How would you use fnil? We said a function generator, so you produce a
different function. We can call it refined plus just to differentiate the
name, but knowing that we are talking about the good old refined where we are
dealing with nil arguments, with defaults for nil arguments, and you use
fnil. fnil is taking the original function, the one you want to wrap around,
and up to three arguments are the default if you pass nil to that function.
So let's say we pass a nil rejects, so we can use for example the empty rejects
as a default, and we can use the empty string as a target string, as a default
if you pass nil. Once you define this, you refine, you can use it in place of
your old refined occurrences, and you just use it as usual. So you would pass
any rejects, and say you pass nil, this time we are getting back a nil, we are
now going null pointer exception, because we are replacing that nil with an empty
string, and we can do the same with rejects. If that is the case for your
application, you can do that with all arguments, not just the last or not just
the first. How would it be without fnil? Why do you want to use it? Then you might
have something like this, where you check let's say s string s, and then you go through your
rejects to see if s is matching or not. Of course we don't have any s, so we define
hello, and we try again, and as you can see it's going as expected, it's matching on a low, but
with the when you can of course also pass in a nil, and that will go through.
So essentially with fnil we are able to replace a condition, this condition specifically,
with a non-condition, with something that is not a condition. There is a condition inside
fnil, but you don't you don't see it, that's the important part. So you can use
refine plus, and everything goes without any exception. So you would use fnil if this kind
of rule needs to be applied in multiple places in nano in space, or in multiple namespaces.
So if you need to reuse this, you define the actual function, and you can reuse it across
the application. So we talked about the arities of fnil, it's got only three,
meaning that if you try something more than three, let's see what happens. So let's say you want to
generate an fnil for plus, where if you pass in any nil arguments, you're going to replace them with
some like neutral number like zero for addition. So you want five of them, but if you try you'll
see that you're passing the wrong number of arguments of nil, and because fnil only supports
three of them, unfortunately. I would say unfortunately up to certain points. So if you
have a function with four, five, six arguments, you're probably looking at something that needs
refactoring in some other ways, and probably some obstruction is missing, and you need to extract
that obstruction out and remove or reduce the number of arguments. But let's say you really need
that, we can easily extend fnil to support more arguments. To do that, we'll define our own
fnil, we'll call it fnil plus, and instead of taking like three arguments, we'll just take
variable number of arguments. Then as a contract, we'll definitely have to return
the generated function, and this would be a function of any number of arguments, because
this is what the problem we are trying to solve. So to wrap with fnil a function that has
more than three arguments, potentially any number. What we need to do then is apply
the target function to these arguments, but when we do apply to the arguments, we need to take care
of the potential nil arguments and replace them with something that is coming from
opts from the options that we are passing to fnil. You need to take care also of the fact that
the number of arguments you're going to apply f to might be less of the number of arguments
that you have defaults for. So what I'm going to do is to create a sequence that contains
nil defaults for all those defaults that are not given as options. Better showing you what I'm
talking about. So I'm going to map over the sequence, and if I'm in front of a nil argument,
then I'm going to return the default. This is the logic. If not, then I can just return the
argument. I don't need to do anything. What I'm mapping on are the arguments, what would we actually
pass in during the invocation, and a sequence that is the concatenation of opts, which are my
options, my defaults, with any number of nils to pad at the end. This makes sure that I have
enough defaults. I have always enough defaults to cover any possible cases, even if they are not.
The right number of arguments is not passed in. So if we do this, I'm going to show you
what this new fnil plus can do. For example, in the case of plus that we were looking at before,
we'll define a new plus plus function that is using fnil plus instead of the normal fnil
over plus, which is our target function. And then we say I want like five potential
defaults for nils that are passed in to my plus function or double plus function. So what I can
do now that I cannot do before, I wasn't able to do before, and I'll show you what I'm able to do
now. If I do this with the normal plus, I'm getting null pointer exception, but if I use
the double plus, that is going through. And he's summing up all the numbers that are available
is basically removing the nil from the list of arguments and summing up the rest. And it's
replacing nil with the default I gave, which is a zero. As potential alternatives, we saw that you
can use when, you can use a condition, you can use a try catch. There's also another
interesting function in the standard library you could use. If you don't need this behavior to be
reused and the entire application, and this is the threaded thread first and thread last
sum option. And if I do, for example, if you do pass hello to my refined, where I'm checking
Hey, you hello thing. This is perfectly fine. And this got also
the nice, oh, why is returning nil?
Interesting. And let me just check why this is it. This is the case. I wasn't expecting that.
Oh, yeah, I inverted the rejects. Sorry for that. So, well, anyway, let's say I'm searching hello.
And I'm finding hello. The good thing about some threaded last is that I can also pass
in nil. So let's say my s is still defined as nil. If I have this input coming through and
I pass it through, this will have the same effect as f nil. And this is a nice alternative. As I said,
this is not something you would assign to a var in a namespace to reuse. This is something you use
once. And if that is the case for you, this is a good alternative.
Last thing I want to talk about in this first screencast is the performance profile of nil. So
f nil, as it is, like in the standard library, let's look again on the sources, is a very
simple function. It's not doing anything particularly...
Oh, sorry. Yes, it's not doing anything particularly bad. It's just basically
using nested if statement to obtain the effect of replacing the nil with the default.
You give. The performance profile of this with the limitation that you cannot pass more
than three arguments is a constant time generation of the function and a constant time
application as well. Big O of three basically. With the f nil plus that we showed before,
instead, the generation is still remaining a constant time. So f nil will generate just fine
in constant time. But the application, of course, will be linear because we'll have to
iterate through the number of arguments you're passing through and check if they are nil and
apply the rule to replace the nil argument with a default. We can see that quite easily if we,
for example, if we take f nil plus and we create... Well, so let's redefine our plus plus function
with nil plus where instead of just using like five arguments as we did before,
we give defaults for like a big range of arguments, let's say one billion or so of arguments.
So this generation is just instant. It's a constant time. We don't need to go...
We don't need to iterate through the range at the moment. Everything is lazy. It's going to be
iterated as you use it. If you then use the plus plus function as usual, yes, oops, I did
apply f nil without specifying the plus. If we do this, this is still...
It's not going to... It's not going through the entire sequence of the range to apply the defaults
because we are not passing enough arguments. And soon as we go up with that, so let's put a time
on this. As soon, of course, as soon as we go up with this, so we apply double plus to more
arguments, say 10 millions and we see that the time to do this computation go up and
it's roughly linear computation and it's coming back now and it's about eight seconds.
So this is it for this first episode. I hope you enjoyed. If you like this content,
have a look at the book. A few sample chapters are available. And also if you enjoyed the screencast,
I hope you'll enjoy the next one. In roughly one week, I hope to keep up with the weekly thing,
the weekly screencast plan. I might miss one or two, but we'll see how it goes. So thank you for
listening. Goodbye.
