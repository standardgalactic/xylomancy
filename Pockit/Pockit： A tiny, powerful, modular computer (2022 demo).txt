Hey guys, I'm Anil, and this is Pocket.
Pocket is a card-sized modular computer that can be instantly shaped into all kinds of
gadgets and inventions by laying out whatever blocks fit exactly your specific application.
With today's demo, I'm excited to share what Pocket has grown to in the last few months.
Using a powerful upgrade I made to the core board, lots of new blocks, a dashboard to
command everything, the potential for makers, for edge computing, and for home automation,
and some thoughts on how I envision modular electronics can behave.
The project has come really far, and in the coming weeks, I plan to finalize the current
designs for the PCBs, and for molded casings with, of course, a better matte finish than
the current 3D prints.
The aim now is to produce an initial batch of pockets and get them into the hands of
those who have shown interest.
So now, the demo.
As usual, let's get started with the basics.
The Pocket Core Board provides an interactive, magnetic workspace to quickly create devices
and edit them by experimenting with various blocks.
These three are just a hello world example.
The ecosystem already has a large variety of blocks, and the signal grid makes it equally
easy to hot plug even the more complex blocks, like this SPI-based display, which quickly
yields an app GUI, or a behind the scenes monitor for the blocks.
Through a pocket's interplay of the software modules, we can effortlessly create new combinations
in almost all well-defined cases.
Our agnostic software, through dynamic switching, allows us, for example, to swap the previous
SPI display with a bigger HDMI one, this time with a capacitive touchscreen.
With a modularly insertable Pi compute processor, Pocket can even run Linux, which opens up
powerful possibilities with some of the blocks.
Before those, let's explore the modular foundation.
Each block's behavior is represented with class instances in the core microprocessor,
but the true magic of modular hardware happens when multiple blocks combine into an application,
or even activate a new one.
Note that the overall device has fluid behavior, subject to the user's taste specifically
depending on the exact hardware combination or software choices.
In this sense, the project emphasizes not only hardware agnostic software, but also
software agnostic hardware.
Now let's quickly turn Pocket into a full-blown traditional computer by adding our desired
accessories.
With the HDMI block connected to a monitor, I'll explore one of my favorite recent additions,
the dashboard.
Think of the dashboard as the front end, a dynamic cockpit for the board's activities.
It's made with JavaScript, Python, and WebSockets, and it can be used as served on Pocket itself
or through a display block or with any mobile or other device on the same network.
The control center area shows an easily programmable tile grid to view and control everything related
to our running app.
Apps are similar to phone apps, but for hardware.
The sidebar contains the block monitor showing all currently connected blocks, and most importantly
the app selector.
Since Pocket is a shapeable device, apps are more like situational skills.
An app can be manually selected, or the board auto-loads the best matching app seamlessly
as the user adjusts blocks.
For this, I implemented an algorithm that scores all apps continuously based on multiple
factors, primarily the matched current blocks, but also block rolls and positions, and app
usage frequency.
So Pocket smoothly transitions to at least boilerplate behaviors for blocks in all cases
and often the exact desired app.
Let's take a closer look at an app.
This one has some tiles to control a camera and view the camera's output.
The modular hardware has analogous software pieces, and apps can adapt their behavior
to attached blocks.
For instance, a dashboard tile can do a photo capture action, but so can physical blocks.
This customizability is especially amplified if a user programs the device's behavior
with expected relationships between blocks and any functions.
Since attaching blocks augments an app's feature set, the control center updates individual
tiles accordingly.
New tiles can also appear based on which blocks are currently active.
Notice that changing to a compatible block, like a different camera, allows the device
to keep operating with the same app, though differently.
Altogether, the apps produce incrementally growing behavior based on the blocks attached.
While the dashboard can act as the eyes and hands for whatever is the user's constructed
gadget, letting you operate what the pocket sees and does.
Mixing and matching the hardware ingredients can create different types of rich sensory
interaction with the physical world, all with minimal power consumption.
Most use cases, like this one, even with a display block attached, can run on the battery
block.
Let's really test the limits now of this kind of edge computing.
While Pocket's original microcontroller could run a simple camera by itself, adding
the PyCompute quad-core processor gives it state-of-the-art capabilities, such as TensorFlow
based object detection.
This inferencing process can work decently, even in not so ideal conditions.
To avoid going outside, let's put a laptop in front of the camera and take a drive into
a random YouTube video.
A full machine learning and detection pipeline is not bad for a $25 processor chip.
But can we do better?
Motivated by dozens of comments from community members, I spent the last several months upgrading
and testing Pocket's PCB design to work with a CPU that's substantially more powerful.
Specifically, the Broadcom BCM2711 that you may know from the Raspberry Pi 4B.
So 1.5GHz at our disposal.
Let's take the new version of Pocket for a test drive.
With the CM4 processor in place, I'll run the numbers again now.
And just like that, we get twice the frame computation speed on the same challenge based
on a deep learning neural network.
Now there is a way to make this even faster.
Almost 10 times faster.
This one's a bit of a trick.
This particular block circuitry is based around the Edge TPU, an ASIC chip that was
developed by Google to boost machine learning models and can perform 4 trillion operations
per second.
For this block's current version, I soldered circuitry directly taken from Google's dev
board.
However, I'm also working on a much smaller accelerator block that uses a Kendrite K210
chip.
And also one for a tiny 10x15mm version of the exact same Google TPU.
But this will appear in a future video when the chip is actually in stock.
Even without a task specialized block, of course, the newer Broadcom CPU helps Pocket
achieve very respectable speeds for complex tasks, such as media pipe pose estimation
and visual tracking
and even stereo depth vision.
As a side effect of the recent board upgrade, I decided to also create some special hardware
accessories, like this SSD block based on the PCIe interface.
While I haven't officially integrated it into the dashboard's apps yet, I've already
gotten the block working and it should supply an immense amount of storage for portable
and stationary applications alike.
Alright, next, home automation possibilities.
Recently, I wrote a lot of code to marry Pocket's blocks with smart home frameworks.
The core board can now run a home assistant server and ESP home as one-click apps.
Pocket's internal Wi-Fi, of course, can directly monitor various home appliances.
But imagine we want to talk to devices that speak the very common SIGB protocol, or really
anything else.
In past videos, I showed RF hardware, such as a Lora block.
This time, a new block based on the Texas Instruments CC2531 can give us SIGB communication
within seconds.
Likewise, it's possible to couple basically any Pocket blocks to cards or devices.
For instance, a camera block.
Since Pocket boards can wirelessly talk to each other, this opens up a whole array of
DIY possibilities for devices.
For a more fun demonstration, I'll use a half-size pocket I've been experimenting with.
This case does require some very basic ESP home programming.
On one Pocket, I create a button block action.
And on our earlier Pocket, I pair this action's event with the light bulb through the SIGB
block.
Thus, within minutes, we can create flexible and enjoyable interactions.
One of the project's goals has been to make readily deployable gadgets.
Here are two simple examples.
With all of Pocket's modular computing capabilities, the ceiling is really just the user's creativity.
Here's a mix of everything, human-machine interface.
For this assembly, I'll also slide in a big capacitive touch display.
And I'll use the new screwless method that I've designed recently for side block expansion
of Pocket.
That's all for now.
Go to pocket.ai.
I'm taking some early access sign-ups there, and also, you can see lots of project details.
Thanks for all the support so far, guys.
Stay tuned for the next update.
