All right, so another quick question and answer video.
How do you recommend learning C?
My current recommendation is by getting a book called Head
for C. I'll go see if I can show it to you.
And we've had people that know C really well kind of evaluate
this book.
We went through it last year at $0 for the paperback.
I don't believe that for a second.
It's a fun book.
It has a few problems in it.
But people who do C coding have confirmed
that it's actually pretty good for absolute beginners.
I prefer the mnemonic, brain-friendly, silly approach
to C coding than the really dry K&R C book.
So that is my recommendation.
Just get that book and work through it.
It doesn't come with a lot of answers.
If you want to do that, in fact, I
should probably put it on the calendar.
We will be doing C in December.
So it's kind of a Christmas tradition, C for Christmas.
And I want to say, what?
Let's see, so December, we're out the week of Christmas.
So this will be the week of C. Yeah.
So this is going to be C coding.
I don't know if we're going to do it all in one day.
We'll probably do it a little bit every day.
And I'll just put it here.
So head for C. So this is, I mean, I talked about,
I promised that I was going to do Haskell and Christmas.
And I actually think it's more important that we learn C
because it's just so much more important than Haskell.
Honestly, Haskell school, Erlang is really cool.
I wanted to learn Erlang.
That was the one.
But every year, I feel like it's really important
that you go back to C and you review it
and you learn about it because it informs everything else
that you do related to the computer.
So that's my recommendation.
Get it and start writing C in it.
If you want another book, there's
another book called Mastering Algorithms in C,
which I've started to work through.
And I just really, really love the style of it.
It's not really, it's not really overly dense.
It is dated, but it's C, so it's still really relevant.
I just absolutely love Kyle Ludon's style.
I recommended this to other people
and they've come back saying, oh my God,
it's great, this book is so amazing.
Kyle was an astronomer and a coder
for a very practical experience
and approaches this whole thing
from a very, very practical perspective
and pretty much throws out all of the bombastic verbose
extra stuff you'd find in the textbook.
So that is, those are my two favorites.
I do not pretend to be a C master at any level.
Last year when I did the C,
I had people that were C masters here, particularly VMT.
Thank you for that.
Showing me how C actually works
and the gotchas and things.
And you may be asking, well, why learn C?
So the answer to that is so that you can understand
all the other things,
particularly if you think that you want to learn rust.
C and rust to go very good together.
C and go go very good together.
In fact, I've heard go describe by Rob Pike as an easier C.
I've heard the same thing about rust.
I've heard it was a safer C, right?
Well, if you don't know C,
then you don't know how to contrast it
with these other languages.
So learning C, even if you never code anything professionally
in it, it's still valuable, no matter what.
C was invented to write Unix.
That's right.
The first version of Unix was written in,
the first version of Unix was written in assembly.
And I'm like, man, this is too crazy.
We gotta do something better.
And they needed it really low level
and really close to the hardware.
They had ultimate control of every bit and everything.
And so they made C.
They made C, Dennis Richie and the gang.
They made C, Ken Thompson.
And I still, I was just talking about this the other night.
I think Dennis Richie is one of the most famous
yet unsung heroes of our time.
Died the same week as Steve Jobs, nobody knew.
But everything you're using right now is written in C.
Literally everything at some level, including JavaScript.
So, you know, so anyway, it is frustrating.
Rust is, can be frustrating if you have to fight
with a barrel checker, but at least if you learn C,
you'll understand it.
Do I think you should learn Rust?
Yes, that's a different question.
But honestly, I really, really do think
that you should learn C first so that when you learn Rust,
you'll see how awesome it is or where it lacks
in other areas, you know, the pros and the cons.
And there are, and you won't understand those
until you understand C.
So the best way to pick it up if you're an absolute noob
and you just don't, you don't want academics speak
too much of it is head first C in my opinion.
It's kind of fun.
You write a game in there.
You write an old school asteroids game in there.
Yeah, in C.
And we never got to it last year, but, you know,
and then eventually, you know, you're gonna want to do
something a little bit more probably.
And maybe you want to do algorithms, mastering algorithms
to see now why, why would I do algorithms in C?
People like, do I need to spend time
learning data structures and algorithms?
The answer is yes.
Maybe not early on in your programming, you know, path.
I never did.
I didn't go to computer science
and maybe I'm a worse person for it,
but I did eventually learn a lot of amazing things
from the data structures and algorithms book,
but I learned them on my own when I needed them.
And you're gonna see me coding a lot of that today,
actually, later on, kind of a thing.
I'm gonna be coding a parser and a compiler
for a language called KML using my other language
that I wrote called Pagan.
And I had to learn things like graph theory
and, you know, stacks and cues and all of these things.
And I had to teach myself those things
in order to do those things.
Those were very, you know,
fundamental computer science concepts.
So, but mastering algorithms in C, you know,
Kyle at the beginning of the book
makes a case for having to have that
and needing to know those things.
Like it'll just inform all of your other approaches
to coding, even though you don't have to be able
to spit it out in an elite code interview exam
or something.
It's more important that, you know,
how these patterns can be applied at a macro level.
And one of the reasons I think mastering algorithms
to C is such a good thing that C is a great language
for this is because C, by default,
doesn't come with those things.
And the last time I said that,
I had a lot of C coders say, oh yeah, sure it does.
And it does if you have the right library.
For example, a map, an associative array, right?
Or even an array, period.
They're totally different.
There's not even strings.
Technically speaking,
technically speaking, C does not have strings.
String has character arrays.
So these things that we take for granted
in these higher level languages don't exist in C,
which makes C a really great language in my opinion
for, you know, creating something
that you actually have a chance of like maybe,
and if you're writing your own bubble sort
in any official capacity, you're probably doing it wrong
because it's been written safer and better
in another library, but it doesn't hurt for you
to write it and see if you can,
you can understand why, you know, why it doesn't have it.
So I actually do think learning algorithms
and data structures in C is a good thing.
I think Go is probably the next best thing
to learn those kind of things.
Imagine this array of characters being a string, exactly.
And so anyway, that's all I have to say about C.
If you want to learn more about C with me
and struggle and suffer and understand what the stack
and the heap and the constant section are
and why they're there.
But by the way, the head first book is phenomenally good
at illustrating that entire thing.
I never fully understood that until I read that book.
And I still feel like I'm missing things,
but mostly because, you know,
I have to go through it again every year
because I forget.
So that's what I think of C.
