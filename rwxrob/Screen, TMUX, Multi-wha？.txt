Okay, people, I've had a number of people ask me how to do Tmux and whether to use it
and what it's about and actually some people like me have struggled with the defaults.
Don't feel bad.
A lot of people do.
Particularly people who have come to it from another terminal multiplexer called Screen.
So I want to first of all, I want to talk about Screen.
I want to talk about the very first multiplexer, what a multiplexer is.
Screen is what Tmux is and why you should care and how you should use it.
Hopefully this will go pretty quickly.
If I go too fast for you, you can always redo it or you can come get on our stream.
rwxrob.live will take you to our YouTube and you can go to our Twitch if you have a question.
And our communities will be happy to help you.
So let's start out with talking about what it is.
So I'm going to pull up a terminal.
That's a pretty busy terminal.
We've been doing a lot of stuff here, so I'll get that out of the way.
And I'm going to minimize these windows for now.
I'll bring them back.
Don't you worry.
So we have a terminal here and I'm going, you can probably see it, but I'm going to go ahead
and bump up the font just a little bit more so you can see.
So this is a standard terminal.
It's a standard bash terminal running bash for right now.
If you have five or whatever, what we're about to do will work with any shell.
So first of all, I want to introduce you to something called screen.
So from a terminal, you type in and we're not going to cover terminals today.
So we're just going to type screen.
So the screen program comes by default on all unixies by default and unisees anything
older than 10, 15 years, but it's been since kind of removed because it's sort of optional
and generally speaking, people will use Tmux instead.
Why does screen matter?
Is this isn't this video about Tmux?
Well, it's kind of about both and this is why.
So if you ever want to get the benefits of screen, which I'll go into right now, you
want to always configure screen, let me get it installed.
There we go.
Big old long password.
Sorry for that.
We're going to install screen and however screen usually comes on most systems.
And the reason I'm going to tell you about screen is because you should learn screen
at the same time that you learn Tmux because if your priority is working productively on
a terminal on any computer in the world, including, you know, ancient SCO systems, AIX, Solaris,
all of that, then you really need to learn the world's oldest multiplexer.
So what does multiplexer mean?
Plex means screen, right?
Or, you know, something to look through.
You can think like Cineplex, right?
Multiple cinema screens.
So multiplexer is a way to deal with multiple screens.
Screen was the first multiplexer and it was created to deal with the situation where you
have one, you know, green cathode ray monitor and you can't do anything else on it.
You only have that one terminal and God help you if you need to do anything else because
you only have one terminal period.
And so I would, so, you know, like right now, if I only have one terminal, I can't really do
anything else actually.
In order for me to properly test this, I need to fire up a different terminal.
So I'm going to do that properly.
So this is a better simulation.
It's a little small, but this is a better simulation of what you might experience in 1978, let's say.
Or, you know, even all the way through the 90s and early 2000s before T-Mux was invented.
I'm trying to make my font sizes increase.
I can't remember how to do it.
Oh, there it is.
Yeah, so it's just, this is a lacquerty.
In case you haven't know, this was written in Rust.
So I'm going to actually leave it at 80 by 80 on purpose because, or relatively close to that.
Just to kind of give you the simulation of what it's like to just pretend you have a terminal only.
This big old long prompt is not anything you would ever have at that time.
But that's fine.
In fact, I normally prefer a smaller prompt, but for the streaming, I have a kind of fun, big long one.
All right.
We're clearly going to be interrupted a little bit by home noises here.
I hope that's okay.
Okay, so next let's do, let's use, let's simulate the problem.
So I'm doing LS, maybe I'm running top.
My version of top, you might know this is more your version of top user, user bin top.
So you're running top and, you know, this is old school top.
You can see like something's really pegging my CPU.
It's probably OBS.
You know, like, oh, that's really great.
But how do I do something else while top is running?
You know, so in this particular environment, you have to close something down and then you have to restart something else.
If I want to do LS or if I want to do, I don't know, PS-EF and then I want to grep the number for the PID to see what's causing all the hassle.
So I do, you know, grep 539 so I can find it.
So that's a pretty standard thing.
Okay, well, it might have changed in the meantime, right?
So maybe I want to leave it running and I want to be able to switch back and forth between the two really quickly.
Well, I can't unless you're really fast typist, you know, you can't really do that.
So it would be really great if I had two windows or two sort of half windows, even if you could do that.
And that's really the difference between screen and Tmux.
So screen was the first thing invented to create multiple windows.
And by typing screen, you're able to start, it starts up and then you have to push enter or something and it'll come up and it'll give you, it'll give you your prompt.
Now, it also threw out my colors and everything.
That's interesting.
I wasn't expecting that to happen.
So that means that when you're running under screens, since it is so old, it doesn't have support for color, two to six colors and all the other things that you might normally have support for.
So here we are.
And I have my terminal.
At least I have, you know, a window.
Well, why does this thing?
So now I can run top.
Well, that's really crazy.
Why does that top work?
Right?
The other one doesn't.
I don't know.
That's kind of a fun, fun thing.
I'll have to figure that out.
So user bin top.
And when we run user bin top, we have this, but now while this is running, I can actually do control a and then type C.
Pardon me.
I don't know if it's safe to talk again.
I'll go ahead.
I'm going to have to clip the video.
They don't know what I'm here.
I'm torturing them.
I need a better studio.
Um, all right.
So when I do this, I get no other window.
There's no other window.
So that was me doing control a, a, but if I do control a, C, it creates a new window.
And I can see all my windows with control a, w.
And so down below it says you have, there's a, there's a window zero, there's a zero and a one.
And I can switch between the windows by doing control a, zero, control a, one.
You can name them and do all kinds of things, but fundamentally that's how you get around.
If you want to toggle between the two windows, you do control a, a, control a, a.
And I'm just holding control down and tapping a twice.
So I can do that really fast.
So if I wanted to, I could go back here and see, okay, five, three, nine, nine.
I can go over here, PSDF, grep, five, three, nine, nine to see which, oops, wrong one, five, three, nine, nine.
And I can go back over here and see what's going on.
I could even kill it, which I won't do because I don't know what it is, but you know what, you see my point.
So I can go through here.
I can even add another window, control a, c again, control a, c.
And now I can scroll a, w.
You can see them all here.
And I can pick one.
So control a, one, control a, what was it, zero, control a and two.
So now I have all of these windows.
No, you're probably wondering, well, wouldn't it be great if I could split the window in half and then do something with the window?
And that is where we run into a problem.
But before we go there, I'm going to talk about that later with me talk about Tmux.
There are two great advantages for screen, two main reasons that screen was created.
The first is what I told you, managing screen real estate in Windows.
So you're able to go back and forth between your windows pretty easily.
So control a is how you go between the two windows in screen.
And it's always, and since the dawn of time, the default of screen is control a.
Okay.
And so that's all well and good.
But here's something you might not have thought about.
So let's pretend that I lose my connection.
Okay.
Let's pretend now this is going to be a little tricky because I have, I'm trying to put two windows.
I'm trying to simulate.
So for example, let's pretend I'm remotely connected to a system in New York or something like a digital ocean server and or any server really.
And, and so let's pretend like I lose the connection.
Well, you could either lose the connection by having someone click X.
You're like, Oh crap, I had that background.
I have been running that compile for the last hour.
I've been running this background process forever.
I've been running a backup system.
And so you're, you're dead, right?
I mean, and if you're working remotely, that's really, really dangerous.
If you're, I did, I worked remotely for, for I've been for 10 years, one of the office, maybe five times out of that entire time.
And because of that, if, if something were to go wrong in one case, they actually, truly, I lost my power during a meal and really important process.
And if I had not been running screen, I would be sad to say the least.
So, so what you can do is you can do screen, screen dash LS and it'll show you all the screens that you have.
And then you can reconnect to that screen by doing screen.
I don't remember the screen command.
I'm going to have to look it up.
I use, because I know the Tmux one though.
What is it?
Is it dash R guys?
Is it dash R?
I think it's reattached.
Yep, that's it.
So now I can do control AW and there you see all of my stuff is still there.
And my top is even run and still, still the same, same exact process.
The process has never stopped running.
Now, if I want to, if I know I'm going to leave and I don't want to just close my window,
I can actually forcibly detach with a control AD and that detaches from the session.
So screen dash LS.
Okay.
So you can see I've got a running session.
It's a good idea to do that no matter what.
If you do screen, I think it's dash X.
I think that will automatically connect to the last available screen.
That's another one you can do.
So you can read about screen and all its specifics, but I just kind of want to overview for you
how it works.
And the reason I'm telling you about screen first is because this is going to directly
affect how you configure Tmux and you'll understand why now.
So control AD, I'm going to disconnect that.
Actually, I think I'm probably just going to close down all those screens.
There is one other advantage of screen that I cannot demonstrate without being on a multi-user system.
But if more than one person is logged into the same account and they connect to the same screen
session, they literally share a keyboard.
It's the same.
They can type.
The other person can backspace it out.
And so if you're doing any pair programming of that kind or if you're doing any root cause
analysis or any hacking of any kind, all of those things can be shared directly or even
education.
I've used this a lot for education because I've allowed somebody to type something and
fold them over the phone or over Discord.
Hey, this is what you need to type.
So that's a third kind of way to use screen and or Tmux.
But the two primary reasons to use screen and Tmux are to manage different windows and
real estate and to provide a connection that's still going to be running.
So one practical application of that, by the way, is to run a Minecraft server.
So Minecraft server, I get this a lot because I deal with a lot of people who like that.
And Minecraft servers are fundamentally unable to handle, you know, they, they have a terminal
and all that stuff.
But when they're running from a Linux system or a unique system of any kind, they, they,
they don't have a very intelligent terminal.
So, so what you have to do is you run your run screen or Tmux first and then you start
up your Minecraft.
And then when you want to come back to it, you reconnect to it.
If you start Minecraft up and you disconnect, you know, you lose it, right?
And because Minecraft is not a truly integrated server like a web server or mail server or
something like that, that's really the preferred way to do it as opposed to making a full blown
server out of it.
Okay.
So let's, let's move on to Tmux.
So let me first kill all of my screen processes.
I'm going to start up screen dash x, by the way, what happens if I start screen without
a dash x?
I start up a new session, right?
This is a really common problem.
I see all the time people forget to do dash x or dash r.
And so then they end up with this.
They're like, where's my session?
It's not there.
It actually is there.
Now you have two sessions, right?
So I'm going to just do screen dash x and to pick up the last session.
It's like, see the screen, screen is actually a little dumber than Tmux.
It's like, I don't know which one you want, dude.
Which one do you want to connect to?
So it's like, okay, so let's do dash r and then we'll do, let's see, pts, pid.
I'm going to go ahead and copy and paste this.
I'm going to cheat.
You couldn't do that on the old terminals.
So now here's my thing and I'm going to cancel this.
I'm going to exit and I'm going to exit this.
I'm going to exit here.
And now screen is completely and totally terminated.
If you haven't noticed, screen doesn't give you much indication that you're using it.
So you have to kind of check whether you're using it or not.
And I actually like that.
It doesn't get in your way.
As far as you know, it's just another screen, just another terminal.
And that you're going to see is a significant difference from the default Tmux settings.
Okay.
So let's move to Tmux now.
When you're running Tmux, you have a similar situation.
I had a little bit of a problem here because I have configured my Tmux already.
So I'm actually going to break my Tmux for a second in order to just use the default.
Let's see.
I don't know what to even call Tmux to goodtmux.com.
All right.
So by doing that, I have broken my Tmux configuration.
There is a screen configuration, but I've never seen it used and it really doesn't make sense
to do anything with screen in terms of configuring it because screen is so universal.
Screen does also have some ancient, they probably fixed them all by now, but it didn't have some ancient
system situations where it might mess with memory or stuff.
And so Tmux came along.
Tmux is a great project, which probably spent a little time talking about where to get it.
For the most part, you just do sudo apt install Tmux, but these days it's on everything.
I'm just going to do a quick search on duck.go for Tmux to see what's out there.
So Tmux is a multiplexer for Unix-like operating systems.
So Tmux is basically the descendant of screen, but there's some pretty significant design
problems that the Tmux team made that I go back and forth between hating and loving.
So for the most part, when Tmux came to be, Tmux offers brings two new things to the table.
One of them is that it allows you to split the screen.
And when you split the screen, you can change.
It's designed for screens that are a little bit bigger than our standard screen.
So let's make a bigger screen here and let's examine the value proposition of Tmux.
So if I run Tmux, which now should be the default, I can just do Tmux and I don't get it.
Wait, I think I might still be using my config.
Let me just check.
Yeah, I'm still using this.
I don't think I've successfully failed to not use mine.
So I'm just going to finish this video and tell you how to use Tmux by using it
the way I have configured it rather than telling you how to use the default.
So I'll jump right into a description of why I am choosing to use the Tmux configuration that I do use.
So where did my Tmux configure?
Why did I rename it?
Oh, good Tmux.com.
So the reason that I have configured my Tmux this way, and you can get...
Let me show you right away.
I've showed this in other videos, but right now it's currently in GitHub.
It may move to GitLab, but right now under my config, which is github.com.
Slash rwx-rob slash config.
You can go find my Tmux.com.
It's the only file you need.
And I suggest creating symbolic link from your home directory,
which is where it will be picked up automatically, and putting it there.
So this one, it doesn't have a lot of instructions in it.
This is not original in any sense.
This is a configuration that I found about six years ago
that I tweaked that made Tmux behave like screen.
And you might ask, well, why would you do that?
Why would you want to change the defaults on Tmux?
And that is a really, really interesting question,
because there's actually strong arguments both ways, right?
If you change Tmux to behave like screen,
then the muscle memory that you've developed for using screen carries over to Tmux.
So that's the number one reason that I do it.
So that means that I have...
I won't talk about splitting panes and stuff, but it means that up, down, left, right...
I mean, most importantly, the key for...
they call it the prefix key is not control B, which is the default.
I've changed mine to be control A.
And that's a pretty big deal.
It might be controversial, but a lot of people do that.
And the reason they do it is because they've been using screen their whole life,
or they expect that they will only have access to screen on, you know, hundreds of systems when they need it.
So this is a common way to get around that problem.
And then, you know, I've done some other binding where control AA does the same thing in Tmux that it did in screen.
And long and short of it is, this configuration is compatible with screen.
So screen and Tmux are the same.
Everything you do on screen for the most part is the same thing in Tmux.
And then anything that's new in Tmux, I've added other more intuitive bindings.
For example, I don't even remember what it is to split a pane in half, but we're about to see this.
So I use a bar to split.
I use a slash to split.
I use a dash, which reminds me of a line to split horizontally.
And I have moved my navigation to use the VI keys.
So my VI keys are used to both navigate between panes and to resize a pane.
And I'll demonstrate that now.
And then, of course, I have no arrow keys.
I've disabled the arrow keys because I don't like allowing myself to be.
And I work with young people that I don't want to pick up the habit of using arrow keys because you don't have arrow keys 90% of the time when you're on a system.
That goes for VI as well.
That's a different video.
So I will go back to Alacrity and here we have our Tmux session running.
My configuration of Tmux running is probably good.
We're doing this because I don't even know the default Tmux keys anymore.
I couldn't even tell you other than the prefixes control B.
So when I split the screen, I can do control A and the pipe key or the slash key, which is right above the return key on my keyboard.
And that mnemonic of being an up and down line helps me to remember that that's the split.
It also helps my nine-year-olds that are learning how to use Tmux to remember it as well.
If I want to split one of these in half vertically, I suppose, then I do control A and then dash or underscore.
And there are a number of other things you can do here.
Tmux has added quite a bit, but the fundamental addition of Tmux to screen is the fact that you have panes.
The panes are much more complicated there.
I've also bound control AW, which we used in screen earlier, to show you what we have.
So this shows you all of the different Tmux sessions I have running on the system.
And I can switch between the windows, but now instead of it just being switching between windows, it's switching between sets of panes.
So in this case, I have a set of three panes.
And there's all sorts of extra fun things you can do.
So you can do control AT to show the current time.
You can control AQ to show you what size I'm doing again.
It shows you where you are.
You can actually swap things out.
You can script all of these things too, and you can tell what size your panes are.
To resize a pane, for me, is control I and then control JJJ.
That goes down.
Control A, control CCCC, or KKK.
Control A, KKKK.
Control A, HHHHH.
Control A, LLL.
Control A, you have to hold control down, LLLLL.
Now, and to navigate between the two, instead of holding control down,
I just do control AH.
Control AL.
Control A, let go K.
Control A, let go J.
Control A, let go H.
So you can quickly navigate around and you can pop off as many as you want.
You can just keep going all the way.
And you can have a lot of fun with this.
I mean, you can make a little time thing down here.
You can maybe do team matrix over here.
You know, you can have all kinds of interesting things.
You can, like, I don't know, you can make, like, you can dask your art, all sorts of things.
So as you can imagine, you can really make strong, you can take it, and by the way,
remember that thing with screen where you could add another window?
We still have that.
So if that, if that kind of screen real estate isn't good enough for you,
you can still do control A, um, C to create a screen, just like screen.
And now I have this one, right?
And it's a brand new one.
So if I do control AA, just like screen, it goes back to my other pain set.
It toggles back and forth and type exit.
Um, you can zoom in on the pain, control AZ, and it zooms in and I can do control AZ again.
I don't recommend that.
However, if you want to separate a pain out into its own window,
that's control a exclamation point and that will take it out.
And now it's his own window so I can go back and forth.
Usually that's what you want to do, by the way.
Um, I've learned just through sad experience that most of the time when I want,
um, when I think that I want, uh, to zoom, what I really want to do is have a new pain
because I get over here and I forget that I'm in a zoomed in pain.
And then I try to split and then I get that it splits it and it goes, oh yeah, yeah, yeah.
Okay. I was just zoomed.
So there's a difference between zooming and there's a difference between, um, whether you're doing,
um, how come my status bar is not the default?
Uh, my status bar is not the default because I have changed all of my defaults to,
to use Tmux.com.
So as I mentioned earlier, I'm using my own, my own Tmux.com,
which also turns off the status bar.
I am not a fan of the status bar.
Again, I want it to behave just like screen and I can pull up anything that I could possibly dream of
looking at from, uh, from just looking at control AW.
I don't, I don't need a status bar.
A status bar is a distraction to me, um, and it's unnecessary.
So a lot of people disagree with that.
Um, but that's, that's why I don't have status bar here.
So, um, but this, this is covered pretty much in a whirlwind fashion.
Uh, what the difference between Tmux is and what's the difference between a screen is.
Um, if you haven't noticed, this is my, I prefer this over multiple terminals.
Because multiple reasons.
Number one, I can just detach from it, go and do it remotely.
So by, by reducing the ways that I manage my real estate, uh, on my terminal to one common way,
um, I can use that wherever I am.
So a lot of people spend a lot of time configuring their desktop manager or their window manager
and they've got these really great hotkeys and they move everything around.
And I just, I find that a waste of time because I can train myself to use Tmux effectively.
And at the very, and as long as it's screen compatible, if I'm on another system on another terminal someplace,
I can use screen.
And when I'm using screen over there, if they don't have screen, I can copy Tmux over.
I, I unfortunately, I do have to copy my Tmux configure.
I'm totally lost.
And that's, that's a big argument against customizing your Tmux in the way I have.
Um, you know, purists might argue that, that using Tmux's defaults is the best way.
Um, I, I use Tmux like other people might use Emacs or, or any other IDEs.
Therefore, um, and because it's going with screen, if I'm on a remote system,
I, I depend more fully on using, on screen being the same over everywhere it is.
And so I've, I've deliberately not customized my screen, which you can anyway,
but I, I haven't customized my use of screen.
So if I'm on a remote system, I can at least have the functional, the base functionality there.
And I, and I, I allow myself to liberty of using Tmux the way I would,
I want to configure it in my, in my particular case.
And so if you like the status bar at the bottom of your Tmux, that's,
I'm not arguing against that.
I'm just saying that that's just not my thing.
So, um, Tmux is actually part of, um, for, uh, to commit, I believe critical command line tools,
um, terminal tools that make up, um, you know, the terminal master suite,
I call it, um, VI for me, uh, Tmux, um, bash and links.
And I've done another video on why links is the best web browser.
It's how fast it is.
Um, when you combine those four items together,
you have, I believe the most powerful ID in the universe and it uses nothing but your terminal.
And so if you, when you combine those, if you, you have to combine them properly though,
and when you combine them, then, then value propositions of things like Emacs,
you know, kind of fade away because I had value propositions of things like Neo Vim,
which allow multiple paints also fade away.
I would rather have multiple single pains running Vim without needing pains through, through Neo Vim.
So my way of managing real estate is universal as opposed to not having Neo Vim on any given target system.
So I would rather build a dependency on the tools that I know are going to be on the system.
Um, because I, I, I, while I want to have an IDE that's powerful on my local system that's terminal based,
I also want the ability to get on any system anytime and be completely functional,
whether I break into that system or I'm being, you know, paid to administer it.
So this is my justification for how I've configured Tmux.
Um, just as a reminder, we've talked about, we went into this talking about what a multiplexer is.
Um, and then we, we went ahead and I showed you how to use screen and where it came from
and how it's used to manage both, uh, screen real estate windows and it's also used to keep a connection up,
a persistent connection.
And then we went forward and we talked about, um, how Tmux is added onto that by being able to split that real estate
even further into multiple panes, even though it also has multiple windows.
And then we've talked about how to integrate that into your development environment
and a little bit about why you might change the defaults.
Um, the source, uh, once again, as I end the video here is github.com slash rwx slash rob slash config.
And if you look in there, you will find my Tmux.com.
Um, all you need to do to get that to work is to put that Tmux.com file in your home directory.
Here I'll just mine here now.
Um, and, uh, slash dot Tmux.com.
And there is mine.
Um, oops dash L and I'm going to use you.
Okay.
As you can see, my Tmux is a symbolic link that points to, uh, the Tmux in one of my github repos that I managed this way.
And I strongly suggest, um, that you, you manage your own configuration files or dot files, um, that way so that you don't lose them after you've configured them.
All right.
I hope this has been, uh, somewhat helpful and you can make sense of it.
There's a lot of assumed, uh, sort of Linux knowledge going on there.
So if you need some help, you can look at the other videos or you can come check with our, our little community over on rdbxrub.
Um, and I'm going to go ahead and open up the chat now.
So let me bring that back.
I might have to read back for quite a bit.
Um, but I'm going to ask, answer some specific questions here.
See how far back I have to go.
All right.
Um, node.
More of it's stuff.
Um, this is essentially what I want to set up being able to have my dev environment on a remote machine that is always running so I can just attach detach from any of my machines when I want without losing state.
And I powered down and closed terminals.
Uh, mtem, that is exactly, exactly why I do this is exactly why I do it.
It's also why I maintain my entire configuration in a single file and I get repo so I can run curl, pull the thing down onto any remote system and be instantly back where I need to be assuming the applications I use are on there.
Namely vim, you know, Tmux, uh, bash course and, um, links, which is a harder one to get installed.
But usually I can get away with doing my, my, um, searches and stuff with links on a local system.
Shared bindings are very useful and kind of void conflict.
This is why most programs share bindings with them.
Right.
And that's why I have configured my Tmux to use them bindings.
My fingers know them.
My links is configured to them.
My, my bash history is configured to them.
Um, I would argue very strongly that the most important reason for you to use them is because of all the VIM bindings that are built into everything else.
Uh, you know, every other tool has VIM bindings and VIM bindings were created at a time when there were no mice, but that doesn't matter.
It still makes you a thousand times more efficient because there's much less travel for your hand to go elsewhere for different things.
So this is very useful.
Thank you.
If you can't remember that, um, just, uh, what is this?
I'm a little bit afraid to click on it.
Um, I'm going to go ahead and do that though.
Let's see if it comes up.
What is this?
I'm not going to be sad.
I clicked on it twice.
We might get to, um,
we're just waiting for this to come up.
Uh, T-Mux cheat sheet.
Uh, T-Mux A, oh, I see.
That's nice.
Let's bookmark that for the, for the crowd.
Um, okay.
So MTEM has, has shared with us, um, a link he's found to T-Mux shortcuts and cheat sheet.
Now this is, this is, there is, we just scratched the surface of T-Mux.
T-Mux has an immense amount of things that can be customized.
And that's one of the best parts of it.
Um, but some, but it does make it very hard to learn even the basics.
Like I, whenever I run T-Mux, um, it's probably really important that you understand this.
I use a T-Mux space A and what A does is that reconnects to the last thing.
I forgot to mention that, but that's important.
Uh, after you create a T-Mux session, the first time you should always use T-Mux A after that.
And that will force it to find and connect to the last session that was available.
There's other ways to connect to different numbers.
There you go.
A number, uh, T-Mux LS is the same as screen LS, dash LS.
It shows you all the sessions.
You can kill sessions and blah, blah, blah.
There's just, I don't want to bog everybody down with all the stuff you can do.
Um, but there is a lot that you can do.
Um, some of these, these pain splitting things here are not relevant to me because these are the defaults.
So if you want to understand the defaults, there's a good link for that.
Um, I have never learned the defaults because the first moment I learned T-Mux, I noticed that the keys were different than screen.
And I was like, this is ridiculous.
I'm not doing this.
And I immediately found the other system administrators who had created configuration files that were based on, on screen.
And I have never looked back.
So I would actually completely be lost.
Um, but I'm not afraid because I know that on those systems screen is also there.
So I always have screen as a backup.
People who use T-Mux with the default findings do not know how to use screen.
So if they get on a remote system and all it has a screen, they're done.
They can't do anything.
I mean, they'd have to go back and read all the commands for it.
That's also a reason not to use the arrow keys and things like that and Vim.
That's the reason to keep your, your muscle memory, um, you know, consistent and ubiquitous.
All right.
So, um, what else we got here?
How come my status bar isn't the default because I overwrote it and I turned it off.
That's, that's less of a thing though.
If somebody wanted that, they could keep it.
I don't like giving up a full line to status stuff.
I'm never going to look at, um, M to M.
Oh, I thought you reverted back to the default.
I tried actually.
I tried to refer it and I failed.
And then I, and then I, um, I went ahead and for some reason it didn't pick up.
I don't know why.
Um, and when it didn't, I went ahead and just showed you my configuration.
And I would have probably just flailed around, not knowing what to do without this cheat sheet you've provided.
So, so that's good.
Um, I'd like to shut off my status bar, but I also like having a visual cue of how many windows I have open.
That's fine.
And, um, just to give you, I mentioned this already, but my way of doing that is this, I do control AW.
And I, I like, when I want to see windows, I want to see all the windows.
You know, I don't want like some little, like little blur constantly bothering me at the bottom of the screen.
When I want to know about windows, I want all the windows.
I want to do control AW and see them all.
This, uh, that way, that kind of thinking also play applies to what I think about IntelliSense.
So that's when you're using an editor and it, it's constantly popping up health about help about what you can tab and get.
I absolutely hate that because if I want to look something up, I want to look it up.
Not like, and I want to get examples and everything.
I don't want to get constantly prompted and it's super annoying to me.
And not just me, I know a lot of other veteran developers and system ins who absolutely detest any form of tab completion or IntelliSense,
other than the command line bash completion, of course.
So, um, you know, it's actually faster to look stuff up using links, but that's another video.
Um, all right.
So I like putting system information in the SAS bar.
Yep.
Okay.
So I'm having control A on my local Tmux and, uh, and having the default control B, uh, on the remove on the remote servers with the green status bar,
especially useful on a SSH.
And, you know, I'm glad K so you brought that point up.
That is the one pain point that I regularly have.
Okay.
So if you, if you do what I'm doing and you get on a remote system, uh, if you, if you get on the remote system and it has Tmux,
it's probably a good thing that it's not using your bindings because if it were, you would, your bindings will get stolen.
So it's this whole screen within a screen situation or Tmux within a Tmux situation.
And I don't know how many times I've been burned by that.
I'm running Tmux locally on my computer to do my development and I connect to another system and I need multiple pains and it's a remote system.
So it lets me pull up another Tmux over there.
Now, when I do control A, whatever, who gets it?
The remote system, local system?
Well, the answer is the local system gets it.
And that might not be what you're expecting.
And so there's two ways to get around that to do what Keeser says, which is, you know, go ahead and use the default bindings on the remote system,
which is probably fair to say is going to be the way it's going to be because you're not going to have customized a remote system.
That would mean it would make sense for you to learn the default bindings for Tmux as well as, you know, as your personal bindings for Tmux locally.
That's one way to do it.
Another way to do it would be to not use Tmux remotely, use screen remotely.
Nine times out of ten, when I'm connected to a remote system, I do not plan on splitting the pain on that system.
So I'm not going to be using the real estate.
I'm going to just use screen to get multiple windows, and that's it.
Now, that's still a problem because I've bound control A.
So now the control A is gobbled up by my local Tmux, and it never makes it through to the remote screen.
So that is a problem.
In fact, that's a pretty solid argument against the way I do it.
The third way to work around it is that I maintain two different terminals.
And so that's the one time when I might have more than one terminal.
I would have, like, alacrity running, and then I would have, like, my regular session.
And to tell you the truth, I like to do that anyway because I like to be very clearly mentally distinguished between my local development environment and my remote system.
And I have shut down, I'm not exaggerating, I'm a little embarrassed to say it.
I have shut down corporate mail servers thinking I was turning my laptop off for the night.
Shut down dash R and out. Why isn't my laptop going off? I've done that. I did that once.
And, you know, we had to call Ops and Boulder and have them restart it.
Yeah, so I, you know, obviously the way to route that you pay very, very close attention to your prompts, right?
Because all your prompts look the same in command line world.
And so the system that I'm working on locally is the one that I'm all paned up and it's all Tmuxed up.
And so I like to have a very distinct, separate terminal for any remote work because unless I'm pulling, you know, content down,
then I'm clearly doing a context switch so I'm doing control tab to go between, you know, my two systems.
And I'm not at risk of doing that kind of screw up.
I actually do that same thing on stream.
So I will have a terminal that is sometimes even a different application.
In my case, no terminal and I'll use that transparently or whatever on stream.
And then I'll have another terminal and a lack of terminal or something.
And that will be where I do my private stuff where I'm working with, you know, schedules for my students and stuff.
And that way I have that separation and that's just over the years.
I've just come to depend on that as kind of a, you know, safety net to not make that kind of mistake because, you know, I work with a thousands of systems.
And so on any given day, I could be connected to any system.
And a lot of times the systems were in the Fortune 500.
And so, you know, if they, if I were to do something like that, you know, it could have been much more serious.
And so, you know, as a professional, that's, I just find it safer to have that separation.
But that's, you know, in the worst case scenario, somebody has my same bindings on a remote system.
Well, you know, my Tmux would gobble it up and it would save me from doing something that would remind me that I'm on my local system.
So I'm okay with that.
But it's a solid argument against doing what I'm doing to say and to just use the default bindings.
But if you use the default bindings, you just because if you use the default bindings for Tmux and now you're connected to a remote system, how is that any different?
The remote system has now gobbled up control A, control B, right?
So now you're using a local system with control B and a remote system with control B.
So either way you have the problem.
If you, at least if you set up one differently in your personal config from the default like I've done, at least you have, you know, at least you can, you can see that difference somewhat.
And frankly, that that might make it safer for you to use, you know, your local Tmux sessions to connect to remote systems rather than firing up a full separate terminal for me.
But I think it's important to remember to take stock of the fact that we're, I'm talking about just opening up one extra terminal, not 10.
And, you know, I've seen admins and people, in fact, I've seen streamers who fire up multiple terminals and they're talking about the best desktop managers and they're, they're debating about which one deals with terminals the best and, and has, you know, managed to like six or seven terminals all at the same time.
And I'm just shaking my head.
I'm like, guys, no, it's like, it's so much easier with Tmux, because not only is it wicked fast.
I mean, the time is the type of speed here.
I'm sorry.
Hey, guys.
All right.
So, so just wrap up here.
So, um, I was just going to say that, you know, it's, it's, I don't think you saw how fast it's right.
You saw how fast it is to split those with Tmux.
I mean, there's, there's really no comparison.
Oh, I think I just lost my stream.
I did.
So actually, here we go.
So, um, let me go back here.
So, so you've seen how fast it is to just split the stream.
You know, the amount of time it takes to split a pane is way faster than it takes to fire up a new terminal.
I mean, it's, it's like ridiculously faster.
And so that's objectively better than having multiple terminals.
And that's, that's all I'm going to say about that.
So a lot of people disagree with me.
They have to have, you know, different terminals with different, whatever, but lots of lots of need of them.
People like, oh, if any of them lets you have multiple panes or multiple terminals, like, okay, why would I ever do that?
I mean, I can open up a new pane and open a brand new version of VI in less than two seconds.
So anyway, um, and not to mention the fact that when you get all those hotkeys down for your NeoVim, none of that's going to go with you to another machine.
Whereas if you have T-Monks or, or, or screen on another machine, all those skills transfer.
So.
