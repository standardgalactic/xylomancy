Sure, yes.
No.
My new favorite thing is get add-p
to individually add the chunks to a single commit
so they're all relevant.
It's so cool.
Built-in help documentation.
Does you hate how when you print help,
you can't go to the section you wanna see of help?
Well, you can in bonsai, at least by default.
And if you wanna, you can make your own help command.
You don't have to use mine.
So.
I already used generics a ton.
And I really love it.
This is probably the coolest thing right here.
This function right here could not be done without generics.
That's right.
It could not be done with interfaces.
It has to be done with generics.
There's no other way to do it.
And it's such a basic thing to have music.
A lot of people when they do co-working sessions,
they'll stop talking and they'll turn their music on.
Not me.
I am gonna be talking during that time.
Entering the music off.
And in the reverse, when I take a break,
I'll put the music on and I may or may not be talking
during that time or walking away from the computer.
So that's how it works.
Create a file and directory name completer,
which is the default in most shell script applications,
which does completion.
But ours is gonna be better
because it's gonna allow you to do things
more precisely than the built-in default in most shells.
And let me tell you what I mean by that.
You know, tabbed your way through there,
you know, to get to what you want.
You like recognize that you run out of tabs eventually
and it starts to default to showing you file system things,
even though the files are not valid arguments
at that point in the command.
And this is one of the greatest pet peeves of my existence.
I'm gonna banish to make it so that every command
in the sub tree, in the bonsai sub tree
has to be explicitly set.
There's no default completer.
If you don't set a completer, it won't complete.
It won't put something there,
but you can still have powerful completers if you want them.
This is one example of generics that we've been using.
I can show you that really quick, I think.
Filter, map, here we go.
So here it is.
You can't do this code without generics and go
and get good contact with my lips
before I take a drip out of it.
But if you're like at all lazy in your drinking habits,
which I am,
it'll all end up on your shirt
because it'll break the seal and it'll look it down.
That's cool.
During break, we need to look at that closer.
This is really cool.
It's what I've been telling people.
This is more important than your website.
Seriously, making a really strong GitHub landing page
is way more important than a website, in my opinion,
unless you're a web dev.
The skill stack stuff, and I found our old site,
www.artificerob.g.github.io slash vi-help.
This was, you can print it.
There's a PDF down here and that has the cheat sheet
that I used to print out for people
and have them put next to their monitor
so they can learn Vi.
It's available for free out there.
You can go download it.
I've just hit the single most annoying,
idiotic, moronic, stupid design decision
the Go team has ever made.
And I'm gonna rant about this is gonna be a long one
because I am so pissed off that this exists.
This is so fucking stupid.
Watch.
Watch what this evaluates to.
This is the caller, right?
The caller has a value, it's an interface.
The caller is nil, right?
And here is what it contains.
That's the type of reference it is.
But here it says it's true.
Nil?
True.
Which one is it?
Who knows?
To the fact that if you involve an interface,
which everybody tells you to do and go, do interfaces,
as soon as you involve an interface,
a simple check against whether that thing has been defined
will return false.
So you can't tell whether it's nil
and your code that fuck up because of this.
The only way to fix this is to use fucking reflection.
This shitty ass reflection in order to get the code
to work correctly.
And I'll show you, I'll change this other lineup here
so you can see the value that comes out of that.
Here's the code that works the way we want it to.
As you can see, it's not reflect value of is nil
and now it's false.
But we had to actually jump out of go and use reflection.
Might as well have used Python at that point
because we've incurred such a huge performance hit.
Not to mention how non idiomatic it is.
This kind of shit just really pisses me off
because there are probably thousands of people out there
using if interface that equals nil
and they are failing because it's not catching it.
It's fucking terrifying.
Watch out for this one.
I'll have to say.
Regularly using the length of arguments
as a check for an empty slice.
And that is a safe way to do it.
And I've been reminded today,
I was tempted to try to do args equals nil
and I got burned really bad by that
because args equals nil was false
even though it was zero condition
where we had an empty slice.
And the equals nil did not pass.
So just to be safe, always check the length of arguments.
Then no matter what state the slices in,
you'll get what you expect.
Comparing against nil is always dangerous.
