That's some good stuff.
Hey there. Welcome to the stream today.
I'm going to do a little stream about which editor you should use first
for coding. And this is because I have been
trying to make the decision about what editor to use on the stream as I go forward with the rest of the beginner
boots. And I think it's a big topic. I've never covered it
before. I've covered little pieces of it all over the place, but I've never
tackled the topic at large. It's a huge topic.
Before I even let the crew of hecklers and debaters
and outlying intelligent people to come on here
and make all their cases for whatever thing they use, I just wanted to talk to you
for a second about you making your own decision about what to use.
God knows I'm a very opinionated guy and I have a lot of specific opinions about this.
But I wanted to just go ahead and run it all
by you. First of all though, let me just make one change.
There we go. Much better. Cheers.
A little bit of spike coffee there to get me through this. Actually,
the topic of
the topic of an editor is a really controversial topic. Everybody argues about it all the time. Everybody's
right. Everybody's wrong. And the bottom line is that it comes down
to what is the best tool for you. And so today we're going to talk about
three specific types of editors,
types of tools that you can use for editing code. A lot of these editors you could use
just to edit whatever you wanted to. And they file
into three categories. IDEs, what they call individual development
environments. Lightweight graphic editors
and terminal based editors that you know, if you know me at all,
you know terminal editing is my preference. But I want to talk
about all of them so that you can kind of speak intelligently about
which one is the best to use for a particular task. And
if you're watching this video live stream right now, you're probably going to see a graphic for
a while, but there's going to be other graphics inserted in here to talk about this.
So the first editor I wanted to talk about is one called Visual Studio
and we can go ahead and look at where to get this
and everything. So Visual Studio
and let me just put my thing back on.
Visual Studio is the default
for
most C++ development on Windows
from Microsoft. And you just do the search for Visual Studio
and you'll find it. It's really important that you understand that Visual Studio
is not Visual Studio code. And we're going to talk about
that. That's under the lightweight category. This
is a great tool for what it's designed to do, which is
largely work on very big Microsoft applications.
Some people swear by it and they use it all the time. I hate it. I've had to use it on an occasion
and it's a fun fact. There's
somebody who did some analysis on it from Microsoft who
discovered that something like 50,000 lines of code are never even used in the code base.
It's the epitome of Microsoft bloat, but it is
a mandatory tool if you're going to be doing anything in C sharp
or C++ for Windows. It's just really not worth trying to do it in any
other way. You certainly can use other editors for that, but that it's really not
worth attempting that. And so that's
one of your choices. If you're going to be doing Unity development or you're going to be doing
something C sharp, you might want to pick this editor if you're going to use that.
There's another popular editor that's been around for a long time. By the way, Visual Studio
has been around forever. Another editor that's been around for a while is called
JetBrains. It's actually
so much an editor as it is a company.
JetBrains has become
famous for specifically their IntelliJ editor, which has been around
since the 90s. It's a really good one. But this is
your decision whether you want to use this or not. Personally
I think they're the ones who did PyCharm.
This is a little bit lighter than
the traditional integrated development environment than some of the other ones that are out there.
But it is a thing that you can use and
you can give it some consideration. There's Python developers who absolutely swear by PyCharm.
I would never ever use it. But
that might be you. I want to say
there's another one in that branch that's called GoLand.
The other thing too is you get language specific IDEs.
GoLand is the JetBrains ID. This is one
I've heard rave reviews on. TJ Hollowaychak really loves it.
One of the most famous converts from Node to
Go. He uses it. He was raving about it. A lot of people really like it.
It's got great theming and everything. And frankly
if you're going to be developing in a specific language, in fact somebody
who recently got a job with a company that does go development, this is their
new editor. It's not mandated but it's really encouraged that you use it.
I happen to be a fan of the idea of having
if you're going to have a graphic editor that you have a graphic editor
that's highly customized for your whatever it is that you're developing.
And so this would be one that you might consider if you're going to do go development
PyCharm is that way. And frankly JetBrains as a company
has made kind of a business out of creating editors for
specific languages. The first being IntelliJ which was a worldwide hit.
I believe IntelliJ then went on to become the standard native
application development tool for Android. And with 39% of all internet
traffic going to Android phones with Chrome, that's a significant
choice. So if you're going to pick an editor you might want to consider JetBrains
for that. There's one that I have to mention that I absolutely despise
mostly because I had to use it. I was forced to use it.
This got really popular. It's called Eclipse and there would be groans in the audience
if they could hear that you could hear them right now.
Eclipse is probably one of the most notoriously bloated and
horrible integrated development environments on the planet as far as I'm concerned.
However, it is everywhere. There's an Eclipse foundation
and there's I mean it's been everywhere since the 90s because Eclipse got really popular
because it was really the first substantial Java editor written in Java.
Eclipse itself has gone on to be embedded in applications
because of its framework. IBM for example
at the same time their chat client is an entire Eclipse instance
with Java built in. It's one of the most bloated pieces of crap I've ever used.
Not just that, but Lotus was the same way.
You see a lot of things around that still use Eclipse
for lots of reasons. You're likely to encounter it if you're doing any Java development
and particularly even in Minecraft if you're doing Minecraft development.
If I had a choice and I was going to be doing Java development, which I would never choose to do
I would probably be reaching for IntelliJ over Eclipse.
Again, you might not have that choice and Eclipse is super famous
for having all the things integrated into it and it's really popular
with enterprises so they've developed a lot of enterprise tools that use it.
A lot of times I'll mandate that use it. When I was at IBM I had to use Eclipse and I
figured out ways to get around that and use VI under the hood so that I could
just use Eclipse for the things that Eclipse had to be used for
like committing code into the source tree and stuff like that.
Those are the only individual development environments I'm going to cover
just to give you an introduction to them so you know about them. This is
beginner boost material here so I'm assuming that you don't know anything about editors
maybe you've heard somebody say you need to learn this and you need to learn this and hopefully this
will help you make your own decision. The next category of editors was
actually the lightweight text editors. There was something of a revolution started by
Sublime and
it was the first so I talked about this before. I'm doing it again though
because I feel like it's important to do it in a more succinct way.
Sublime text is still I believe
the fastest visual lightweight editor in class
there's still people who really love it but it has fallen out of favor
for two well three main reasons. The first main reason is
that it's highly proprietary. You can use it but you're supposed to buy it.
Number two you can't extend it and there's almost like
yelling at each other flame wars in the support
forums because the person who maintains it which I shall not name
doesn't listen to anybody, does whatever he wants and the people are trying to expand
it and do their own thing just can't and they're just so frustrated
that this project, this product which was so great
is just completely not available to anybody to extend or use.
Now you can write Python plugins and things like that a lot of people do that
and the third thing, the fourth thing is
it's all Python, it's Python and C and so extending it is
even if you could it would be really tough to do it. I think it's C++ actually
but fastest editor on the planet
for a very long time in the graphics category
short of really simple ones and we'll get to those too.
This is a little bit across between whatever the editor is on your computer
and I don't need to tell you about notepad or simple
text or whatever the editor is that comes on your computer, just a plain old text editor
which by the way Jennifer recommends in learning web design
and that's actually how I learned web design in like what 95 or so
I actually coded my first HTML using simple text
on a Mac and that's totally fine. It didn't have any syntax highlighting
you know it was a whole world opening up to me after
that point so don't feel bad if that's all you know and if you have
PopOS or Linux of any kind the built-in graphic editor
is pretty dang good the text editor so we're going to
take those are all lightweight but that's really ultra lightweight right so in between
ultra lightweight which is just text editing and nothing to do with code
and the big fat behemoth IDEs you have
this lightweight brand of editor called Sublime Text which is the first one
and I'm very going to quickly go through the history of that
so after Sublime Text came out and had its problems that I mentioned people ran to Adam
and Adam
and it was GitHub's answer to Sublime
it was an editor developed by GitHub before they were consumed by Microsoft
and it was designed entirely to use JavaScript
in fact the entire Electron API
which people love the bag on now because it is responsible for Eclipse
Slack, god however many more I mean there's so many applications
that have Electron built into them now and Electron is
a framework that was built to build Adam primarily
oh boy what did I just search for Electron
so we have Electron here
I probably should say Engine or something
no should I say framework
Electron gets a really bad black eye these days because so many people make very simple applications that have an entire
Electron framework built into them
and I'm just wondering is the combination of the Chrome web browser
and a web server
by default I think it's Node and the stuff to talk
between the two so it's basically like you have a little miniature web server
and web browser all built into one and that way
so it's kind of like a web application
so you're going to hear a lot more about Electron, I actually have done a video on Electron
but it's important you understand that Electron was created to make
Adam and as soon as Electron came up you know everyone's like well
maybe we can do better so and it was JavaScript it was really slow
compared to Sublime it's still slow compared to Sublime
but Adam was really lighter than the IDEs and it was
extensively using JavaScript which made it really popular with a lot of people really fast
it's still really popular actually and then you have
Brackets so Brackets
was Adobe, Adobe's answer to this
they said hey we want to make one and I'm almost
positive that it's running off the Electron editor but the Electron framework but I can't confirm that
right now and it basically the same idea
it's just Adobe style, different approach
Adobe I guess wanted to do their own for some reason
I haven't met anybody who uses Brackets who's not a big die hard Adobe fanatic
and you know what I'm talking about they are there but that exists
and so that's one of those and then some time after
that Microsoft decided to get into the game and they said you know what
let's make Code.Visual Studio Code
VS Code so that's Code.Mic
let's see Code.Visual Studio
Code.VisualStudio.com
they had an opportunity to really clean things up but they did it
and they named it Visual Studio Code
instead of Visual Studio and this has created crazy confusion for beginners
I don't know how many times somebody has downloaded Visual Studio instead of Visual Studio Code because the icons are similar
they wanted to just carry on their branding and maybe
make people think that Visual Studio is actually not the horrible bloated piece of crap
that it is and so they you know they added Code
on the front of it and it's really tough but just make sure you go to Code.Visual Studio
this is the number one editor on the planet right now hands down by every measure
this is where most code is being written in
Microsoft does know developers and they're pretty good at making editors and so they released
they did a lot of things that weren't very Microsofty at the time
in fact you could argue that this was the beginning of the new Microsoft under Sanjay
you know really really embraces open source
and as far as we know and they released this
to the world and said here's our version and we're using Electron and
ours is faster than Adam and we still use some techniques that are the same
they have their own plugin architecture which is very very rich right now
and people go crazy over this thing there's people who love completion
I despise that and there's you know it's just really popular
with a lot of people this is the editor that I usually have beginners use
so if you're just coming to the booths for the first time and you've never done
any editing and you don't particularly want to you know rack your brain
learning a more difficult editor that I'm going to talk about in a second this is the editor
that I recommend you pull out either this one or Adam chances are
the VS Code is going to be more fun for you out of the gate
one of the things that VS Code does very very well as it integrates with
other services that Github now I mean that Microsoft now
owns Microsoft bought Github
and that meant that they also bought the Adam editor it's open source but you know
and they bought control of VS Code and they got all the 10 million developers
so that were you know committing to Github all the time
and that's a very good 7.8 billion dollars they paid I believe and that is a very
controversial decision and that was after GitLab came out
I'm going down kind of a rabbit hole there but just understand that this is still under
Microsoft's control the future looks pretty bright for Visual Studio Code
because Microsoft does control it other than the fact that they're probably going to blow it out
like they do everything else it is integrated very tightly
with Github which is the world's leading source repository even though
it's not my favorite and that's a separate conversation I use GitLab for everything
and so that's I'm going to kind of conclude
except for one other thing Visual Studio Code has Microsoft's
limitry that's embedded in it that you have to actively go in and find and turn off
and nobody does by default so I can't recommend
an off that you at least give VS Codeium a try
VS Codeium and
you can go find it it's actually if you're using
Papa West like me you can just search for it and it'll
look like this is what it looks like it's exactly the same
we're not going to run it right now but so that's what we're looking at
and you can download VS Codeium all VS Codeium is
it's exactly the same project thank god for open source right
it is VS Code in every way it's just had all of the telemetry
the tracking and privacy violation and stuff that it is activated
by default in Microsoft's tool there are some things
that I've heard but for the most part I think you're
going to be fine to use this I have not well other than
the other day I haven't given a lot of work but I have used VS Code for more than a year
and a half at one point I was a total convert to VS Code and I actually gave up my favorite
editor of all time them for VS Code for a good year and a half and I did a
video on that ultimately though I concluded that even
a lightweight text editor for me is just too heavy
and too slow and people take great exception with that
but I am not a graphic editor guy I never have been because
the terminal is always going to be faster I can argue
all day that the terminal on every level is faster than any graphic application
period just from the trips that you have to make over to the mouse all the time
and however to use a terminal editor today
it's a craft you have to like practice it just like the piano or something
you can't just jump in and use it it's pretty hard so let's shift our gears now
to the terminal editors and I want to talk about those and a little bit of the history of the terminal
editors this is that the terminal editors are my favorite
and after that year of VS Code it was my own people then my own community
reminded me that it was still faster to start up files and everything
with VI and it is just better
so based on that we're going to go back and I'm going to pull up the chat
I'm sure we're going to have all kinds of people in the chat talking right now but
before we do that I just want to tell you about them
I think I can probably go pull up so I have to give you a quick history
on the editors here so let me go back to the title screen for a sec
so when it comes to terminal editors
you have to go back into the history of terminal editor and know what a terminal is
first of all a terminal is the thing
that you get when you fire up
I'm firing up one right now so you guys can see
so this is a terminal editor
and I'm going to show you this
actually give me a second I'm going to make it a big screen
I'm going to change this one to be
so that it hides stuff
the thing about terminals is that you can set their colors and everything and I just want to
set that to something that's very readable for right now instead of the transparency
just so you can read it
it's a little hard to read sometimes
so we'll do that and then we'll bring this guy
make this thing full screen
so if I bring this back
to here you see you just get a plain terminal
there's nothing going on it's just a terminal and terminals can be really scary
if you don't know about them you haven't used them before but they're very powerful
and we're going to talk about terminals at another time we're not going to talk about terminals right now
but I did want to introduce you to different kinds of terminals so the first terminal
is ed and it's actually you could argue that it was the first terminal ever made
x I think predates it
and ed is a line editor
and it lets you set in commands
and those commands will adjust each line
of a file that's coming in and I don't want to spend time with any of the editors
showing you because I know it'll take too much time
but the second editor after ed was a editor called vi
and vi stood for visual mode of x or ed
so it was the other one just allowed you to change one line at a time
and vi let you have like a whole screen and to just let you
see what that looks like so I mean where are we right now
we could probably do temp some.md
and you see you get this screen this is actually them and we're talking
about that but you get this screen and you can type stuff in here and save it
and such right and so that was visual mode but you see how it took out the whole screen
so vi and actually there's another I don't think I have it installed
but let me do this really quick
install nvi
and you gotta do my password there
and there we go we'll install this really fast our package is great
package systems alright so now I can do the same thing
I can do nvi and
this is nvi is the original vi there is no
you can't get the original vi usually these days it's really hard to find
unless you're using a really old computer most computers come with a command call vi
which is aliased to a modern version of it called VIM
vi improved but the original vi
is represented in a program called nvi not to be confused with neovim
and we'll talk about them in a second
nvi is a bug for bug compatible version of the original
vi that came on unix systems from the dawn
of time and it continues to be the default editor right here
on bsd unix which is a different you know kind of operating
system we're not going to talk about today but all this terminal stuff originated with
unix actually minix and we can go back but for
all intents and purposes unix was the very first time in college campuses this was sort of
used and then linux came about this isn't a terminal history class right now but we'll talk about that later
so the question comes up well
so what should I use should I use vi or should I use
VIM so the next generation of editors that came out after this was
a thing called VIM and VIM is just improved
vi and then
an attempt to improve upon that yet another version of VIM came out called
Neo VIM and rumor has it there's another one called Space VIM now which I'm not
interested at all I'm not interested at all in Neo VIM and I actually strongly discourage you from
using it for reasons that I can describe I can send you to my blog post
why you might not want to use it VIM however is my favorite
and because VIM gives you all the power of customization
of your command line terminal and why would you use a terminal
on the command line the single biggest answer to that is
in the case of vi or VIM is because you can fully
integrate your computer's terminal power into
your editor and while you can pull up a terminal
in VS code that is not necessarily the case
right you it's a lot harder to do you can do it
but it's not as obvious so you know if you learn
vi and you don't learn or VIM and you don't learn how to integrate the shell
commands and be able to write really quick little shell scripts in order to do
things or you don't learn how to use macros which I took a long time to do because I was a
sort of a vi purist for a very long time you know you haven't really learned
them and you're not going to really understand a lot of its advantages you'll just be frustrated
because you can't exit you can't escape which is you know big joke out there
so but if you do allow yourself to do the things you can
you can make the most powerful editor you can
imagine in fact when combined with a really amazing shell like bash
and a multi a terminal multiplexer
which allows you to split your screen up into pieces like Tmux
you have what I believe is a far more powerful individual
development environment without the bloat it's the most efficient
way to do editing of all time not only that but it works
everywhere and so before we go to the other terminal options I just want to say that
vi is installed on every VR Vim is
installed on every Unix and Linux system for the last
like 50 years and so if you are going to be
in a situation where you just need to attach to a cloud machine with you know headless
that means it doesn't have a graphic user interface and you want to be able to apply what you're going to do there
you just want to learn them or vi
and you just you just do because that way make it you can be effective
anywhere if you're going to be a hacker you really need to learn vi if you're going to be a hacker you need to
learn ed also because a lot of times when you break into a system you don't even
have that big fancy screen all you have is one line at a time and that
therefore ed comes in really handy because ed allows you
to edit files there's other ways to edit files but
that's a really strong case for you to learn ed if you're just like wanting to be a web developer
or you're wanting to just write you know some go-ko for some reason
or for whatever you know edit pod files for Kubernetes or something
that that is you know not necessarily a
reason to learn ed but vi doesn't hurt because it works everywhere
but that brings us to the next option but speaking of defaults
some time ago the Linux foundation
and all the Linux people decided to get rid of vi as the default they didn't take vi off
but they they stopped making vi the default editor
and they started using something called nano which I actually despise
but I understand why people need to use it to get going
the reason I despise the editor and you see me using my
just like writing and then pushing backspace and stuff like that
this nano is by the way
is a newer version of pico which has been around for a while
and these got really popular because they were used for mail
processing back in the day when you would use your terminal for mail so people remember them
and it is definitely more intuitive to a beginner but
you really have to span the arrow keys you can't navigate around you can't really
integrate your shell you sort of can and the most
annoying thing of all here is that it encourages you to use ctrl X
to exit and just the see all these things
down here that begin with a carrot those are all you know
control things and I just really don't like the use of
control characters but I've been overruling everybody on the
planet thinks nano should be the default editor on Linux now and now it is
to be fair sometimes you would do something that was really important
like you'd be editing a schedule or file
and cron job and you would go to edit it and it would throw into vi and if you didn't know
vi you were in trouble because now you couldn't exit because you didn't know how to exit there's no
there's no menu you couldn't get out of it and that's like a long time
you know joke in the world of
vi so that's why nano is there
I can't in good conscience recommend nano if you're going to use the terminal
because the whole reason for using the terminal is to make it take advantage
of the terminal and its integration with the shell and so that brings
us to yet another option which is very popular with academics
and hardcore coders and
and many many other really
substantial developers and that's emacs and
I actually do not like emacs I played around that was emacs
curious for a while the reason I'm going to before I get into emacs
I don't think I can operate it I don't even know if it's on here let me check and see
nope it's not even on here
I have to install I'm not going to install I'm not going to waste your time
I would be totally lost using it some people swear by it people
joke and say emacs is in an editor it's an operating system
and the reason for that is because emacs was developed primarily by
a guy named amateur stallman who wrote most of the
ccode for the utilities that use along with linux the gnu
core utilities he's the guy who says you should call
the gnu linux instead of linux because he believes
his contribution outweighed the linux kernel itself
as well as everybody else's contribution to the whole linux system
which I totally disagree with but he made
emacs and emacs is still popular most of all is using something called microlinux
apparently and the attraction from emacs is that
it can be customized it's
basically the heaviest possible terminal application
you can run for editing anything and it's not just editing
you can change your file system they've got so many plugins
that make it do so many different things they even got stuff that makes it behave like vi if you want
and for some people they really love that you gotta understand that
that was a thing when terminals were the only thing in the house
emacs was like really powerful I mean it was really powerful
back then there was no tmux you couldn't split panes up you had screen
which allowed you to have different windows and cut and paste and text back and forth
but a tool like emacs at the time was I could see how it would be really compelling
particularly because there wasn't no network yet so even before
networking existed emacs existed
but nowadays when we pick a terminal editor I believe you're picking a terminal editor
because you want to be fast you want to integrate the shell commands
and you want to be able to use your editor anywhere as fast as possible
you don't want to wait up for things to start up and by the way that means
that you can't take your big fancy emacs configuration with you
you've got to know how to edit files on remote systems without all that
it doesn't take very much to copy over that to a system
but you might not even have permissions to do that in certain enterprise environments you have to have a change ticket to do that
and so that's my take on it
becoming proficient with vi first and then vim
allowing yourself to use the extra vimisms which I finally gave in on
allows you to have the efficiencies of emacs
locally and build
basically an IDE by combining vim
and tmux but it also allows
you to use the same fingers and
operations you know think muscle memory on any system
anywhere and emacs doesn't allow that you'd have to install it as you just saw on all those systems
to be able to use it so I believe that's a big strike against emacs
for anyone who wants to use more than one computer
if you're just going to do it you're an astrophysicist and you're going to just work on one computer the whole time
and you want to be able to write your own plugins and everything and all this stuff and then
emacs might be your option there
anyway another reason to use vi is because the bindings for vi
are built into everything so the use of hjknl
for navigating through the history is the thing
by default the terminal in linux is set to
emacs mode so it's as if you're interacting with an emacs session
but if you do set that show vi you can use that you can use vi mode
there is no nano mode or anything like that and you'll come to really appreciate that
and your fingers will memorize things from the terminal that carry over into your editor
and that then goes into terminal browsing
when I browse a website I'm using one hand
and I'm using the same vi navigation keys because those are once again
built in and it's very common to encounter
terminal software that has
vim bindings you can even do a thing called vim
which can work in crow as a plugin and allow you to navigate your graphics
browser without touching your mouse at all you can just stay there and do
vi sorts of things I'm sure similar things exist for the emacs kind of people
but as I've said from the beginning
there's different stages here and if you're just starting out and you don't know what to use
and you don't want to use text edit anymore the first pick I would say is bvs code
it's very intuitive it uses the mouse it's what you see as what you get
you want to move into the terminal you're eventually going to have to move into the terminal
there's just not very much not even in the web development front end world
there's not very much that doesn't force you at some point to go onto a terminal
to do something and I'm not going to go into
all those reasons you would have to use a terminal but these days using a terminal
is sort of mandatory skill for a technologist and
particularly in the cloud environment because it's just ubiquitous
it's just everywhere it gives you so much power and so if
that is true you know and you have to use it you might as well I think
you might as well learn the best editor for the terminal on any terminal
so that you can be productive no matter what and if you want to
take it up a notch and use emacs some people use emacs and vi
there's a couple really great bsd people in here who
use they'll use emacs and they'll also use vi depending on what
system they're on and that's only two terminal editors to learn that's not too bad
there's no way you're going to be able to do a vi code on that by the way just say
no to all of the remote editing crap that's coming out in vi code
and all these graphic editors that are claiming to be able to integrate remote file
editing what they're doing is under the hood they're copying down
file copy allowing you to edit it and then they're synchronizing up that copy
to the server there's so many things that can go wrong
with that I just can't even begin to
comprehend all the possible things that could go wrong with that and if you are
in charge of editing files on a remote system first of all why are you doing
that right you should be staging it if you are
somehow doing that one of the legitimate reasons to be doing that would be responding to an emergency
as I did many times you know working as a system administrator
and when you have to remotely connect to a system and edit files there the last
thing you want in the way is a visual editor that's run
by Microsoft I mean that I can't even begin to imagine the
terror of trying to be a system administrator and do that so
you know just if that's where you're headed in cybersecurity
and system engineering and even you know full stack
development as opposed to just running engineering then I would eventually
move off of vi code you can still use it you know if you want to do
big web projects it's really good for that but if you're going to start
getting serious about development see development is pretty much all on the command
line that's kind of the culture you can do it in vi code but you know you're using make files
and all this stuff you're going to need to learn the terminal so I would say
70-80% of all the careers in technology
involve the terminal and of those careers
probably 50% of those careers involve using
terminal on multiple computers without having an editor installed on them that you would
install and therefore my justification is learn vi and then
learn vim and if you want to do that I will do
videos on how to do that how to learn vi a little bit of a spoiler here though
if you want to just jump right in with vi you can actually go read the little guide I made
called vi survive so you can go
rwx.gg slash vi survive and this is
just the minimum you need to know to get around to vi and this does
make use of the arrow keys because if you're using nano and you want to
get started with vi and not start with nano this is the way to do it
this is the way to do it rwx.gg slash vi survive
and that I'll talk you through how to just
use vi as if it were nano and then you can slowly add on
more skills that's how vi learning works I'll do different videos on vi
specifically as part of the terminal mastery series
but I just wanted to do this one on editing alright so that concludes this video
I'm going to turn and take some comments I'm sure the forums
are full of people raging about different things that I've said here
and as I've said all along be your own person
be a critical thinker do your own analysis for your own needs
and make your own decision don't take my word for it don't take their word for it
don't let any pedantic argumentative
jerk decide for you what's best for you and that includes me
because I can be that guy so you make your own decision but taking a bunch of information
make an informed dependence and be ready to change your opinion when you have new
opinions when you have new information but don't let anyone shame you
because you're using the wrong editor and by the way if I ever do that I'm always
joking right I do I have fun we all have fun but
and that's that's fine that's the part of natural healthy debate
but you know just take that with a grain of salt when we do that
I'm going to turn to the chat now at potentially what will be my
peril so I'm going to put that on here
so here we go Pico came with pine
oh yeah Pico was a pine pine was a male editor no nano yeah I made a
thing about nano
emacs always makes me picture emac
the problem with emacs is the same as eclipse people are already making emacs based
applications are they really didn't know that
when I browse the website I'm using one hand
yeah I know that sounds pretty funny doesn't
I walk into those things all the time obviously I didn't mean it
I'm browsing a text based website so
yeah text
oh you're vimium you're thinking you're talking about vimium okay
why not neovim neovim is a disaster that never needed to be
made and has been completely superseded by
all of the additions that have been made and I'm going to
just if you want to get my full story on them
let me just on neovim I can give that to
you here so if you go to no pet or
noob gvim I'm not a fan of
graphics vim somebody informed me the other day that you can
interact with the shell using graphics gvim
but to me that defeats the whole entire purpose of using vim at all
if you're using vim you want to integrate the shell and
if you're using vim on windows with no bash shell I think
it's a waste so I don't that's not the way God intended it to be used
many have keyboard shortcuts yes
have vim shortcuts yes I like using a terminal but
never really use terminal editors for anything other than reading manual pages
well that's not an editor in the first place you're not using
an editor to read a man page you're using a pager like less or more
I think remote editing is sometimes used for working on a machine that is much more powerful
for huge code spaces with specialized hardware I can see that right
that might be that may be fine that might be a use case for that otherwise
not a fan of that pretty calm here
are there good resources for learning vim but the sounds of it you can't just dive in
there are many and if you I've listed them on
rwx I haven't been able to do a whole thing on that
rwx slash I want to say tools editor vim
I don't remember let me go check here
boop boop boop boop boop
let me see here can't find vim
there we go editors vim go vimisms so there's your
link
well I'll just do this
rwx dot gg tools editors
I have a number of things you can use there
the vim tutor is probably the best even though it's out of date
I would never use anything but the vim that
is managed by the original creator of vim one of the complaints against vim the reason
the vim was created is the two biggest complaints against it were
it was not conducive to community development
which I believe is BS and number two that
didn't have concurrency and that was immediately fixed
so if anything good came out of neo vim it was the pressure for
brahm to add that and he did and I believe something as important as
vim needs to be managed by one person or two and that's it
I've seen committees destroy applications
and I've actually put my advice about not using neo vim out there
in fact I can probably find that for you right now
the biggest one is all the things they just ripped out without even asking anybody
there's like a ton of changes that they made they didn't even ask anybody
but they made it so you can use plugins with node
all of the technical and architectural decisions behind neo vim are almost one after the other
a testament to horrible technical design and architecture
and I cannot overstate that I hate it
I really hate it it's just really bad
I can't I'm in the middle of an actual
educational video but I'll be right there
okay so
that's my complaint against neo vim
if you want to know
alright what else we got here
a new follower here hey how's it going
it's up on a remote computer like a linux cloud machine
I just made a case for that use v i or vim that's why you should learn it
and the way to learn that is use vim tutor
eventually you can use vim genius online
I think it's open vim
which is another one that'll kind of get you started on it
there are all listed on the vim editor's url that I posted
it comes to graphical editors I always have no pad plus plus besides the other more powerful ones
it's just the fastest graphical one yeah I agree I mean no pad plus plus is really great
it I still think no pad no pad plus plus
I didn't mention it all no pad plus plus fits between
no pad and sublime I believe it
is really fast but it you know and it is graphical
it's very intuitive because you're just using your mouse and it's got a little bit
more umph in it besides just a plain old no pad particularly it understands
utf-8 you know that that's a thing um so so that's
you know you might want to might want to give that one a try too I know people that still love
no pad plus plus and and I use it for a while a long time ago but I'm
I'm pretty much a if I have to use a windows machine
that would be the thing but these days linux is so prevalent on
on windows that I've got you know a linux terminal
I don't I don't need to use any any you know windows only kind of editor for any reason
um did I miss the 2020 dumpster
uh yeah it's gone we'll do that again
uh I'm glad it was a hit which one yeah
and so yeah thanks for the the
2020 dumpster we'll come and do that again uh I am going to wrap up the stream for right now
thanks for participating in our little dialogue about this um if you have any
specific questions that uh you know
you you want to go into ask them in the discord uh you can ask me
directly if I'm available but but you know we have a whole discord
just for this kind of thing asking questions getting getting in there but I really
really felt like I needed to go break this
down because uh for the rest of
um or vim neo vim and vim plugin will be
a support I felt like how you do when you and vim came out but I'm seeing more
and more and then plugins these days yeah no they they stink if you're first
of all okay I'm glad you brought that up um if you are
searching to use a vim that allows
a lot of plugins if you're picking a vim editor
because if it uses more plugins or because it's prettier you're picking it
for the wrong reason uh you might as well just use vscode or a graphic editor at that point
and I I strongly believe in that if if you're
seeking to use to do plugins instead of integrating shell scripts
you're not doing it right in my opinion you're doing it wrong
look if you're going to reach for a plugin at least before you reach a plugin learn how to use
vi properly if you don't know how to if you don't know how to use
exclamation point and vi and if you don't know what I'm talking about it's just making my point
you don't know how to use vi on vim you're not in a position to make
a decision about stop using it because it doesn't have plugins and
and you need to practice doing the standard way
of using vim integration into the shell before you start punting
and looking for every plugin under the sun and for and picking
a tool that will allow you to plug in to make a plugin in 50 different languages
sometimes specificity is the thing sometimes you don't want 50 options
sometimes you don't want to have a configuration file in 20 different formats
sometimes you want limitations on your types sometimes you want strict typing
so all of those architectural principles apply to vim
you don't want too much choice you want the right choice and that's why python 1 over
pearl because it was one best way right so my biggest
complaint against neo vim is this idea that we should expand the crap
out of it and put whatever we want in and and rip out rip out stuff
that's been there for years and it's not just because I'm an old guy it's because the entire
search is broken the entire architectural mindset of the neo vim
team is just totally bored and that's
my opinion on that if you disagree that's fine go use it and have fun
there's lots of really respectable awesome people who disagree with me very strongly
primegian comes to mind big and bot comes to mind
these are great people great human beings I love them I'm really glad that I
get to be count myself among the streamers with them but there's no way
I'll ever be okay with neo vim unless I'm presented with new information
that contradicts what I've just told you what I see them doing
is bloating the crap out of them in ways that are unnecessary
and defeat the purpose for vim in the first place the reason that you're
picking vim in the first place above all is ubiquity
you want to use vi everywhere you might be able to go here and use it in fact
I feel guilty using some of my vimisms but I'm okay with it and
that argument you can almost say well fine I'm going to use all the plugins I can and I'm going to let myself
go crazy as long as I remember the fundamental navigation elements
of vi and stuff so that I'm effective on an AIX machine or a Solaris
machine or anything else that I had to administer while I was being paid to
administer machines and those jobs still exist so my point is
that if you know before you give in to the to the tendency
to expand and bloat your stuff out for
questionable reasons at least consider using what's already there
and that includes learning shell integration when you learn shell
integration with the exclamation point I call it vi magic here go read this
rwxigg
vi magic will teach you what I'm talking about the specific thing
when you understand how to use true vi magic then
you're in a position to say well this plugin covers something I don't have
I want the groove box thing I want whatever you know I do
have plugins I do I use plugins but but I'm very
picky about the plugins because they have to be downloaded on every system I'm going to use them on
you need to make really sure that you're using a plugin manager that can be
turned off or disabled if there's if the if the plugin manager is not on the system
and all of those are things that that are not an option for new of him
if you use a new of him specific configuration you've just blown away your
ability to use that configuration on any remote system by default
you better have a damn good reason to do that if you
picked Vim because you want to be able to use it on multiple systems
and I don't think there's ever a decent enough reason for that Vim however
is everywhere so you can actually port your you can scp in one
command your vmrc over to any other system use that edit your
files over there without a problem if you've used neo vmisms in your
ability and haven't done it properly you've just blown away your ability to customize any remote
system on the fly because you cannot install neo vm on that
cloud machine without approval from your higher ups that for another change ticket
just say no to neo vm I'm telling you say no
them is the is the standard editor for this kind of thing
and if you do go with neo vm be damn sure you know what you're doing
make sure you know how you use the shell make sure you know that those plugins
need to be encapsulated in some vmrc code that keeps
them from being unusable on a remote system and if you
don't know how if you know anything about what I just said you have no business using neo vm
but the reason I get so spun up about this is because they hear from somebody on some
switch stream or somewhere that they should just go through that on they end up throwing it on and they destroy
their ability to be to be a performant you know administrator and developer
on a remote system because they somebody told them neo vm was the thing that they should use
I spoke in my piece I think it's probably enough for me
I think the plugins are an interesting aspect of how
members grow over the years I agree I agree and I'm not and plug is amazing
right plug is I mean plug the plug
is the plug I I wish that the native plugins within
vm were good enough but they're not and the plug plug in manager
is amazing it keeps all your plugins in a separate directory
if you look at my vmrc by the way I'll send that to you guys if you want to see it
it's in artivx.gg I'm sorry it's
it's in my gitlab so just go to artivx live
artivxrob.live and click on github or gitlab you can go to my dot files and you can go
find my vmrc if you want to spulunk it and by the way
it is very common it's a common right of passage to steal somebody else's
vmrc and to just use it and understand it but make sure you
go through the lines and get a sense of what it's doing because everybody's is highly customized
and it's actually it's kind of a right of passage to be a terminal user to do that
along with you know understanding your own bash rc not to mention
a full-time hobby just playing with your configuration I I cannot get
enough of of of that I constantly love tweaking my terminal
config it's it's really fun I enjoy that more than messing with my operating
system people ask me all the time well what manager you're using a window manager
whatever one is going to get me Tmux because I don't care about the window manager
I have a pain so there'll be other videos on that I have already done some videos
about it I'll be redoing them these videos are all going to be edited polished
and you know scrubbed and put up on Vimeo for subscription if you'd like but the raw
YouTube video that I just made here will will remain standing for as long as
YouTube allows it to stay here and I really appreciate you guys coming by
and spending some time here and I'm going to go ahead and
I think we made that through that pretty well didn't we guys we didn't argue too
much
by I'm going to come back in 10 20 minutes and we're going to
do some more web development
music
music
music
music
music
music
music
music
music
music
music
music
music
