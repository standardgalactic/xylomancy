Welcome to the Internet of Bugs.
Today, we're going to be talking about an exciting new
announcement from Cognition Labs about their new AI offering
called Devin.
I'm going to see if I can separate the value from the hype
and in the process talk about the question,
what is the job of a software engineer exactly?
My name is Carl.
I've been a software professional for 35 years,
and I'm the father of a college freshman and Peter Science
major.
And on this channel, I've been answering questions
from college CS majors about programming as a profession.
I've been doing a series on programmer jobs in AI lately.
And I got a text this morning asking
what I thought about this announcement.
Short answer is, I think it's great.
I'm fascinated by it, and I look forward to using it
and more tools like it.
But as with all things AI these days,
it's got a lot of hype around it.
To start with, they're calling this the first AI software
engineer, which I think is way overblown.
But hey, it got a lot of attention,
so I see why they did it.
In this climate, when everyone is exaggerating,
if you try to be modest, you'll never get noticed.
That said, it is really, really cool.
I'll put a link to their channel with their demos
in their description, although let's be realistic.
If you're watching this video,
you already know what it is and how to find it.
This offering is different in specific ways
than any I've seen before, and it's really cool.
For one thing, Devin has its own command line window
in which you can download and run code.
It's got an editor window where it can edit code.
It has a browser window where it can interact
with websites like GitHub, and it can read
and make use of some documentation it finds,
and it can interact with the APIs of some websites.
But the main thing that I've seen
is it has a dedicated planning window,
and it breaks down tasks and then executes them in order.
It's also got the ability to do some amount
of debugging by print statement, which is cool.
Most of this, as individual skills, aren't new.
For quite a while, ChatGPT has been able
to give you a step-by-step list of things to do.
It can summarize documentation and APIs.
It can tell you what Linux commands to run
for certain tasks.
It can suggest code and find some bugs in code.
The cool thing is someone finally put this all together.
It was inevitable it would happen at some point,
but I'll admit it happened more quickly
than I thought it would.
There's some legitimate question
about just how cherry-picked these examples are,
but there isn't anything about what it does
that seems infeasible, and it seems to have
the ability to accept new instructions when it gets stuck.
So I have no doubt a software engineer
or even an amateur programmer could get it
to do all the things they've shown it doing,
but I don't think it really is an AI software engineer
because that isn't the job of a software engineer.
It's just a tiny part of the job.
This is a tool for software engineers,
and it's a cool one, but it's just a tool.
The job of a software engineer keeps changing,
which is one of the things I love about it.
So there aren't a lot of hard and fast and breakable rules,
but these days, the primary thing a software engineer does
is to take tasks from some kind of ticketing system
like Jira or Trello or GitHub issues,
accomplishes whatever that task needs them to accomplish,
and then checks that off the list to go to the next one.
Often, those tasks require a bunch of steps,
and those steps can often be represented
by other items in the ticketing system,
sometimes created by the engineers themselves.
That admittedly is a very vague description
because it's a very vague job.
But here's the fundamental thing.
Those tasks, at least the top level of tasks,
are generally created and defined by non-programmers,
maybe former programmers,
but not programmers on the current system,
and often people that aren't technical at all.
This is because for most environment,
employing software engineer,
the goal is to create business value,
by which I mean money,
and the job of figuring out what products, offerings,
and features will make money,
and how they should be defined as the job of someone else.
By contrast, the job of the software engineering team
is generally to take those high-level business requirements
from the non-programming business folks,
turn those things into a product or service
that can then be used by customers,
either internal or external,
to provide value in exchange for money
in the form of either revenue or cost savings.
That money, in turn, is used to recoup the cost
of paying for the software engineers,
hopefully with some leftover.
Devon doesn't do that.
Devon can't take vaguely and squishily defined requirements
for new products and services,
from people who believe they know it will make money,
and turn those requirements into working offerings.
Devon isn't a software engineer,
and it isn't intended to work with non-programmers
to create value for customers.
It's a tool for software engineers to use,
and that's great,
doing more with less is good for us,
at least in the long run.
In the short run,
the hype cycle is making things a little bumpy.
I already made a video about what I think AI means
for the next couple of years of programming job,
and you can find that here.
And if you want to see more videos about AI in programming,
or programming in general,
please hit the subscribe button,
and I hope to see you again soon.
Thanks for watching.
