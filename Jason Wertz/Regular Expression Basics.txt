In this video lecture we're going to talk about regular expressions.
We'll also take a look at the command line utilities grep and sed.
So what are regular expressions?
Well regular expressions are patterns that we can build to match against specific series
of characters, you know, words, in a programming sense we can say strings.
We can use these patterns to pull out specific pieces of information from a larger set of
information that we're interested in.
So if we're looking at something like a very large log file, we can use a regular expression
to just isolate those aspects of the log file that we're interested in.
This is really great when you've got a lot of data to pick through on the command line.
We can also use regular expressions for finding data and then acting upon it and we'll take
a brief look at sed which is the stream editor later on in this video lecture.
So for now we're going to look at mostly a tool called grep which allows us to show
or not show specific aspects of a file that conform to one of our regular expression patterns.
So the command line grep utility is used to apply patterns to either a standard input
or to a specific file and so we might have a very large file and what we're interested
in doing is just taking a look at certain aspects of it.
There's actually two forms of grep and grep stands for get regular expression and there's
also grep and egrep and what you're going to find is that because Unix is so old it's
had a lot of time to evolve and sometimes people have gone on and extended aspects of
Unix and in their sense of making it better.
So the idea of grep and egrep is that grep is the original grep and egrep is extended
grep and extended grep actually supports extended regular expressions.
So anytime a language has been around for a long time people try to start to add to
it when they start to notice failings in that language and what I'll mention is that we'll
look at both extended and regular regular expressions.
There's also pearl regular expressions which I'm most familiar with so I also throw that
out there when I'm talking about regular expressions anytime I make an error I will probably be
thinking in terms of pearl regular expressions.
So enough about what regular expressions are, what utilities we're going to use, what
does a regular expression do and look like.
Let's think about a typical pattern that we might want to apply in this case.
Let's say that I have asked someone to look through the phone book or a directory of
employees and show me everybody whose last name starts with the letter S. So I've given
you a pattern, I've given you a few bits of information, I've said okay I want you to
look at last name and I want that last name to start with the letter S. So if I have somebody
whose name is right like John Smith this would match my pattern because I look at the last
name and the first letter of that last name is an S. If their name was Steve, John I guess
we'll stick with people with two first names, well the first name starts with the letter
S but the last name doesn't so it doesn't match my pattern.
So we define patterns and we do so programmatically and we use those patterns to filter or match
against information that we're most interested in.
First of all let's look at some really basic ways that we can apply patterns on the command
line.
I'm currently in my home directory and there's a number of folders and at least two files
in my home directory.
So there's actually some basic pattern matching capabilities built into the Bash shell.
So for example if I want to see all of the folders that start with the capital letter
D, notice that if I just put the letter D I get an error because I can't find a folder
or file named D but if I add a star after the word D I get a lot of information.
In fact I wanted to look just for folders I would do dash D which would give me information
about the directories as opposed to items inside the directories.
This star character on the shell is called the file glob operator and basically you can
think of it like a wild card match.
The pattern that I've essentially given the LS command here is that the LS command should
display all folders that start with the capital D and then folders that have any number of
characters following it.
So when I mean wild card I mean any number from zero to an infinite amount and I mean
any type of character.
So basically this would match any folder that starts with D and goes ahead and has a bunch
of stuff in front of it.
You can also use a wild card at the front of a string so I'm going to see any folder
that starts with the letter S and notice it shows me documents, downloads, pictures, templates
and videos because all of those end with a lower case S and remember that the command
line is case sensitive so if I do capital S I get nothing.
You can also do something along the lines of putting two stars on the command line so
I could say something like show me all directories that have any number of characters, the letter
L in them and then any number of characters on the other side and in this case it shows
me downloads, examples.desktop, public and templates because all of these have a letter
L in the middle that we can see in each one of these and on either side there is any given
number of characters that match this wild card pattern.
So this is built into the shell and this can be really useful if you wanted to show say
all files in a directory and so if we look back up into the shell it will notice that
in my desktop directory I have a couple .txt files.
Let's clear this and let's say I wanted to do ls-l desktop star .txt and what this would
do is say okay go into my desktop directory show me files that have any name and then
have a .txt extension and if I hit enter I see those two files sitting in my home directory.
So pretty cool that those exist and that this capability exists.
But what we want to do is we want to actually look at how we can utilize grep to get more
detail information about things like file directory listings and actual files themselves.
So ls is great when you're looking for just information about some listings and the wild
card is helpful for getting some basic pattern matching going.
But to learn regular expressions what we're going to do is we're going to look at a very
specific file on the Unix system and that file is the American English dictionary used
for spell checking and other things by the system.
So I'm going to pass the American English dictionary file which is found in slash user
slash share slash dict slash American English into the less command so we can see what's
in there and what you'll notice is this is a very large file that goes on and on and
on and on and keeps going and there's lots of words in it.
So this is really useful for our pattern matching exercises.
So I'm going to hit Q and we're going to start to talk about some really basic regular expressions.
And the way we're going to do this is we're going to actually use the command grep.
Remember that I had mentioned there are actually grep and egrep.
So what we'll do is we'll use grep until it breaks.
In other words we'll use grep until we run into a feature that is an extended regular
expression and then we will jump over to using the egrep command.
It's a better habit to just get into using egrep all the time and that way you don't
have to worry about what is an extended and what isn't an extended regular expression.
But I kind of want to mention, show you that at some point some of these features will
not work.
So I am going to actually set this up so that we can grep this file.
The way greps work is that we give the grep command what we'll do is right in here we'll
put a pattern and then we will actually go ahead and match it against a file.
And so the easiest pattern that I can put in here is I want to look for say words that
have cat in it.
So let's use cat and see what we get.
What you'll notice is a lot of words scroll by.
I gave the pattern cat and maybe we're thinking well I'll only see the word cat but notice
that it shows me every word in the file that has the letters cat somewhere in the word.
What's really nice with the color coded command line is we can actually see the matches.
So that's kind of a nice feature for learning how to use regular expressions.
And you'll also notice that this is a really big file.
So at some point we'll look at, we're always going to see letters at the end of the alphabet
just because of the way we're doing this.
So let's clear this and take a look at that pattern again.
My pattern is called cat and for the rest of the exercise is the other things or is cat.
I'm going to put these in double quotes because it'll make it a little bit easier to see where
our pattern is within these lectures and it'll also help us deal with any non-standard characters.
In other words, any characters that we want to match in our pattern but have special meaning
to the shell.
We want to make sure that those are not processed by the shell in a way that the shell wants
to process them.
Putting them in double quotes kind of fixes that.
So what does this pattern say?
It says well look for a C followed by an A followed by a T.
And what you found out again is when I run that command, it doesn't really care if there's
any characters before the cat or after the word cat.
It just looks for those three characters in order.
So that's pretty interesting.
What if we wanted to look for not just cat but you were wondering like well I wonder
if there's a word that looks like cat that has another word in the middle.
And maybe you were thinking of like cut or cot and you wanted to find all of these.
Well regular expressions come with a special character which is the dot character and the
dot character will match one of any character.
So if there's actually a word called C2T then putting a dot there would match it.
So what this will match is a C followed by any one character followed by the letter T.
So you can just see in this little bit of information that we got, I didn't even think
about words like yachts which have Cht or watchtower.
So we matched Cht, Cat, Cut, Cot and that's pretty cool.
Why?
Because the pattern used a dot.
So let's talk about why this is and let's look at some other patterns that we might have
available to us.
So what we just looked at was this idea of basic elements.
You can literally type a string and that will match the string with a series of characters
and in this case we can also then use dots in our series of characters to represent any
given one instance of any given character.
So notice my first example matches bat, cat, mat.
Finally, if I just give the letters DOG it would match the literal string dog but found
anywhere in a word.
What's cool with regular expressions is we can start to get tricky.
And so in our previous example we used the dot to find any character but let's say we
only wanted to limit ourselves to finding a subset of any character and we can actually
create what are called classes of characters.
So we can have classes of characters by putting them into hard brackets and A-C will search
for an A or a B or a C followed by an A and a T and this would match bat and cat but not
rat.
And let's take a look at this in the command line in a second.
You can also use character classes to find uppercase, lowercase as well as numbers within
your strings.
Now again this is not looking for the number nine, this is looking for the character nine,
the symbol that represents the value nine.
So this is really just looking for a character zero through nine followed by another character
zero through nine and this would match forty two, thirty seven, ninety nine, zero one.
So basically match any two characters next to each other anywhere in a word.
So let's take a look at that.
So previously when we used the C dot T we matched cut, cat, cut.
So the O, the A and the U.
So let's say I don't want these watchtowers, CHT, I just want like C followed by a vowel
followed by a T.
So we can do that instead of using the dot I can create a character class.
And if I want I can try to match any vowel, I don't know what we'll get but we'll see.
And so what this says is look for the letter C followed by A, E, I, O, or U, just one of
those but it can choose amongst all of the values in that set followed by the letter
T.
And now if I look at my output I get veracity, I get wainscot, I get vocatives, I get wildcat
so I'm matching all the vowels between the letters C and T. All because of this character
set that I've made.
If you want to try and find any words in the dictionary, so that's character sets.
And by the way you can use these and we'll see these in a second, if you want to match
all lowercase characters you would do A through Z.
You can also say find all lowercase and all uppercase characters which maybe you're looking
for usernames or something along those lines.
And then if you wanted to you could also add 0 through 9 and say like the underbar.
And what that would do is match for all of those characters so you can have these sets
of characters be as small or as large as you want them to be.
I'm going to do is changes, let's see if there's any words that have 0 through 9, I doubt it.
And nothing matches that pattern.
That's what happens when you put in a pattern that doesn't match.
Let's see if there's anything in the dictionary that matches against a number.
Nope.
So there are no numbers in the American English dictionary on the Unix system.
So it's kind of helpful.
There's a couple other things that we could actually use if we wanted to grep numbers.
What I'll do right now is just to look at what we could possibly grep for a number would
be the Etsy password file.
And if I grep that I know there's a lot of numbers in there so I'm going to get a lot
of matches and you'll notice that it matched all of these lines because all of the lines
have a number in them.
Again, the Etsy password files just shows you all the user accounts on the system and
these numbers represent their user and group IDs.
So I know that there were a lot of numeric matches in this file.
So just to kind of demonstrate that you can match against numbers as well as words.
So kind of helpful.
Let's go back to an example where we can start to look at the English dictionary.
So let's look at some other options for this feature, this ability to use character classes.
Built into Unix is this idea of these real what I think are pretty ugly character classes.
You'll see these sometimes built into the system.
So bracket, bracket, colon, alpha, colon, bracket, bracket is the same as building your own character
class that uses bracket A through Z, capital A through Z.
And basically what these things on the left are are just ways of writing these out using
words as opposed to using the categories A through Z.
Pretty much if you haven't figured this out at this point in Unix, there's 50 ways to
do everything.
So these character class abbreviations can be helpful.
They make things a little more readable in scripts.
But the other thing if you haven't noticed is that regular expressions can get pretty
big and pretty scary pretty fast.
I would say the most useful character class that we're looking at right here is the one
called space because that will match any white space characters.
That includes tabs and spaces.
That can be really helpful when trying to match words or sentences that have spaces.
Or in my first example we talked about last names and that would really be helpful for
processing finding somebody's last name.
Because I don't like these, I'm mostly familiar with these character class abbreviations.
So notice there's two character class abbreviations.
The previous ones with the words like alpha, upper, and lower.
But then there's also these character class abbreviations, slash D, slash W, slash S,
slash S that make things a little bit more readable when we start to use these in larger
regular expressions.
I'll also mention that there are actually ways to negate character classes.
If you notice the carrot inside of the bracket-based classes at the bottom here, you'll notice
that that means does not match this character.
If you do slash capital D, slash capital W, slash capital S, that means that you do not
want to match that character in that given position.
I don't usually teach those when I introduce regular expressions because it's hard enough
getting your head around regular expressions, let alone getting your head around negative
logic at the same time.
So we'll just kind of mention that they're there and just ignore that.
So let's look at these two character class sets in operation.
So let's say I want to find a word that has any letter in it.
Well notice I just did that and I said that I wanted to find a slash D, but notice that
it actually went ahead and found all of these words with the character D.
Well that's a problem.
You're thinking, well Jason, wait, you just showed us that slash D is a character class.
But here's the thing.
Remember earlier on I said there's grep and there's extended grep?
Well these slash D character sets are actually part of extended grep.
So if I switch to eGrep, it still doesn't work, which is a problem because I'm trying
to explain this.
Once you'll notice is that the slash D doesn't work, it actually goes ahead and finds the
letter D within here.
Slash D is actually a part of Perl regular expression.
So if I actually add dash P, you'll note that it returns nothing.
So that actually says u slash D, like it's a Perl regular expression and that'll pass
numbers.
So that doesn't actually work in grep or eGrep.
But if I get rid of the dash P and just go with regular extended grep, what you'll find
is I can actually utilize slash w.
And that matches any character in any word that we might be looking at.
So that one does work.
And if we go ahead and we look at slash s, what you'll notice is that that also returns
nothing.
So it looks like slash D is one of those cases where that's more of a Perl thing than it
is an extended grep thing.
So I'll apologize for that and keep going.
So slash D is the same as typing 0 through 9.
So you don't need to worry about the fact that slash D is not supported in eGrep.
Let's take a look at some other ways that we can build patterns.
We'll start out by taking a look at what are called anchors or positional anchors.
In other words, we can say that a certain character has to match at a certain point on
a line, either at the beginning of the line or at the end of the line.
You'll see that the characters that we're going to use for these beginning and end of
line matches are a carrot and a dollar sign.
And you'll notice that in the example in front of you, putting a carrot means to match only
the word car, where car is the first line character on the line.
So it would match car, cattle, and canine, where those are the first words on a line.
And the second example, floating and sailing would match because the G is at the end of
the line if those were the only words on the line.
And if you'd like to match situations where a word is the only word on a given line, such
as cat, you would want a line that starts with the letter C, a line that ends with the
letter T. We'll take a look at these in one second.
Let's look at another possible anchor that we can use, which is a word boundary.
So remember, the carrot character and the dollar sign character have to do with the beginning
and the end of line.
But word boundaries give us the ability to match on spaces, tabs, and basically these
positions where there might be breaks between words.
So in the example that I've got at the bottom, if I wanted to match Jason the prof, S-O-N
is anchored on a word boundary.
So there's a space between my name and the word the.
So S-O-N slash B would match that line.
Actually, there's no other instance of S-O-N on that line, but let's say I was in a file
that had a lot of people named Jason, but I was the only one with the surname the prof.
It would match.
So let's take a look at how word boundaries and anchors work in real life.
So to match items in word boundaries, we really need a file to do this.
So what I'm going to do is take another look at the Etsy password file.
I've also bumped up the font, so hopefully things are a little bit easier to see.
So what you'll notice is in the Etsy password file, there's a number of lines here.
So I've got root, demon, bin, sys.
So let's say I only want to see lines that start with the letter S. There's a couple
of them.
So I'm going to use eGREP, and I'm going to say that I want to look at lines that start
with the letter S, and I want to look at the Etsy password file.
And what you'll notice is that shows me lines that just start with the letter S. Notice
that the letter S might be in other parts of the line.
If I take out that position qualifier, what you'll notice is that the letter S appears
on many more lines, but I only want to be interested in those lines where the letter
S is at the beginning.
If I want to see which lines have at the end, the letter N, I can put a dollar sign, and
it'll show me only the lines that end in the letter N. Let's try H. I was thinking bin,
but I think I meant bash.
And so what it'll show you is that many of these user accounts use the bash shell.
And let's say, notice in this case I'm seeing bash and SH.
Let's say I'm only concerned about those users in this file that have the login shell
bash.
So let's see how we can fix that.
Instead of just saying H, I could say bash, and what this will say is the last letter
on the line must be an H, but before it must come a B, A, and an S. And now I get exactly
the information I want, lines that end with bash.
So that's the concept behind positional values within regular expressions.
What I have here is a file called demo that contains two lines.
One is JSON space, the space prof, and the other line is JSONium.
So maybe I have my own element.
And if I grab this file for my name, what you're going to notice is that it shows me
both lines, but maybe I only want to show those lines where it's actually my name and
not my name embedded in another word.
And the way I can do this is to add a word boundary to my regular expression.
And remember slash B means word boundary.
And so now it will only show me the JSON that is up against a word boundary.
So it's pretty helpful when you know you have spaces in a file and you want to find words
that you know are on a space.
The last thing for us to review is the concept of quantifiers in a regular expression.
Sometimes you want to look for zero or one or two or three of a certain character to
appear in a certain spot.
Other times you want to know exactly a specific number of items that you want to appear in
a given spot in your regular expression.
And so regular expressions come with the plus question mark and star operator.
And while the star operator seems to work like it does on the shell, it's important
to note that there is a slight difference between the file glob operator on the bash
command line as opposed to the star operator within a regular expression.
So how would we actually utilize these within some regular expressions?
Well let's take a look at some sample regular expressions and then we'll go to the command
line.
So here's a sample regular expression that matches a phone number in the order of 555-555-5555.
So typical US phone number, three digits dash, three digits dash, four digits.
And you'll notice that I've got some positional notations here.
So the line starts with a carrot and ends with a dollar sign.
And notice that I've got a character class zero through nine.
And since I know I want to match three characters, I could actually type bracket zero dash nine
bracket, bracket zero dash nine bracket, bracket zero dash nine bracket dash.
Or notice in this case I can use curly bracket three curly bracket, which says match exactly
three of whatever you find before you.
So we can actually use these curly bracket number, curly bracket notations to kind of
make our regular expressions a little more condensed.
So we'll look at this on the command line in a second and discuss.
Also talked a little bit about the slash w slash b kind of type word boundary commands
and the slash w character class commands.
And you'll notice that I've written a really poor regular expression here that matches
an email address.
Regular expression email address matching can be helpful, but it's not something I would
rely on because there's a number of email address formats and it's too complicated to
really catch all of them.
If you do a Google search for email address regular expression, take a look at some of
the answers that you get.
They're pretty long and detailed.
But what you'll notice is this email address says it's also positionally situated.
So it's got a carat and a dollar sign.
So the only thing on this line should be an email address.
It says find any number of word characters.
So you'll notice that the star in this case says, and you'll notice the same thing with
the number, the curly bracket three notation is it affects whatever is to the left of it.
So this is look for any letter or number or valid email address character and then star
after it means any number of valid email address characters, followed by an at, followed any
number of valid characters, letters or numbers, followed by a dot, followed by any other number
of valid letters or characters.
Notice also that because I actually wanted a dot here, I didn't want to look for, remember
that a dot has a special meaning with regular expressions.
Anytime you want to tell a regular expression to use the actual character and not interpret
it as a special regular expression character, you just put a slash in front of it.
So let's take a look at how some of these components can work on the command line.
I have a file that might be the file you're using for your lab.
And if we look at the file lab three test dot txt, what you're going to notice is it's
a file full of names and phone numbers.
So we're just going to look at matching the phone numbers since I've already given you
a regular expression that does that.
Let's see how that works.
So I want to build a regular expression to match just valid phone numbers in this file.
So I'm going to use egrep and I'm going to put my pattern in here and I'm going to use
lab three test dot txt as my file.
So before I said if I really wanted to match a phone number, I could write a regular expression
that looks like this.
And if I just run that, I'm not going to type, notice it matches any line that has three
numbers in a row, or any instance of three numbers in a row.
But notice it also gets these kind of user IDs over here.
So then I could say as well, what if I match a dash, let me clear this, and then what if
I add a dash?
Well, now we're getting better, we're getting closer because it's matching, it's no longer
matching these IDs on the left, but it is matching these two multi-formatted phone numbers.
And by the way, if anybody's dealt with large amounts of data that was input by humans over
a period of time, you've probably run into situations like this where you have inconsistent
data entry.
So again, you say, well, I kind of just want these dash formats because these are the only
ones I really want to identify.
So let's clear this and go back and look at how to fix a regular expression.
So what I could do is just add one more number and I'm getting better, but still notice it's
still matching out on these other numbers.
So you notice that these are greedy matches, in other words, it keeps trying to match things.
So I can keep adding these until I get the total number of characters that I want, but
this is getting hard to read and getting long.
So we just talked about characters.
So I know my phone number is going to have three characters.
So what this says is, look for a value that could be any value between zero and nine,
look for three of them in a row.
And they don't need to be the same number, like 222, it could be 215 or whatever.
Then follow that with a dash.
Then look for another series of numbers, zero through nine, and look for three of those.
Let's run it.
And it's still being a little too greedy, so we're going to have to extend it out here
to get these four numbers.
Also notice this file is a broken phone number in it.
That's there on purpose, but we'll skip that for this exercise.
Now I'm going to put another dash in, zero through nine, and I'm going to put the number
four.
And so what this says is, find three numbers, followed by a dash, followed by three numbers,
followed by a dash, followed by four numbers.
By the way, notice I'm using eGrep for this, and notice that it gave me the valid answer.
If I use plain grep, I just want to point out that you'll get an error because in these
curly brackets, there is a way to make them work in grep, but it's just easier to use
eGrep because these curly brackets are part of the extended grep syntax.
So just be sure that when you utilize numeric quantifiers that you utilize eGrep to do that.
Now let's look at the plus question mark and star operators, and we'll go back to searching
through files in the dictionary file.
So let's say I wanted to find some words that have, start with a b, have an o, and then
have the letter t, like bot.
So I get a lot of things, saboteurs, robots, lobotomy, but what's interesting about that
is it's definitely more information than I want.
So let's say I'm curious about if there are words that have zero or one o's in them.
And if I put a question mark, a question mark will say, in this specific case, that the o,
there could be zero o's or there could be one o's.
What's it entered into if it can make changes?
And I do.
Notice that it matches subtropical and it matches turbot.
It says, well, match any characters where there is an o or not an o.
There could be zero o's or there could be one o.
The plus sign will match one or more of a character.
So in this case, it brings in toll booth as well as sabotage and robot.
So notice there's two o's there, one o there.
And then finally, we could use the star, which means zero to infinity.
And so notice that star actually gives us the two o's, zero o's, and one o.
Up to this point, we've been using grep to filter information so we can target stuff
that we want in more detail.
But we can also use regular expressions to find things and modify them.
The set command is the stream editor.
And while it can be a very powerful tool, what I want to do here is just kind of introduce
how it works very basically so we have an idea how we can use regular expressions in
a new and different way.
So what this allows us to do is we can basically use the set editor to take stream of data
and match against a pattern and then modify that information that matches that pattern
in some way.
One obvious way you could use this is to go through a bunch of files and find the old
boss's name and replace it with the new boss's name.
It's one way that I've actually used this.
And there's a couple other things that are useful, so it's a great way to find something
and replace it.
So you can use set to find and replace stuff.
It's a really powerful tool and we're going to only look at one aspect of it.
So we're going to look at a command very similar to this one that's in this example.
Let's jump over to the command line.
Let's take a look at how set works.
For this to work, we're going to actually need a file to edit.
And so we're not going to actually edit the file in place today.
We're just going to dump data out to standard output and what we're going to do is just
modify what's printed to standard output.
We could obviously redirect that back to another file.
We could actually edit the file in place, but these are all some more advanced things.
We just want to look at using regular expressions in a new way.
So I am going to actually utilize the Etsy password file for this.
And actually, if we just look at that file real quick, which you'll notice is that everything
in here is separated by colons.
So let's say I want to get rid of those colons.
So let's use set.
We'll get rid of this.
So set dash E and dash E means I'm going to give set an expression.
In this case, I'm going to use single quotes and a couple of things.
I'm going to set this up and talk a little bit about what it means.
Notice I've got single quote S slash slash slash G single quote.
So whatever I want to find goes between the first two slashes.
So in this case, I'm saying find the colon.
And now I'm going to say replace it with three dashes.
And what this will do is, said we'll go through the file, find every instance, and by the
way, G stands for global.
And that means it will find every instance of a colon in the file and replace it with
three dashes.
And if you look at my output, now instead of colons, you see a bunch of three dashes.
So this can be really helpful for a bunch of reasons.
One of the things that we can do too is we can use all of our new found regular expression
powers in this file.
So if we take another look at that password file, one of the things you'll notice at the
top is let's say there's a user called bin.
But then you'll also notice that the word bin shows up a lot of times in this file.
Let's say I just want to change that user bin, but I don't want to change any other
instance of bin.
So what I could do is go back up to my previous command, and what I'm going to do is instead
of just match bin, which would match everything, I'm going to actually go ahead and what am
I going to replace bin with?
I'm going to replace it with JSON, really big.
So if I just do that, notice it replaces every instance of bin in this file with the word
JSON.
It replaced the one I want, but then it replaced all these other instances.
So what I want to do is use an anchor.
So I'm going to say only match the bin that's at the start of the line.
And now you'll notice that all the other bins are left in place, but if I scroll back up
and look, it only replaced the one that was at the start of the line.
So it said it's a really powerful tool, and we'll take a look at it more as the semester
progresses.
But in this case, I just want to show you that you can use your new found regular expression
powers, not just a filter data for viewing, but filter data for editing.
