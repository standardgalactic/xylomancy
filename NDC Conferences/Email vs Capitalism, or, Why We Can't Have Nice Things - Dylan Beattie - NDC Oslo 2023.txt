Hello, NDC Oslo.
I'm done.
I'm going to talk to you about email.
Because email is kind of important, right?
You ever get the thing where you can't remember your password?
So you click forgotten password.
They send you an email.
You get locked out of your account.
You click the button.
They send you an email.
You want to go to sign into Microsoft Azure and they say,
Anna, hang on, we just need to check it's really you.
How do they check it's really you?
They send you an email.
You sign up on a new service.
They're like, we want to make sure that you're not a spam bot or some kind of,
you know, evil nefarious internet criminal overload.
We're going to send you an email and you can use the email to verify it.
So email is a really, really important component in the fact that any of the
stuff that we do online ever actually works at all.
So we're going to do a little experiment.
We're going to go here.
Now, what I'd like all of you to do, you're going to go to that web address
and you are going to follow the instructions.
Now, there is a button that's going to appear on your phone screen that says,
don't press this button yet.
Do you know what that means?
There is a saying that if they wrote on a button, do not press this button or it
will destroy the universe.
The paint would not be dry before a human being had slapped the button.
Do not press the button.
What I want you to do is to follow the instructions on the screen.
There we go.
Let's bring up our live update.
Someone has mashed the button.
That little yellow at sign there, that's somebody who can't read the documentation.
And it's written in large, friendly letters.
How evil can it be?
So we're going to just let that rack up a little bit.
Ah, look at that.
Look at that.
Someone has already caused an error message.
Well done.
Congratulations.
There we go.
Look at that.
Someone's already gone all the way through the process.
Most of you, it's good to see every little white dot on that.
That's someone who is following the instructions.
And now we have to press the button.
No.
Wait.
We have to stand up.
Wait, wait.
No, no, no, no, no.
Stand up.
The instructions say you stand up.
So you stand up.
Stand up, star.
Stand up, stand up, stand up, stand up, stand up.
Everyone standing up, standing up, standing up.
That looks like a statistically valid sample.
So what we're going to do, I'm going to count down from five.
And when you get to zero, you're allowed to press the button.
Five, four, three, two, one.
Press the button.
And we're going to send you an email.
And when we do, you are going to go and check your inbox.
And when you get the email, follow the instructions in the email.
All right.
I see a couple going green.
I see a couple going pink.
Some of the stuff's getting through.
Some of this stuff is a gun at junk mail.
Some of it is still cute.
Some of it's still sent.
The little black ones there are probably because I've pissed off every email provider on the
planet doing the research for this talk.
And some of them have decided that they are just not going to talk to me anymore.
So we're getting a fair few of those going through.
Now, it's around about now that you've been waiting long enough that if this email was
like your two-factor authentication to get into Azure to fix a problem in production
or the password reset so you can get into your Gmail to get your damn plane ticket
because you need to get to the airport, you'd be getting a little like,
why does an email work?
This should have arrived by now.
Well, friends, I have some very distressing news for you.
Everything is working absolutely fine.
Those of you who are still standing up, bear with me one more second.
This is the SMTP specification, the latest version, October 2008, about how we should
try to deliver email.
And what it says is if it doesn't work first time, you should wait at least 30 minutes.
And then you should keep trying for four or five days before you finally decide that
the email didn't work.
Now, anyone who didn't get the email, you are welcome to come down the front at the
end and you can get one of these, the sticker that should have been an email,
that I've got some of these printed out here, saying take all of those.
These are the special NDC Oslo editions of this, so they won't look like this ever again.
Now, I'm going to talk to you about email.
And I'm going to talk to you about why we have ended up with this weird situation where
the spec says that an email can take five days, but we built the internet on the fact
it takes about 15 seconds.
How did we get here?
Now, my kind of credibility, I guess, my expertise in the field of email, it's something
I've been working with for my entire career.
In 2002, when the internet had a connection wizard, one of my first big professional
projects I ever worked on was a project for this company.
Spotlight is a British directory of show business job opportunities for actors and
actresses, all those kinds of things.
And I built an email-based job information service.
So, if you were making a movie and you needed actors to be in your movie, you could go on
Spotlight and you could send out an email.
Now, this was built in classic ASP and I had a for loop and what it would do is it would
send an email and then it would response.write a dot, so you'd get a screen that went dot,
dot, dot, dot, dot, dot, dot, and then at the end we'd response.flash and we'd redirect.
It sent about 200 emails a day.
It was clunky as hell, but the system before that was built on fax machines.
So, this was a pretty neat idea.
It was also a spectacularly successful product.
It went from 200 emails a day to 500 to 1,000 to 2,000 to 5,000.
By the time I left Spotlight in 2018, this system was sending a quarter of a million
emails out every day.
And that's not a quarter of a million copies of the same newsletter.
It's a quarter of a million unique individual personalized emails.
Now, there was an interesting phenomenon that we noticed.
We catered mainly to the English-speaking show business market.
In London, about two o'clock every afternoon, show business would get back from its nice
boozy lunch in the pub, sit down and go, I should probably send out some emails.
What do you think, Brian?
And they'd go on Spotlight, they'd bang in a couple of things, they'd send us out.
This happened at the same time as New York and Broadway had just finished their latte
and were getting ready to get set into a solid day's work, which was the same time
that Hollywood and Los Angeles have finished their power breakfast and started yelling
at their assistants.
So, when I say a quarter of a million emails a day, most of them went out in a three-hour
window every afternoon.
That is a sustained rate of about 10 to 12 emails per second for three hours every weekday
for more than a decade.
Now, you probably have a picture in your head of what a professional actor looks like.
Most of them don't look like the ones you see on TV.
The ones you see on TV are the ones who have made it because they have a job right now.
The average professional actor looks like this because they're at home waiting for their
next audition and they are sitting there and they're refreshing their email.
Now, some of you might have had complaints like companies you worked at where you've
sent email and people have complained that you've sent them email.
Have you ever had someone to phone you to complain that you hadn't sent them email?
Because we used to get people ringing out going, I haven't had any emails for a couple
of hours, is everything all right?
And we'd be like, well, we think so.
Maybe there's just no work for you today.
But we had to answer those calls and we had to be able to explain what was going on.
So, my team and I got incredibly good at understanding everything there was to know
about email delivery.
How does it work?
Why does it work?
Why might it fail?
Now, the whole time this is going on, because I'm an idiot, I'm running an open source mail
server for me and all of my friends.
So, DylanBT.net, all the email ran on an old Hewlett Packard workstation that was locked
in a server cupboard somewhere for about 10 or 15 years.
Now, I eventually stopped doing that and you'll find out why in the course of the talk.
But then, at the start of this year, who was the NDC London?
I was, yeah.
Some people who very nearly weren't were people who work for a company I won't name,
whose corporate email provider switched to a new spam filtering service the week before
the conference.
And that spam filtering service, MimeCast, decided that SendGrid was sending junk.
And so, all of their NDC conference tickets went to junk and we had to kind of jump in
and figure out how did these people not get the tickets they'd paid money for that was
sent directly to them?
And I thought there might be an interesting talk in this, because lots of us build systems
that send email, and lots of us don't really understand all the weird quirks of how it works.
So, email is older than networks.
The first computer that really got any kind of traction was this thing, the compatible
time sharing systems, about 1961.
And you could send mail on this thing, but send is a misnomer, because when you sent mail,
the mail didn't go anywhere.
It was the equivalent of leaving post-it notes on a really expensive refrigerator, because
this computer was shared between 60 or 70 different researchers, so when your colleague
came to work the next morning and logged into their terminal, you'd left them a note.
That was the first use of electronic mail.
This kind of went on for a couple of years, and we're going to skip forward to 1969.
Now, if the United States of America was a Netflix show, 1969 would be a season finale,
big budget, they pulled out all the stops.
They did lots of really interesting stuff.
1969 was the year that people walked on the moon.
It was the year the Boeing 747 first flew.
It was the year the Lockheed SR-71 first flew.
It was the year of Woodstock and the summer of love, all that kind of stuff.
And it was the year that the ARPANET was invented.
Now, there were networks before the ARPANET.
The ARPANET was the Advanced Research Projects Agency Network, and it looked like this.
This is a hand-drawn sketch of the entire network.
Now, before this, there was a network, but it was a kind of ad hoc network of computers
that would dial each other up once or twice a day, and they'd swap messages and things.
But when the ARPANET came along, for the first time, there was an idea of being connected to the net.
This was the network, and if you were on it, other people could send messages to you.
Now, modern email is a combination of probably hundreds of people
working on solving smart problems over decades on all kinds of platforms.
But one person whose innovation is still a significant part of the way we work with it was this guy.
It's Ray Tomlinson, and he was working on an ARPANET mail system in 1971, and Ray invented AT.
Ray is the person who went, well, hang on, if we know the user's name
and we know the ARPANET host where they host their email, we could put an AT in the middle
because it's Alice at the machine.
Now, you'll notice that the host name there is just MIT-multix.
It's not a dot anything. It's not MIT-multix.com, it's just MIT-multix.
Because the network was so small that computers just had a name.
And if you bought a new computer, you wanted to get on the net, you'd give it a name,
and then you'd talk to Jake.
This is Elizabeth Feinler, everyone called Jake for some obscure reason.
She ran the network information center at Stanford from 1970 to 1988,
and she maintained the host's file, the definitive host's file of the entire internet,
and every year or two she and her team would print it, because you could buy a printout of the host's file.
And this listed all of the machines connected to the ARPANET,
along with the person responsible for maintaining them, telephone numbers, street addresses, and email addresses.
Now, there are two kinds of people in the world.
There are the people who see technology and go, hey, this is really useful.
And there are the people who go, hey, those people think this is useful.
Maybe I can use it to get rich.
Let's meet Gary Turk.
Now, Gary Turk, I punched his name in a Google to find a photo.
The guy's still alive. He's still working. This is his LinkedIn page.
Like, you could connect with him after this talk if you really wanted to.
But in 1978, Gary Turk was working for the Digital Equipment Corporation.
He was a sales rep, and his job was to sell these, the DEC System 20.
Now, this thing had built-in ARPANET protocol support.
It was like, you didn't have to do anything special.
You could plug it into a network and it would just work.
And rightly or wrongly, Gary thought, well, I reckon people who are on the ARPANET might be interested in knowing about this computer.
And Digital didn't have a whole lot of sales going on on the US West Coast.
They had a big office on the East Coast.
But West Coast, you know, California, Portland, those kind of places,
they didn't really have much of a presence.
So he got his assistant to go through the ARPANET directory
and type in the email addresses of everybody on the American West Coast who had an email address.
393 of them.
Now, at this point, they overflowed the header field.
So all the people who got this email got an email which started with about 250 other people's email addresses.
And then right down at the end of it, it says, hey, we invite you to come and see the DEC System 2020 and we'll be giving presentations.
Now, has any of you ever gotten in trouble at work?
Like maybe your boss said, please don't do that again.
Or maybe your boss shouted at you.
Or maybe the police shouted at you.
Or maybe the police shouted at your boss.
You ever screw up so bad that the United States military yells at your boss?
Because that's what happened.
Major Raymond Chahore, who was the U.S. Air Force major in charge of the ARPANET,
because this was run by the United States Air Force, you know, U.S. military project,
basically called Gary's boss and said, you do not do this ever again.
We're very sorry.
Now, there's maybe a little window right about then when we could have fixed the problem.
But everyone just went, yeah, don't send spam or the American Air Force will shout at you.
We're clear.
And everyone went, yeah, we understand.
We'll be good from now on.
We'll be nice.
We'll behave.
We're going to fast forward a little bit now.
Now, you know, that demographic studies of populations kind of, they group people into generations.
There are the baby boomers.
And then there's, there's Generation X.
And then there are the millennials.
And then there's Generation Z.
And then there's Gen Alpha or whatever they're called in the new one.
And there's this little gap in the middle.
The micro generation.
We're the people who got email at the same time as everyone else in the world got email for the first time.
Now, if you are Generation X, it means you were born before Star Wars.
And if you are millennial, it means you were born after Return of the Jedi.
And the people in the middle are the millennial Falcons.
Represent.
How many of my fellow Falcons we got out there today?
Awesome.
Now, the millennial was kind of this weird micro generation.
We're the ones who like grew up in a world where we had broadcast TV and our first job we had email.
So we kind of had the analog childhood and then our adulthood has been completely digital.
But it turns out that the internet is a millennial falcon.
Because when Star Wars came out in 1977, there was the ARPANET.
It used NCP, the network communication protocol.
Everything was managed by the host's file, which you had to go and get a copy of from Stanford University.
And Junk Mail didn't exist. No one had done that yet.
When Return of the Jedi came out in May 1983, the ARPANET had become the internet.
NCP was gone. TCPIP was everywhere. We're all running on this.
DNS had been invented. We had a hierarchical domain name addressing system.
And Junk email was very much a thing.
Now, one of the things invented in the early 80s there was SMTP.
It was created by this guy, John Postel.
SMTP was published in 1982 and has been incredibly successful.
Now, the problem with successful systems is you need to maintain an obscene level of backwards compatibility.
If you bring out an email system at any point in the last 40 years that doesn't talk to all the other people who are already using email,
no one's going to use it because it's useless because you can't communicate.
It is the equivalent of going out and buying a 2022 MacBook M1 or M2 Pro
and finding that it has a cassette player so that you can still load your PowerPoint slides from 1982.
This is how backwards compatible SMTP systems and relays have to be.
And one of the things defined in that request for comments, RFC821, was the format of an email address.
Now, who's written code to validate email addresses?
Keep your hands up if you use the regular expression.
Yeah.
So, I mean, validating the encoders kind of, but we know an email address when we see one, right?
Like, we're looking at our friends in the Avengers.
We got IronMan at Avengers.com.
That looks valid, right?
And Spider-Man, well, yeah, that's probably going to work.
T'Challa at the Avengers.com.
That's going to root, obviously.
Nothing wrong with that.
Rocket plus Groot.
I'm not sure now.
Bruce the Hulk banner at Avengers.com.
What about, no, Vision doesn't give a shit about DNS.
Vision is going to use IPv6, hard-coded literals in square brackets.
Boom.
How many of these would your email validation routine have accepted?
They are all valid.
These addresses are all completely valid email addresses according to the RFC specification for internet email addresses.
So, maybe validity is not really the question we should be asking ourselves.
We're going to pull some email addresses apart and see how they actually work.
Now, an email address has a domain part, and this controls where it's going.
And it has a local part that controls what happens when it gets there.
So, what we're going to do, we're going to walk through the process of actually speaking the raw protocol that we use to send email addresses.
So, I'm going to use a tool called NSLookup here.
Cool kids use Dig, because Dig is what runs on Linux and everything.
But Dig doesn't come with Windows, so this is NSLookup, which is available on most platforms.
I'm going to do an NSLookup, name server lookup.
And I'm going to say, hey, I want to know MX, set type equals MX, mail exchanger records.
I want to know which computers on the internet are the mail exchangers for this domain, funwith.email.
And it's going to say, oh, here you go.
Look, SMTP1, SMTP2.
There's a number in here called an MXPreference.
Now, some people call this priority, that is a stupid name for it.
Because a low number is a higher priority.
Preference number 10 means try this one first.
If you can't get through to 10, go to preference number 20.
The bigger number means wait, try that one later.
So, that's the computer we need to talk to.
We're going to talk to SMTP1, so I'm going to telnet into that on port 25.
And it's going to say, hey, nice to see you.
And I'm going to say, hello, I'm dylanbt.net.
And it's going to say, 250, I'm smtp.funwithemail.
And I'm going to say, I have mail from dylanbt.net.
And it is going to say 250, OK.
And I am going to say recipient2, hello, atfun.
Now, this is where it gets interesting.
Because that recipient2 is the point where we say to that system,
this is who we want to talk to.
Now, I wanted to find out what actually works.
Like, never mind what the instruction manual says.
I don't care what's in the spec, what actually works out here.
So, I went on Google, and I Googled the best email providers
for doing stupid experiments.
And then I went, no, no, no, let's go with something.
We're going to go with best business email hosting.
And I trolled through a bunch of search results.
Now, one that I just want to highlight,
because it is the most wonderful piece of hallucinatory journalism
I've ever seen, this article from PC Magazine in 2020,
the best hosted email providers are Salesforce,
Microsoft Office 360 users should get their email from GoDaddy Web
hosting, Zoho Loyalists should use Zoho Mail,
and the best email for Microsoft organizations is Teams.
In case you're not familiar with business email hosting,
this is like you go into Cars Magazine.
You say, what are the best economy family cars in 2020?
And it says, well, there's the Hyundai Tucson, there's bicycles,
there's a submarine, and there's penguins.
And you're like, yeah, right.
But I also found quite a lot of good solid articles
that were recommendations for which companies people use in 2023
to host email, and so I picked a bunch of those.
Now, disclaimer here, this is not a review of business email services.
I do not want anyone here going away and choosing an email platform
because of something that I said in this talk.
What I'm doing here is the equivalent of testing cars
by filling them with gravel, setting them on fire,
driving them off a bridge and seeing if they explode before they sink.
It's interesting, every provider I'm going to show you
is a rock solid platform.
They all do email really, really well until some idiot like me
comes along and tries to poke them with a stick.
So I identified from looking at all these articles,
the big players right now, Office 365 and Google are the ones
that really kind of dominate the space.
Zoho have a lot of support from people who don't want to use the big platforms.
Proton Mail is very popular because they have really strong commitment to security.
And Fast Mail is a, so disclaimer, Fast Mail is a company
I've used to host my mail for years and years.
Personally, I love them, I have no problems with them.
But I'm just a regular paying customer of all these services.
There's no, I haven't talked to them, there's no endorsements.
So I set up email domains for every single one of those,
set up all the DNS records, all the anti-spam records, everything.
And then I went through to see how many email addresses I could register.
So let's try to chalice out with the apostrophe in it.
Google, yep, no problem.
Office 365, yeah, no problem.
Go on to Zoho Mail, it let me register it.
But then when I click on it,
apparently they didn't tell the people who built their front end
that there might be apostrophes in the JSON and the email addresses.
So we're going to give that one a frowny face.
Proton Mail just says, no, you can't have that, not allowed.
And I go on a Fast Mail and I says, please check this.
So no, can't do that, not allowed.
Let's try Rocket Plus Groot.
Now I go on a Gmail and I try and create a mailbox
and it says you can't contain special characters.
So it looks like you can't do that.
But Google has a weird feature and it's quite a neat feature.
If you have a bunch of email addresses,
so we've got Iron Man at Gmail, we've got Iron Man plus Jarvis,
we've got Iron Dot Man, we've got Iron Dot Man plus Jarvis,
we've got I dot r dot dot dot dot dot at email dot com,
these all go to the same place.
Because Google decided they don't want some situation
where I'm Dylan Beattie and you're Dylan Dot Beattie
and we're different people.
They went, that is too complicated for humans to understand.
And the plus thing, the nice thing about that is it's preserved.
So when you sign up for like a mailing list,
you could be like Dylan dot BT plus NDC at Gmail dot com.
And then if that shows up in a data breach,
I know which company the breach came from.
So this is plus tag tracking.
This is a Google feature.
It's not part of an email standard,
but it is worth knowing about
if you're working with mail deliverability.
So actually Rocket Plus Groot on Gmail
is kind of a smiley face.
Microsoft 365 says no, you can't have that.
So it's a cross for them.
Zoho Mail says invalid username.
All right, fair enough.
Proton Mail, nope, you can't have that.
And Fast Mail says this name's already taken,
which it isn't because I just registered that domain.
It's not taken, but yeah,
we're going to give that one a sad face.
Now Bruce Banner in quotes,
the email spec says that you can have
a quoted local part containing spaces.
There is not a single provider on the planet that I found
which will let you create a mailbox.
But then I thought, all right,
well enough fun with the sensible addresses.
What about single apostrophe at?
Google, yeah.
Microsoft, yeah.
Zoho Mail, no. Proton Mail, no.
Fast Mail, no.
What about single hyphen?
Now this is where Google says
email cannot be a single hyphen.
I'm like, what about a double hyphen?
And Google goes, oh yeah, you can have that one.
That's fine.
Office 365 minus at is fine.
That's legitimate.
Zoho says no. Proton says no.
That name is already taken.
Again, it's not.
I don't know what their validation thinks is going on here.
Fast Mail says no.
So this is the set of aliases that I managed to create there.
This is the Google admin for gg.funwith.email.
To challenge in, single apostrophe is in,
minus, minus is in, underscore is in.
Last one I wanted to try was just underscore at.
Google says yes. Outlook says yes.
Zoho says, well, Zoho says, I put it in, I click add,
and it says, ass 101.
And I'm like, I wonder where that came from.
So I open up the Chrome Network Inspector.
I take the request apart, and it says, status code 200, ass 101.
Now, where I come from, 200 means OK, right?
So I don't know why it's red.
But we're going to go with, we're not quite sure
what happened there.
And finally, underscore at fm.
Fast Mail just says great choice.
So there we go.
So next I thought, all right, never mind creating mailboxes.
I'm going to create a catch-all address.
I'm going to create a address that says anything at this domain
should go to that person over there, anything that's deliverable.
Because I wanted to see if I could push the limits
of what spec email addresses would actually do.
That's where I hit a little bit of a problem.
Because I went on a Gmail, and I tried to send an email
to, quote, Bruce Space Banner, quote.
And Gmail says no.
Gmail says you can't send mail to that person.
It's not recognized.
And it just said it doesn't exist.
Proton mail, their interface said the same thing.
Email address format is not valid.
I'm thinking, hmm.
Now, what we can conclude from this is an email address valid.
Does it contain at least one at sign?
Because if it doesn't, no.
But if it does, then it depends.
Can an email address be case sensitive?
The answer is yes, if you're evil.
When SMTP was introduced in the early 1980s,
the way that it got rolled out was most people
who already had a system that had mail
added an SMTP connector to it.
And most of those systems ran on Unix.
And Unix has a case sensitive file system.
And it means that your mailbox has the same name
as your mailbox file, which has the same name as your user,
which means that Alice with a little a
and Alice with a big a could be different people
on the same Unix machine.
And so when you connect an SMTP relay,
the spec says that once it gets to where it's going,
if the local administrator of that system
has made it case sensitive, that should be delivered intact.
You should never ever modify the case
of somebody else's email address.
Now, this is where the airline industry turns up
and goes, we have COBOL mainframes.
The email address will be uppercase,
whether you like it or not.
So when Alex goes to Alice here,
goes to buy an email ticket and get it sent to her
Unix.box.edu account, she's not going to get anything.
Because big Alice and medium Alice,
they've got mailboxes, but capital Alice doesn't exist.
So can email be case sensitive?
It can if you really want it to, but it probably shouldn't be.
So we're going to go back to here.
We're going to do our 1980s flavored.
We got a hello, we got mail from, we got recipient to,
it says okay, we're going to say data.
And it's going to say go ahead,
end your data with a new line, dot new line.
And we're just going to say hello, dot boom.
250, okay, queued.
Quit, bye-bye.
And there it is.
We sent an email using 1982 flavored raw SMTP
typing into a Windows terminal.
The only challenge with this is finding a network
that will allow you to do it.
And we'll find out later why that's interesting.
Now, this is where I start thinking, well, hang on.
Gmail and Proton won't let me send emails with spaces in them.
But I've just proved that we can hack into the matrix.
We can send code directly.
So I thought, what if I go to Proton mail,
look up their mail exchanger, tell that into it, hello,
mail from hello at fun with email recipient to that,
it says protocol error.
Okay, that's not going to work.
Let's try it again.
Zoho, what have they got?
Boom, tell that into that one, hello, mail from recipient to...
Now, I'm not relaying because that's their domain.
I'm giving them money to host that,
apparently they've decided that that's relaying
and they are not going to let me relay.
Sad face.
Let's try Google.
Tell that, boom, there we go, we're in, hello,
mail from, yep, okay, recipient to...
That's not a valid RFC 5321 address.
Also, that is a lie.
It is a valid RFC 5321 address.
Google is lying to your face,
but they're Google, you know, what are you going to do?
So that doesn't work.
Now, I tried to do this with the Microsoft account
and I could not find any network anywhere
that Microsoft would let me inject mail from
because every single place I tried,
I just got accessed and I banned sending.
So the NDC conference Wi-Fi didn't work.
Hotel Wi-Fi didn't work.
Tethered on my phone didn't work.
On-board Wi-Fi on Norwegian Air didn't work.
Deutsche Bahn Railway on-board Wi-Fi didn't work.
Microsoft are really good at working out
who might be trying to send spam from a moving train in Germany
and making sure that that doesn't happen.
Did you try Azure?
Yeah, Azure Blocksport 25.
You can't send mail from Azure,
or AWS, or Google Cloud.
We'll talk about that in a bit.
Yeah, probably.
And everyone at NDC, and everyone in the hotel,
I'm sorry, there's research, you know.
Let's try it with FastMail.
So I got their mail exchanger.
Tell it, hello, mail from recipient to...
Whoa.
Data.
There we go.
This was sent to an address with spaces in it,
and it worked.
Let's see if it worked.
Quit.
Okay, bye.
There it is.
It worked.
Delivered to an email address containing spaces,
because this is what the specification says
email should do.
Now, what we've just done there,
every one of those services,
we have done the digital equivalent of...
Let's imagine that we want to email,
we want to send a letter,
a physical letter to this,
you know who this is, right?
This is Lazarus Trequero.
He's the president of Malawi,
and he lives here.
And so we want to send a letter to him.
So we're going to write our letter,
put it in an envelope,
and we're going to go to Malawi.
We're going to plane, fly,
land at Lilongwe,
we're going to go out of town,
go up to the presidential palace
at the top of the hill,
and we're going to go,
hello, hello,
we have a letter for His Excellency.
Now, one,
that is not an efficient way to deliver mail.
Two, he might be out,
in which case we have a deliverability problem.
So, what can we do instead?
Well, we do this.
We put a stamp on it,
and we put it in a mailbox.
And we assume that we can find any mailbox,
anywhere on the planet.
We can put a letter into it,
and if we put the correct postage on,
it'll go where it needs to go.
Now, mailboxes work
because there is a physical and financial cost
to sending printed mail.
You've got to buy a stamp.
You've got to buy printer ink.
Have you seen how much printer ink costs?
Like, if you want to sell
bad penis enlargement procedures
to 100,000 people,
you're not going to do it
using a Hewlett Packard inkjet printer.
The business model just doesn't work.
So, this kind of mail,
it's kind of self-regulating up to a point.
But let's have a look
at what we've got in my inbox here.
Now, I've got a message here
from Lisa Williams.
She's looking for a special friendship.
Web design prices on Google,
cross-border payments international,
an investment opportunity for you.
Your subscription has been confirmed.
Important message FedEx International.
Spam! Spam! Spam!
I have a new voicemail message.
Spam! Spam! Spam! Spam!
Spam! Spam! Spam! Spam!
Lovely spam!
Let's give it up
for the NDC Viking Spam Choir.
You never wondered why junk mail is called spam?
So, spam is spiced ham.
It's this.
It's meat in a tin,
which has been around for years.
And Monty Python did a sketch
in the 70s,
where someone's in a cafe
and the things on the menu
are egg and spam,
and egg and bacon and spam,
and egg and spam and spam,
and sausage and spam and spam
and spam and spam and spam.
And for reasons I will never understand,
in the cafe where the clip said,
there is a chorus of Vikings
who sing the spam song.
And I put the Monty Python clip in the video,
and then I thought,
I'm going to be annoyed
with a bunch of loud hairy men.
We don't need a video clip.
We can do this one live.
And yeah, so spam email
is a reference to that sketch,
where the noise of the spam spam spam
just drowns out everything else that's going on,
because that's what happens
with junk mail.
So, spam email is a reference
to that sketch,
where the noise of the spam spam spam
just drowns out everything else that's going on,
because that's what happens with junk mail.
We have these unsolicited emails,
and the reason we're getting them
is because email was invented by hippies,
and hippies suck at security.
Now, things just kind of rattled on a little while.
1980s sort of came and went,
and for a long time in the 80s,
every mail server on the internet
was on open relay,
because peace and love, man,
and good vibes,
and yeah,
we'll help you relay your mail to anywhere.
Then the 90s comes along.
And what happens in the 90s
is a lot of people who've never had email
or the internet before,
they get the internet at home.
And the thing you've got to realize
about what was happening in the 90s
is that stuff that was impossible
is now happening daily.
Someone gets their first email account,
and a couple of days in,
they get an email from their granddaughter
in Australia with a photo of the new baby,
and that was impossible.
Like a year previously,
you could not do that.
It took three weeks to send photographs
from Australia to Europe.
Suddenly, these things happen,
and they're like,
ah, the internet's absolutely magic,
it's brilliant, it's amazing.
The next thing in their inbox
is Bill Gates saying
he's going to give them a million dollars,
and everyone gets a free trip to Disneyland.
And they're like,
well, the last thing was too good to be true,
but then it happened.
Maybe this one's too good to be true,
but maybe this one will happen as well.
We had no frame of reference as a population
for what email could and could not do,
and what was possible on the internet.
And so junk mail, scam,
spams, bad medication,
became an absolutely rife problem.
Most of it sent through open email relays.
Now, there were four approaches
that we took to try and stop this.
One of them was they made it against the law.
The controlling the assault
of non-solicited pornography and marketing
can spam Act of 2003.
Now, as you can tell,
this was a resounding success,
because after 2003,
there was no more junk mail, right?
No, it turns out that quite a lot of people
aren't in America,
and quite a lot of people who are in America
don't give a crap,
and even the ones who do,
it's very, very hard to prosecute them,
because it's ridiculously easy to comply
with the specifics of the Can Spam Act.
So law enforcement did not deliver a solution.
The second approach we tried was client-side filtering.
You have some software that sorts out your email.
Now, most of us use that.
I use that.
You know, I have Gmail,
and it puts stuff in my inbox
and updates and social and that kind of stuff.
I'm not going to talk about that today,
because as a developer trying to send you an email,
what you're doing with it after I've delivered it,
that is your problem,
and I don't care how you've got it set up.
You can filter anything you want.
There's very little consistency.
That's on you to get set up the way you want to do it.
There's maybe some interesting stuff here
about training machine learning systems,
but like that email that I sent
at the beginning of this session,
that all of you said,
yes, I want to receive this email.
Quite a lot of you went to junk.
How would you train an algorithm
to know that you're in Oslo right now
doing a live demo, and this is important?
So we're not going to talk about client-side filtering.
What about verification?
One of the problems with unsolicited email
is that you are not accountable.
There's no way of tracing the junk mail
back to the person who sent it.
And if there was,
it would be easier to find those people
and tell them to stop.
What we need is we need peace and love
and authentication.
And the problem is they didn't include that
because the hippies didn't think we were going to need it.
So when SMTP was created,
it has no support, no usernames, no passwords,
no security, no encryption, absolutely nothing.
And so we looked at the SMTP and we went,
ah, simple mail.
Now, we didn't want to make the complicated
mail transfer protocol.
That might have put people off.
So instead, we made the extended simple
mail transfer protocol.
Now, this was actually invented
at Jim Henson's Creature Shop
because the difference between SMTP and ESMTP
is that SMTP, you say hello,
and ESMTPC, you say hello,
which is close enough.
So we're going to do an extended
ESMTP transcript.
We're going to tell that into my fun-with-email server.
And we're going to say, hello, DylanBT.net.
And it's going to go, oh, cool.
You speak the cool kids' language.
Look, this is the stuff that I can do for you.
I support authentication using the plain system,
or the login system, or the cramMD5 system.
I support startTLS, which means we can switch
this whole thing to a secure channel,
and I do enhanced status codes.
And we're like, all right, well, before we send our
username password, we probably want to switch
to the secureTLS thing.
So we're going to start TLS.
By the way, lots of people still call this SSL,
because SSL was invented at Netscape in the 90s,
and everyone went, yeah, you secure sockets,
makes the internet secure.
SSL stopped being a good idea in 1999,
but by then, we'd all got used to talking
about SSL certificates.
These days, it's actually TLS, Transport Layer Security.
So we're going to send startTLS,
and it's going to go, yeah, OK, go ahead.
Now we're secure.
Start again on a secure channel.
Hello, DylanBT.net.
There's our SMTP handshake, and now we can say,
this is our username and password,
mashed together, base64 encoded,
so it's technically not encrypted, it's just encoded.
But that's going to say, authentication successful,
and now we're in.
So we've said, this is us, look, we're a paying customer,
please relay email for us.
But the fourth approach is let's stop the bad people
being able to get onto the internet in the first place.
Now, there's a guy called John Gilmore.
John is a very interesting person.
He's one of those people who I agree with everything
he does right up to the point where I think he turns
into a bit of a dick.
And then he kind of stops just past that point.
John was employee number five at Sun Microsystems.
He was one of the founders of the Electronic Frontier Foundation.
I've seen him described as an extreme libertarian
cypherpunk activist.
And the most famous quote I've seen from John is this one,
the net interprets censorship as damage and roots around it.
If you start blocking ports because you don't like
what people are doing, the internet is designed
to find another way around it.
And, you know, he has taken this philosophy to an extreme.
He runs an open mail relay.
If you go to hop.toad.com, it will accept email from anyone
on the planet on port 25 and it will deliver it.
Doesn't care who you are, doesn't care where you came from,
which is kind of the libertarian ethos in a nutshell.
Like you shouldn't have to show your ID to be able
to take advantage of public services,
which I kind of agree with except where the internet
is concerned because it becomes too easy to abuse it.
Now, I really wanted to use toad.com in the demos
I put together and in the live demo we did at the beginning.
I couldn't because none of the networks that I'm able
to connect to would let me relay mail through hop.toad.com.
They just said you can't do it.
I can't connect.
If you put a system in Azure on an Azure VM or, you know,
an app service and say, hey, connect to that system on port 25,
it says, no, you can't connect to anything on port 25.
Don't send spam.
Google Cloud, same thing.
Amazon web services, same thing.
Most dial up, most connected Wi-Fi, most public Wi-Fi,
can't connect to anything on port 25.
So we can't use this open relay approach to send mail.
The only way we've got a sending mail is to find someone
we have a relationship with and use our username
password to connect to their server.
So that's fine when we want to use our internet provider
or our email service to send mail to the rest of the world.
But what about receiving it?
The beautiful thing about email is that anyone on the planet
can send me a message and I should be able to get it.
And this is what sets it apart from things like WhatsApp
and Twitter and Telegram.
There is no multinational corporation whose algorithm is
showing me things they think I want to see.
I should be able to guarantee that anyone can send me an email
and I will receive that email, be able to look at it,
which means it needs to be wide open.
If I'm hosting my mail on Gmail,
I can't expect everyone talking to me to set up a Google account
to be able to do that.
Likewise, Microsoft.
So when a mail arrives, when someone knocks on the door
of fun with email and says, hey, I got an email here for Dylan,
what can we do to determine whether that's legitimate?
Well, first, we can look at the envelope.
We can look where did it come from?
Where was this mail sent?
What was the network address it came from?
Does that appear in any of the public databases
of known spamming network addresses?
Now, this system kind of works up to a point.
It stops a lot of spam.
I'm not going to pretend it doesn't.
It's also a massive pain in the ass because anyone who wants
to give you a bad day can just find your email address
and they can report it for spamming.
And these places, most of them don't verify anything.
They're just like, OK, well, we'll add you to the list.
And if it's a problem, the system administrator can come on
and they can request to be taken off the list again.
Now, one, people will do this just for a laugh.
Two, people will block entire blocks of IP addresses.
If your ISP has given the next address along to someone
who's sending junk mail, you could find you've been blocked
through no fault of your own.
You can only de-list from these things,
most of them say once every 48 hours.
There's about 10 or 12 of these services.
This is why I stopped running my own mail server,
is because I got fed up of going onto these forms and saying,
no, you've blocked the entire network block again
and I'm not sending spam.
I'm doing everything right.
Stop cutting me off.
So this system doesn't work.
It's too easy to abuse and it kind of relies on your innocent
until proven guilty, but proving you guilty just means
someone went, it was them, and then we're going to block you
for the rest of your life unless you beg and grovel
and try and get reinstated.
Let's talk about a better system.
Now, there's a thing called SPF, the Sender Policy Framework,
and this is beautiful because it's built on top of the things
we had right at the start of the 80s.
It's built on SMTP and it's built on DNS.
If you've got the Google Admin toolbox and you look up fun
with email on the dig toolbox, you can click through the records.
There's a thing here called TXT records.
And in there, you'll see this record here.
It says TXT, time to live is short lived, and value equals,
well, value on this thing is this.
V equals SPF1.
Version is the Sender Policy Framework, version one.
Then I got a rule here that says, OK, this email,
that is allowed to send email for that domain, funwith.email.
spf.smtp.com, that's allowed.
spf.messagingengine.com, that is allowed.
And anything else, I got a little squiggly thing,
says this might be suspicious.
So what the qualifiers there, I mean a plus means a pass.
This rule matches, you can deliver the email.
Question mark means don't care.
Now, that's not much use in production,
but it's really good for testing stuff,
because you can create your SPF records and see what matched
without it changing any behavior.
A tilt here is a soft fail, flag it but deliver it.
And a minus, if I put a minus in there,
now the plus is the default, so normally you don't see those,
the records actually look like this.
But that minus there, I can put a rule that says, look,
anywhere on the internet gets an email that says it comes
from funwith.email, and it doesn't match that rule,
you can just ditch it.
Like that's fine with me, I'm telling you that's junk.
I guarantee these are the only people sending email on my behalf.
Now, there's a couple of other systems we're not going to go
into today, which do public key cryptography.
There's a thing called a deakim, domain key identified mail,
and there's a thing called demark, which is the same,
but it then sends you reports of anyone who's trying
to pretend they are you and spam stuff.
But this idea of building records on top of DNS
to manage email, this is getting some traction.
This is working pretty well.
Now, when we sent that at SMTP transcript earlier,
we basically sent a message just said hello.
Like once we've thrown the envelope away,
we don't know where it came from.
We don't know who sent it, we don't know who they think
they sent it to, we just know that it said hello.
We want to send messages which are slightly more useful
than that, and so when we connect to our mail server
and we get to the point where it says, hey, data,
send us your message, what we're going to do
is we're going to send a block of headers.
This is who it's from.
This is who it's to.
This is the subject.
This is the email body.
It's going to say okay, 250 cubed.
We're going to say quit.
It's going to say buy, and that is going to work brilliantly.
We get nice formatted email, and this works great
as long as everything that you have to say
can be expressed in seven-bit ASCII,
because SMTP is built on ASCII.
Now, seven-bit ASCII was a brilliant idea
in the United States of America in 1960s.
So was Richard Nixon and let it gasoline.
Like, you know, we can do a little better,
but backwards compatibility.
You can't ship a mail system which can't send mail
to the people who are still in the old system.
So here in 2023, we are still stuck with seven-bit ASCII
as the only way of sending anything over an email platform,
and so we have to use MIME,
the multi-purpose internet mail extensions.
What MIME is, is a way of taking just about any kind of content
and turning it into seven-bit ASCII,
sending it over the wire, and rehydrating it at the other end.
Now, MIME is actually pretty clever.
It's a very, very elegant system.
So we got our headers from, to, subject, date is this.
Now, MIME version 1.0, MIME's supposed to have other versions.
It was supposed to have 1.1, 1.5, 2.0, 3.0,
but they never figured out how that was going to work.
So basically, we are stuck with 1.0 being a floating point boolean,
that if it's 1.0, yes, and anything else means
this is probably not valid MIME.
Now, we're going to throw in a content type here,
and say this is a multi-part mixed message,
and the boundary string is this.
Now, this can be anything you like,
as long as it doesn't appear in your message anywhere.
We're going to put in a message.
Now, this, this is a multi-part message in MIME format.
This is for old, old email readers that don't know about MIME.
There aren't very many of them around anymore.
Now, we get to the good stuff.
So that's the header on our message.
I'm going to put in a boundary.
It says we're starting a block here.
And this block is multi-part alternative.
This says we're sending you the same message,
but in two or three different ways.
So we've now got a different boundary.
We're going to say, right, this is the text-plane version of this email.
Hello, we're having fun with email.
And then we are going to have the HTML version.
Hello, we're having fun with email.
This bit is an HTML format.
And then we're going to close out that boundary block.
And then we're going to close out the other one.
So now we've put another container.
So MIME is actually a tree structure.
You can have containers inside containers inside containers.
And in this one, we're going to say, hey,
we're going to do an attachment here.
This is fun with email.png.
It's base64 encoded because that's seven-bit ASCII safe.
That's the file name.
It should be an attachment.
So this should show up as a little paper clip in your email client.
And then we're going to have this massive,
great big long block of base64 encoded stuff.
Now, this is all well and good.
These are standards.
You can go out.
You can study them.
You can figure out how they work.
You can write your own implementations.
If you are actually building an application that works with any of this stuff,
you have a whole bunch of challenges ahead of you,
not least because email is an open standard.
And when you create code to send somebody a message,
you have absolutely no idea what device they are going to be using to look at that.
They might be reading it on Yahoo.
They might be reading it on Outlook or an Android phone.
They might be using a screen reader.
There is a whole raft of different things out there.
And these days, most email is HTML because HTML looks nice.
And because our marketing teams want us to send HTML email
so we can have buttons and colors and links and those things in it,
HTML email is horrible.
It is one of humankind's terrible, terrible mistakes.
The good news is that there are services out there
that mean you don't kind of have to touch the icky bits quite as much as you used to.
One of these is a thing called the Mailjet Markup Language.
So Mailjet is an email marketing and relay company
and MJML is their way of writing HTML emails.
There is another one which is called Foundation, Foundation for Email.
They don't have a logo, but they do have a picture of a squid or a cuttlefish.
So I thought, all right, we'll put that in here.
Now, fundamentally, what these things do is they give you a language
which looks a bit like HTML.
So I'm going to write an email and this is Mailjet Markup Language.
So I've got a Mailjet head with a preview.
I've got a body with a section and a column.
Now, this is, it looks like HTML.
It's an XML kind of compliant dialect.
It's not HTML.
What we're going to do is we're going to run this through the Mailjet compiler
because the HTML that clients actually understand looks like this.
It is a sack of horrors.
If you read this closely, what we've got there is we've got a table inside,
a table inside, a table.
And if you're on a Microsoft Outlook or Internet Explorer platform,
you get two extra tables for free because the blue comments there
are the Microsoft, if this is Microsoft Outlook,
then include this extra chunk of Markup.
Now, I know people who used to write this stuff by hand.
I used to write this stuff by hand.
Platforms like Mailjet have made the whole thing so much easier to manage.
One of the things that they don't really do is general purpose templating.
They are transpilers.
They have no idea of behavior.
They don't work like a view engine like Razor or something.
What you can do, we're not going to go into the specifics in this talk,
but you can have projects where you take Mailjet and when you compile it,
you turn your Mailjet into Razor.
And then at runtime, you put a model into your Razor
and you get populated HTML with individual order items and stuff at the other end.
If you want to see how that works, I got some code up on GitHub.
You can go and poke around with it.
So you get to the end of it.
And it works on your machine, which is kind of pointless
because why would you send yourself email?
How do you test this stuff?
If you're developing a system that is going to send emails,
there's a couple of rules that I absolutely live by.
So the first one is you want an endpoint on your website somewhere
where you can see what the email is supposed to look like.
The NDC tickets platform that we use in London and Copenhagen and Porto,
every single order in that, there's a link at the bottom where you can say,
hey, show me what that email is supposed to look like.
Now, one, this is useful just for being able to check details on something.
Also, when you're designing this stuff, you can just keep refreshing that page
because it's way quicker to reload the page or to use like a hot reload
or a web plugin than to have to send yourself an email,
wait for it to come through, go to your inbox, open it up.
It still doesn't look quite right.
Round we go again.
So this gets you to the point where it looks right.
Next tool that I use is the thing called Papercut.
Now, Papercut is a Windows application that just sits in the corner of your screen
in your system notification tray, and it's an SMTP server that doesn't send email.
Every email that you send, it intercepts it, and it goes, yep, we got it.
Here it is.
And it lets you go through and inspect all the properties.
So you can see your message in a browser view there.
That's pretty good.
You can see your message headers.
What exactly got filled in by the code that you were using to generate your mail messages?
You can see the body.
You can see the individual sections, how the mind format breaks down.
You can see the raw message content for the whole thing.
So if something doesn't look right, this is a great tool for diving in
and figuring out how that works.
So you've got Works on My Machine in a browser.
You've got Works on My Machine with an SMTP relay.
Let's see if it actually works on the Internet.
MailTrap is a fantastic bit of kit that I've used on dozens of projects over the years.
MailTrap, again, it pretends to be a mail server.
So you send your mail via MailTrap, and instead of sending it, it intercepts it.
It gives you some of the same features that Papercut does.
So you can see different representations.
But then it's got tools like this.
So that's your HTML.
That's your HTML source.
That's your raw message body.
This is your spam analysis.
This is all the reasons why that email might get picked up as junk.
Now, if you look at this one real closely, I've got a .8 on there,
and I've got a whole string of zeros.
But the .8 is because the domain name that I sent it from is less than 28 days old.
And this is the kind of thing they pick up on.
If you're warming up a project for a big client who's going to send a lot of email,
you need to start sending email early because it can take a couple of months
for their outgoing relay, that domain name and everything,
to be trusted and established by services all over the internet.
I'm going to do the HTML check on here now.
This is going to say, look, this is the stuff that you ended up using in that email,
and this is where it's not going to work.
Like, you've got a thing in there.
So Gmail's mobile webmail has flagged two issues that won't render properly on that.
All the way down to AOL and IOS and the fastmail desktop webmail, all these kind of platforms.
Now, let's assume we have done our due diligence.
We've tested all these platforms.
We've designed the email, the client signed it off,
and we've tested it on Gmail, IOS, Android, Outlook, Zoho, Proton,
Fastmail, AOL, Yahoo, Thunderbird, Yudora, Vivaldi, Mail and Pine.
And then we get that WhatsApp from the client going,
the email doesn't look right.
And you're like, what?
Just send me a screenshot.
And they send you this, and you are...
I absolutely believe that we all have the right to consume digital media
in a format of our choice, using our chosen fonts, color schemes,
devices, layout, screen reader accessibility, whatever.
I also think that dark mode email is an eldritch horror
that should never have been allowed to live.
I want to find a friend of yours who's a graphic designer.
I want you to ask them to design you a book cover or something.
And then mention in the brief, oh yeah, by the way,
we don't know yet if it's going to be on black paper or white paper.
Is that a problem?
Because they're probably going to slap you.
Because the first thing you think about when you design things like marketing collateral
is what are we going for here?
Is this like dark with light or is this light with dark?
Giving the client control of that on something like email just opens...
Now there are CSS rules and selectors that are supposed to let us do multiple versions of everything.
They don't actually work terribly reliably.
They're getting better.
But the situation we have now is if you've got transparent PNGs in your email,
you just need to come up with something that works on both.
And often if it works on both, it doesn't look great on either of them.
You're not having to put like little outlines around your logo
so they're still visible and they don't disappear into the background.
And this is, you know, I find it immensely frustrating as a developer
whose job is to maintain and support these kinds of things.
But I also think it's incredibly healthy.
And the reason why so many of these things exist,
validating email and is this email address valid?
Email is a moving target.
It's not fixed. Nobody controls it.
It isn't like someone says email version 2 will be active as of today.
It is a distributed federated system where different people are free to implement parts of that protocol.
However works for them.
They do what works for their systems.
An email address is valid. It worked yesterday.
That doesn't mean it still works today.
Email that rendered properly last week may not render properly this week.
Something that didn't work last week, someone might upgrade their client.
It works suddenly.
And as challenging and frustrating as this is as a developer, I love it.
Because no one can mess with email.
Zuckerberg and his cronies can't come along and kick you off email
the way they can kick you off WhatsApp or kick you off Instagram or Facebook
or get you banned from Twitter or you're not allowed to use Signal anymore.
I can set up a server and you can set up a server and we can talk to each other.
And we can send each other email using open standards and open protocols.
And it is one of the last systems left which allows us to do that
without a multinational corporation wanting to harvest our data, verify our accounts,
make sure we are who we say we are, use algorithms to sell crap to us
and throttle the whole process if it decides it doesn't like us.
Now, that is where we are going to end the version of this talk that is going on to YouTube.
