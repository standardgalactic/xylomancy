Hello everyone! In this video I will show you how you can make interesting art in Microsoft Paint
as well as how you can automate almost anything on your computer and significantly boost your
productivity. Sounds interesting? Then let's get to it!
Working in any program, oftentimes you have to press the same shortcuts again and again or
perform repetitive combinations which sometimes can hinder your workflow and take a lot of time
long term. But what if I say that each of these actions, including moving your mouse and typing
a text, can be performed by just pressing a single key at a time? In this tutorial I'm gonna show you
how using free software called AutoHotKey or AHK you can assign any combination of keys or mouse
moves to any key either on the second keyboard or on your main keyboard or mouse. You may want to
apply this method to a second keyboard because if there are many things that can be automated,
it's not always convenient to override your current keys or existing shortcuts.
So this will allow you to separate the inputs from different devices which is not possible in
Windows by default. If you're already familiar with AHK you might want to skip to the part where
I specifically set up a second keyboard with AHI. Now let me quickly demonstrate what is possible
with this program. For this tutorial I'm going to be using something that everyone is familiar with
Microsoft Paint and Notepad. I will also show you a couple of tricks in a free version of a video
editing software called DaVinci Resolve. But AHK can be virtually used with any program that you
would like to automate. In Microsoft programs like Word, Excel and others including Paint itself,
you can reach almost any tool or function by pressing an Alt key and then entering a certain
combination. In Paint for example you can enable a pencil tool by entering Alt, H, P and 1.
Of course you can also just move your cursor to the pencil sign and click on it. But why do we
have to do any of that? Let's make our computer do that for us. At the end of the day, isn't it what
computers were designed for? Here I have the script that I wrote with which it becomes possible to
do the things we were talking about. With experience you'll be able to write similar
scripts like it's a piece of cake. But for now let's just see what it can do. Let's say I feel
like drawing with a pencil. On my second keyboard I press the insert key for that which by the way
could be any key. Here I have a pencil enabled. Let's draw a circle. Now why don't we fill the
circle with some color? We press the home key for that one. Maybe the circle is alive and it has a name.
Let's enable the text tool and call this blob Richard. Now when it's alive and has a name let's
give it vision. For that we enable the eraser tool by pressing delete and simply erase two little spots.
Heck let's give it a mouth too. Let's give it hands using the line shape tool.
Perfect. Maybe it will be easier for Richard to move around if it has legs. Let's give him a pair
with the curve shape tool. Excellent. Now what if it's not an actual Richard but a picture of him?
Let's draw a nice little frame with the rounded rectangle shape tool and let's choose the size
of it to our liking. And here we have it. The art of a happy blob Richard. How beautiful is that?
And you can do that too and I'll explain how later in the video. But let me show you one more trick
that I've discovered automating paint. Not that it's really demonstrative, it's just cool.
With some basic math I was able to write a script for drawing perfect circles. Here's how it happens.
But the real magic begins when you move your mouse during the process. By doing that you can get these
interesting spiky circles which you probably remember from the thumbnail of this video.
Now let me show you some real automation for Da Vinci Resolve, the software that I mentioned
earlier. In the timeline you can see the video you're watching being edited. If you remember
this part of the video here I have four different keys that appear on the screen one by one. When
initially imported the size of a single key takes up the whole frame so I shrink them down with this
zoom setting to 22% of their initial size. I also spread them along the screen with this position
setting. Let's break down the whole process step by step. First you select a clip in a timeline
then move the cursor to the field next to the needed setting. Then you press and hold the left
mouse button and then you move your mouse left or right. Then you release the mouse button and
probably move your cursor somewhere else. Not to mention you have to physically run with your eyes
across the screen when you move your cursor and when you look at the result in a different area
of the screen. That's quite a lot of actions for such a simple task if you think. Then I thought
wouldn't it be cool to just be able to move a selected clip with something like arrow keys on
a second keyboard? Well that's exactly what I did. With the help of auto-holding reception
and another useful add-on called tap hold manager. Now I can simply select a clip and move it naturally
with the arrow keys on my second keyboard without ever bothering to move my mouse.
AHK does everything for me. Applying same principles now using page up and page down keys
I can easily resize a selected clip. I don't know about you but I was impressed when I first saw
this in action. One last thing that I really want to show you is this quite simple automation
but it just goes to show how much time you can really save using AHK. Right now I'm creating
the subtitles for this video. Almost for every sentence I have to create a distinct clip and
as you can see there are quite a lot of them. Now what would it look like without a script?
First I need to select a needed line of text then I press ctrl c then go to davinci and
click right button on the timeline. In a little menu I select add subtitle then I go over to this
text field where I double click and press ctrl v and then finally move my cursor back to adjust
the length of the clip. With AHK all I have to do is to select the needed line of the script
and press a single key and like a charm it creates this subtitle clip that I just need to adjust.
This is actually crazy if I would have to go and do all those repetitive actions for every
single small clip. I hope that with all the examples I managed to show you that the software can be
extremely useful even for the smallest tasks and that it has huge potential in general.
But now the question is what do we need to set it all up? So for automation purposes we're going
to be using a free software called AHK which stands for AutoHotKey. This program allows you to run
your own scripts to automate many different actions on your PC. This software is extremely
diverse and in my opinion greatly underrated but however diverse it is we will need only a small
portion of it. To use AHK you don't need to have multiple devices connected. AHK works great for
some simple automation which we will learn about just in a second. However if you want to send the
input from several devices separately which is the main focus of this video you will need to set
up AHI or AutoHot Interception. Simply put, AHI is based on a driver that allows you to intercept
any input coming into your computer and it is the thing that will allow us to differentiate our
keyboards. Now let's get down to business. Go to AutoHotKey.com and download the current version
of the software. Run the installation file and select the express installation. After AHK is
installed you are now able to create AHK files by clicking right button either on your desktop
or inside the file explorer. Select new and then select AHK script which will create a file with
AHK extension. Alternatively you can create and write a text file in a default windows notepad
and then manually change the txt extension to AHK. Now the fun begins let's create a simple
script to familiarize ourselves with the software. First create a file called script.ahk. Now we need
to open it. Again you can do that with notepad but I advise you to download the script editor
specifically designed for AHK which will make the process easier but as I said it is not necessary.
To download the editor go to AutoHotKey.com Cintilatex editor for AHK and click installer
to download the installer file. Then go through a simple installation process and leave all checkmarks
by default. When it's done now you should be able to click on your script with the right button
and see an option edit script. Press on it and it will open the editor. If you wonder how to
customize the color scheme download the properties and user settings files from the description
of the video. Go to see users, your username, documents, AutoHotKey, Cintilatex editor and
replace Cintilatex editor users dot properties and then go to styles and insert style 1 into this
folder. Then open your script go to tools, Cintilatex editor for AutoHotKey settings
and in the style menu select style 1 and press update. While doing that I also advise you to
uncheck the auto backup feature for the program to not create backup files all the time but this
is up to you. Now let's try to learn the basics. If you have your script open you should see a
default header which we're not gonna change. Now let's write a very simple script below.
Why don't we make computer type something for us? Let's choose a key we're gonna assign our text to
let it be 1. To assign something to a key you need to type the name of the key and then type colon
twice. The list of the keys and a lot of other useful information can be found by clicking on
an active AHK script on your taskbar which will appear after we run our first script by right
clicking and pressing help. Then expand usage and syntax in the content bar on the right and select
list of keys. Here you can find all the keys you might need in your script. Numbers and letters
are used as they are. Note again that for the icon to appear you need to run a non-empty script.
So let's fix that part. We wrote 1 and double colon. Now on a new string we're gonna use a
command send. It is the main function you need to know in order to create any shortcuts.
Mainly it is used to send input from keys and their values. Let's type send and then the
following text. This is an AHK script. So what it will do is when you press 1 it will type this
exact string of text for you. But don't forget to type return in the end of a shortcut for the
script to move on to other shortcuts otherwise the script might get stuck. Now when the script is
ready click file, save or simply press control s. Now you can close the script double click on your
script in order to run it. Now you can see the icon has appeared on your taskbar. From here you
can right click on it and open help page, exit the script, reload the script or open windowspy
which will come to later. Now let's open notepad and try to press 1. Wonderful now we have our
script working. Now let's have some more fun. Let's open the script by right clicking on the
AHK icon and pressing edit the script. Now we're gonna learn how to send key combinations such
as selecting all text. Let's type 2 and double colon. Now let's type send comma and now we need
to use braces. Braces are used to send keys as though they were actually pressed unlike sending
the copy of the text we typed previously. Type this, control down inside of the braces, A inside
of the braces and control up also inside of the braces. So what it does it will press down the control
key then while the control key is being pressed it will press and release A and then it will release
the control key. So we have a well-known control A combination and don't forget to type return.
Let's go ahead and save our script. Now the script is still running so in order for changes to be
applied you need to reload the script. Now once it's reloaded you can go ahead and try to select
our previously typed string of text in Notepad by pressing 2 and now we have it. The last thing
let's create this shortcut, control and 3. Double colon, send, control down, A, control up, send,
control down, C, control up for copying the text, send, write to set the cursor at the end of the
string, send, enter to enter a new line of text, send, control down, V, control up to paste a copied
text and return. Now save the script and reload it and if we open the Notepad and press the newly
created shortcut, control plus 3 it basically duplicates whatever text is written. You can do
that as many times as you want and as a fun math fact the number of strings will grow according
to an exponential function with the base equal to the initial number of strings. Essentially these
are the basics you need to know to have some understanding of how this script writing program
works and how to run your own simple scripts in AHK. Going from AHK to AHI all these principles
transfer directly without any changes. If you want to learn more I encourage you to go and
read the help manual. There you can find some other examples and tutorials about how AHK functions.
Search tab can be extremely useful at times too. For now let's move on.
So we want to set up a second keyboard so that when we press the button on it a certain combination
will be performed and we don't want to take up the keys on our main keyboard. First thing I'm going
to ask you to do is to create a folder on your desktop called AHK. This is done to simplify
and organize the whole process. Next we need to install the interception driver. The detailed
description of the installation process can be found on a github page from where we're going to
download the AHI. You can find the link in the description below. To download the driver itself
though you need to go to a different github page the link to which will also be in the description.
When downloaded extract the zip archive.
After that copy this folder to our AHK desktop folder.
Inside locate the common line installer folder and open it. Here you can see the installation
file called installinterception.exe. But to install the driver you can just double click on it.
You need to open the common line as an administrator. For this in the window search on the taskbar
type cmd and press run as administrator. From here you need to navigate inside the
common line to the installinterception.exe file. To do that type cd which stands for change directory
and then press space. Now go to the file explorer and copy the path to the installer
as it is shown. Paste it to cmd and press enter. Now we can run our installer.
Copy and paste the full name of it and then type forward slash install and press enter.
The installation should be complete after you reboot your pc.
Now go to AHI github page and from there download the AHI archive of a 0.5.2 version
and this is important as there is a crucial file missing in the 0.5.3 version.
Extract it and copy the folder to our AHK desktop folder. Now what we need to do is to copy two
folders from desktop AHK interception library folder and paste them into desktop AHK auto hot
interception library folder. You might need to run the unlockr ps1 file but let's check if it's needed
first. In a desktop AHK auto hot interception folder find monitor dot AHK file and simply
double click on it. If everything is correct a large window should pop up. You can close it for
now. If the window did not appear try running the unlockr ps1 file as administrator. For more
information you can read the installation guide on the github page. Now to make our life easier
let's copy the content of library folder to see users your username documents auto hot key library
so that we can run our scripts from any place outside of this auto hot interception folder.
Also you need to be aware of your scripts header. The include section should have auto hot interception
in angled brackets. When we're done with this open the AHK folder and go to the auto hot interception
folder. There open the monitor dot AHK file again. In the opened window you can see the list of
devices connected to our computer. I should say that each device has its own unique ID number
so when copied once you don't need to check and change it every time you run your script.
This is very useful. So to see which ID is assigned to a particular device you need to
consecutively activate each of these devices one by one. Let's start with the first ID one.
Inside of the windows there are unique IDs that are assigned to any device
and these IDs change every time you plug and unplug different devices but the unique devices ID
remains the same. Let's activate device number one. Now I've got two keyboards connected to my
laptop. One of them is an inbuilt keyboard. When I try to press any key on this keyboard we can see
that this is the keyboard number one as the keys that I pressed showed up in the window below.
Now we need to figure out what's the ID of the second keyboard that is connected to my computer.
So we check the first keyboard and check the second one. If I try to press keys on my second
keyboard I can see keys showing up on the screen in the window below. So that means that the unique
ID number of my keyboard is this. You may need to go further if you have more devices or if your
second keyboard has a different ID inside the windows but since we found it we don't need to go
further. Let's go ahead and copy the number by pressing the copy button right next to it.
Let's open notepad and paste this number so that it won't get lost. When we figured out
what's the ID of our second keyboard we can close the window. Now inside of the same folder open the
file subscribe allexample.ahk. Press the right button and select edit script. Now you can see
the default structure of the script that we're gonna be using. To create our own script in our
case we don't want to use any mouse like devices so we may delete all mouse related strings.
Now let's change the ID inside of the brackets in the get keyboard ID function. Let's go ahead
and copy the ID we pasted previously into our notepad. Let's paste the ID inside of these brackets
and now we have our template ready and we can save the file onto our desktop. Press save, go to your
desktop and rename it as second keyboard. What I recommend is opening your initial script.ahk
and copying the header from there into our newly created template. I'm not sure if this is necessary
but for the sake of compatibility I think it is worth doing it. Now since our keyboard has
its own unique number every key on it has its own unique number too. So to figure out what's the
number of every key we simply need to run the template script that we've just created as it
already contains a function specifically for defining a number of every key which will be
shown in a small box near your cursor. Let's go ahead and do that. Run the script by double clicking
on it. Now let's go ahead and try to press any key on the keyboard. When I press an H key it shows
that the number of the key is 35. Now what I advise you to do is to create a cheat sheet of all keys
on your keyboard. It's gonna be a long process writing this all down but I hope that the file
that I'm gonna provide you with will help you with this task. As you can see in my cheat sheet
file I've written down all the numbers of all the keys on my keyboard. One thing to note if you
want to fold something inside the script editor in the first string of the area that you want to
fold you need to type semicolon and then a left brace and in the end of the area you need to type
semicolon and a right brace. Semicolon is used to create a common string so that everything that
goes after it will not be perceived by the compiler. To fold the area simply press the minus
button next to the first line. After you figured out what are the unique IDs of the keys that you
need we can open our second keyboard.ahk file again. Next we can try to assign certain key
combination to our keys using their unique IDs. In the description of the video there are gonna
be a link to all the files that are shown in this video including my working current script.
In this script let's take a look at some simple example that we can break down.
First all the shortcuts should be inside of this main function called key event
and our function is located inside these main braces. In the beginning of the video I showed
you how you can enable the pencil tool by pressing an insert key on the second keyboard. Here's the
script for it. So you simply need to type if then type state which is actually state equals one to
create the condition for the function that if the key is pressed and the sign and the ID of the key
is 338 which we figured out through our previous script then we're gonna run this piece of the
script. So just to remind you what actions you need to perform in order to enable the pencil tool
you need to press alt, h, p and one. So here it is you just type send alt, h, p and one. That's all
that's all there is to it. Not much different from our first script right? But note that here you
don't have to type return because we're operating with a function and this function has no value to
return nor does any cycle needs to be broken. It is due to how functions work in general but it
doesn't really matter now. Coming back to our script there are definitely functions that are
more complex than this. Sometimes you cannot just substitute several keys for one, sometimes you
need to include some mouse moves and clicks. For example as I've already shown not only we can
make our computer tap for us but we can make it drop for us. Let's try to make something more
practical though. Instead of enabling a pencil tool by entering a combination of keys we can make
our computer move the cursor to a pencil sign and press on it. Like here I press the right alt key
and it does exactly that. For this we will need to use a windows pi as previously shown windows
spy can be opened by right clicking on an HK icon in a taskbar and selecting windows spy. For now
all we're interested in is the mouse position window. The numbers represent the current coordinates
of your cursor. The screen coordinates are relative to the upper left corner of your screen. The window
coordinates are relative to the same corner of a specific window including the title bar, menu bar,
status bar and etc. Client excluding them. Using functions like mouse move or mouse click you can
move and click anywhere on the screen. So let's write a script. First off we choose a key. Let
it be right all this time. Then we set the default mouse speed to zero for it to move instantly.
Then with mouse get position comment we save our current cursor position on the screen
as an anchor point. We set the coordinate mode as client so that when we're not in the full screen
mode we will still be able to use the script unless we make the window too small and the icons are
minimized. Now using windows spy let's determine the position of the pencil tool relative to the
client and save them in x1 and y1 parameters. Then we finally move our mouse to the position
of the pencil sign using mouse move comment and then we click on it with a click comment.
Note that in mouse move we need to enter values rather than variables so to access the value of
x1 for example we put it inside person signs. Alternatively you can use mouse click comment
which is a combination of the two strings above. For this function you need to enter the actual
variables. For these syntax details use a search tab in a help manual. After clicking on the sign
we return our cursor to its initial position with the mouse move comment and type return at the end.
That's all. That easy you can automate any mouse moves on your computer. Now a couple of words
needs to be said for some reason in Microsoft Paint it shows that the starting point of the
window is outside of it so in cases like that you just need to test this stuff and see which one
windows or client coordinates work for your program. You also need to be careful with this method
because it is much less stable and universal and oftentimes limited. If the screen resolution changes
for example you'll need to tweak your script for it to work. You also might not be able to access
items in your program when it's not full screen so just be aware that this is an alternative
and sometimes an unavoidable one but it's not without its flows. It's always good to know
both methods. Another extremely important thing to know because sometimes a certain combination
cannot be performed instantly be due to your computer being old and slow or because of the
program being slow itself. Likely sometimes you will need a small delay between some of the actions.
The function for delay in HK is sleep and after a comma you need to type a number of milliseconds
that you want your script to wait for. My advice using a delay if delay is not obvious and if your
script is supposed to work but it doesn't try using delay whenever possible. You might be
surprised by where delay sometimes happens to be used. Now since in the beginning of the video
I showed you the example with DaVinci Resolve. I gotta mention one useful feature that you can
integrate into AHK. The feature is called tap hold manager and it basically tells your computer
if the key was either pressed or if it is being held. The thing is that in Windows if you press
and hold a key it sends it once and after a short delay it starts spamming this key repeatedly so
Windows automatically runs its own cycle and with each iteration it sends the key that you press
so you don't have much control over the process and essentially there are two ways of looking
at it. You may say that you're fine with it and simply replace a key for some other action that
will be repeated automatically. Like for example I can replace a left arrow key for a small mouse
movement and if I hold it the key is getting spammed by default and we get this mouse movement.
However another way of looking at it is when you want to have more control. So with AHK
it is possible to set up your own cycle where you'll be in charge of how fast iterations happen
using sleep command for example. Will there be a delay in the beginning or not? And even here
there are several ways of doing that. Some of them might be better in one case, some might be better
in another. It's just too much to explain for a single video. I just want to show you that this
is possible. But I'm going to show you one way of doing it and the advantage of this method
is that not only you get more control it becomes possible to recognize how much times the key was
pressed and run different scripts accordingly. This simplest example. In Notepad if I type control
once it types hello. If I tap control two times it types my name is Richard and if I tap it three
times it types what is your name? Well we're not gonna leave Richard without an answer right?
For that I hold the control key and it types my name is Sarah and finally if I tap it once and then
hold it we get a nice to meet you. And here we have a complete conversation with just a single
button. Isn't that amazing? Let's take a look at the script. The main thing that we need to look at
is this string. Here I tell the computer that everything related to a control key will be
handled by this function number one. Inside of the function number one as you can see we have five
different conditions. In the first one we have a condition that we're not holding the key is hold
equals one. Then that we tapped it once taps equals one and that at the end we're gonna react
to only when the key was pressed state equals one. And inside we have a simple send comment
sending a text. For other four cases you simply change is hold and taps parameters and here we
have it. Just don't forget to include tap hold manager in the include section and you're good to
go. In the example with DaVinci Resolve all that's different is that we additionally include
interception tap hold library and change the new tap hold manager to the new interception
tap hold hi keyboard ID. Essentially this is all the difference. Of course the script itself is
different but the base is almost identical. In this script I use set timer and go sub comments
for initializing the cycle or loop. Set timer sets the time between each iteration and go sub
sends you to a label called move right. Once it's initialized the script under the label
gets repeatedly run. In our case it is moving mouse cursor to the right. The script is initialized
with the same if condition that is when you press the button. We want to break this loop when the
key is released. Hence we create this if condition where we turn off the timer. One small detail is
that here inside of this add function I included two additional parameters. I basically set the
timer of registering a hold to zero so that as soon as the key is pressed it is considered a hold
not a tap. It is done to remove the initial small default delay before registering a hold.
Accordingly I set the if conditions. Download the script from the description and use it as a
template. You can download the tap hold manager from the github page the link to which is as always
in the description of the video. Copy the content of the library folder
to your folder in the documents folder the same as with AHI. Inside of the archive you can also
open the included examples and use them as a template as well. In this video I'm not gonna go
into all the details of script writing so feel free to download the files from the link in the
description and as always go and read the help manual for more functions and other useful information
like targeting a specific window for example. Now rounding this up let me give you a couple
more tips. One good advice would be is to not always try and go for an obvious solution.
For example in pain there was a problem that when I choose a certain shape from the list
the position of selection is bound to a current shape which means that you need to store the
information about your current column and row in a global variable. In addition to that the
amount of times you need to press right and down vary depending on which row your currently are.
Also if you want to get from the first three rows to the fourth you need to first go over columns
then rows and the opposite if you're moving from the fourth row to the first three and I did that
with a lot of different conditions and it worked but there was a much easier solution. To reset the
selection you can simply enable another tool like pencil and then start from the first both row and
column. These are the tricks you need to look for. If you want to be able to reload your script fast
at the end of the script you can bind a comment reload to any key like I did in this script for
example. Use ctrl plus q to comment and uncomment selected lines. Again use the following structure
to fold big chunks of a script. Once again I cannot possibly cover all the details and examples
in a single video without making it ridiculously long so I hope that what I showed you will get
you started and make your learning process easier because when I started out I wish there was a
tutorial like that but all in all be creative with your scripts and keep learning. Thanks for watching!
