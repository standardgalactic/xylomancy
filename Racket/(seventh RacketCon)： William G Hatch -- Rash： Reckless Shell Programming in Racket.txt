So our next speaker will be William Hatch.
William is a grad student at Utah.
It's a wonderful place to be a grad student.
This should become clear shortly.
I don't actually tell my grad students,
hey, you should go build a shell.
But that's what William decided to do.
So we're going to hear about it now.
So we've seen some languages already and now we're going to
see one by a guy who just loves to throw crap together really
quickly using shell scripts.
So I made rash.
It's a shell language.
And I love Unix shells.
I love to just live in the terminal,
interact with the computer through text.
And I see myself repeating commands and things.
And I think, ah, I'll make a shell script.
So I love to wrap things up and gradually abstract over
things I do.
But shell languages have a lot of issues, bash and friends.
For instance, data structures, they
have no real data structures.
You just get strings and arrays.
There are no modules, so it's hard to share your code
between different scripts.
There are a lot of safety issues.
The defaults are all kind of bad.
And you can add flags to change some of the behavior,
but often that's still not really what you want.
And as your script grows and you add more and more features,
eventually you kind of hit a brick wall and you say, well,
it's time to throw this out and re-implement from scratch
in another language.
So here's a little example of some syntax.
So we have if and if.
That's a little funky.
I can live with that, though.
It's a little weirder that these brackets aren't actually
part of the bash syntax.
It's an external program.
It's clever, but it kind of has some issues.
For instance, the real problem with this is it's almost right.
It works most of the time.
But if you get an empty string, the test program suddenly
gets one fewer argument and it blows up.
So you really need to quote those variables
to not have it do that.
So you have to know all these kind of defensive coding
strategies.
But what I love about Shell, well, there are several things.
But there are two things I'm going to focus on.
One is pipelines.
So here we have a pipeline of four programs.
And you just get to write it in this lovely succinct syntax.
And in most programming languages,
running for a program, or just running one program,
is going to be more syntactic hassle than this,
let alone wiring together four of them.
So since Shell languages all do kind of, they do these things.
Oh, the other thing I forgot to mention.
Second thing is the nice line-based syntax.
It's really nice for interactive use,
because it wanted to be an interactive user interface
before a programming language.
So you don't have to put a semicolon on the end of things.
There's lots of irritating parentheses.
You just type what you want, hit Enter, and go.
So since it has these things that it does so well,
but everything else, it has to stand on its own as a language.
So it'll put in all these kind of general purpose
programming things.
And they all are kind of bad.
So wouldn't it be great to put the good things of Shell
inside a general purpose programming language that
does those things well, and have them kind of flow
seamlessly together?
So that's why I created RASH.
So you can write stuff like this in it.
That's what it's going to look like.
But let's go through what builds it.
It's made of four parts.
The lowest part is my Shell Pipeline Library.
It deals with functions and processes that
deal with byte streams and wiring them together.
On top of that, I've built a mixed pipeline
that deals with objects.
So we have functions that take and produce objects,
and also mixing them with the previous pipelines that
just deal with byte streams.
On top of that, there's a macro DSL layer
that gives you a nice syntax.
And it's extensible.
There's a lot of sugar there to make useful things.
And it's also built to be very flat and friendly for using
just on a command line.
And it synergizes with this last part, which is orthogonal.
But they kind of work together well,
which is the line syntax.
It's a reader and macro support for just having
a really nice line-based syntax.
So the elephant in the room talking here at RacketCon
is there's skis.
If there's already a shell written in a scheme,
why did I make a new one?
Why didn't I just port this?
And I feel skis kind of accomplishes
a slightly different goal.
It definitely has stuff for running processes and functions
that work on byte streams.
And it has a macro DSL wrapper.
But skis, the macros, and mine are very different.
Skis has a lot of parentheses, heavy nesting.
It's not really something you want to write on a command line.
And I really wanted that.
So mine is quite different.
And also adds object pipelines, since like PowerShell.
That's obviously, you want to work with objects and not just
bytes, and the line syntax.
So it's nice interactively, et cetera.
So let's look at the pieces.
First is shell pipeline.
The main function in this, and actually all of them,
have a run pipeline function.
But you just give it specifications
of what programs you want to run.
So we have ls, grep, et cetera.
We can add flags to do output redirection and other things.
And also, we can put in racket function.
So here, my grep is defined as a racket function.
And we can put it in the middle of the pipeline.
And it just has to read and write to standard out and whatnot.
So going up to the mixed pipeline,
we've seen with normal Unixy pipelines,
you get a byte stream, which in racket is essentially a port.
And with object pipes, we just want functions
that pass around objects.
And we're really just changing the way we're writing them.
When they go together, a Unix pipe,
since it can produce a port, obviously, a port
is already a racket object.
So that's convenient.
The other way, we have to squish things down
into a byte stream, which we're going to do just
by printing most of the time.
But the syntax for that one is nothing great.
But let's look at the wrapper for it.
So here, we have the pipeline macro.
And this run pipeline recognizes these words
that are in purple or maybe blue, depending on what you see.
But they have also equal signs around them.
That's my convention for writing pipeline operators.
So the operators themselves are macros
that get to determine how they take their input
and produce the pipeline specifications.
So being macros, they get to play all sorts of fun tricks.
For instance, the Unix pipe can automatically
quote identifiers that it gets, so you don't have to quote them
or put them in strings or anything.
The object pipe can generate something
that will detect whether or not it gets a port
and turn that into a string automatically,
because that's usually what you want.
This filter is just nice sugar.
You always filter in pipelines.
So this lets you just write essentially the body of a lambda
rather than having the lambda and parentheses and everything.
So nice to fit it in.
And both the filter and object pipes
automatically will, you see, there's
no explicit reference to the previous argument.
They'll stick that in automatically for you
if you don't explicitly say where it is.
Obviously, we want to use shorter names
on an interactive shell.
So I'm going to use shorter names for most of the talk.
And also the first one we can usually leave off.
Since run pipeline can tell, obviously, where the operators
are, it can tell if it starts, if it doesn't start with one.
And there's a syntax parameter that
lets us determine what is the current default.
Also, having these pipeline operators
let us do have different choices.
For instance, I've always in Bash wished
that globs actually had a slightly heavier syntax.
I've multiple times accidentally put a star
or a question mark somewhere, forgetting it was a glob
character and had things blow up horribly
and do things I didn't want.
So I want the top one, some non-autoglobbing shell
or pipeline operator.
But most people probably want the bottom one
that's just more convenient for putting them in easily.
So with customizable operators, we
can both get what we want.
And you can let your imagination run wild.
I haven't written all of these.
I've written a couple.
But there are all sorts of fun things
that you can do with these to have just a quick syntax
that you can put on one line for all sorts of things.
Finally, let's look at the line syntax.
So the first thing we definitely need to do
is get rid of the parentheses, which normally I love.
But on the interactive command line, I don't.
So we're going to have the beginning and end of line
basically be like parentheses.
So here we apply this function.
It all works as we expect.
Also, it detects whether or not the line starts
with a specially tagged macro called the line macro.
And it will insert a default if there isn't one there.
So supposing app is the default, we can leave it off.
It's generally not going to be the default.
But another line macro we want is CD.
It's a classic in operating systems courses and stuff
where they make you write a shell.
It's always, oh, CD has to be a shell built in and not
an external program because it's affecting
the environment of the shell itself.
And here we want it as a line macro
so that we can not quote things and just write it on the line
as fast as we can.
Obviously where we're going is that run pipeline
is the line macro that we want most of the time.
And as the default, we can just leave it off, write ls,
pipe, grab whatever.
Also, the pipe character is a normal character
in this hashling, so we can use it like this.
We don't always want to issue the parentheses though.
Sometimes we want to use them.
So anytime you put parentheses in the middle of a pipeline,
it's an escape to full on normal racket.
So here we can compute the arguments to ls
using racket code.
Additionally, sometimes we want to bypass the line stuff.
As nice it is to avoid parentheses,
sometimes we like them.
So we can just, any line that starts with an open parent
is treated as a normal racket form
instead of as the line macro stuff.
So you can just dump in any normal racket code.
So the nice thing about this,
or one of the nice things about this
is we can actually use it as kind of a drop in replacement
for a racket base most of the time.
99 point, however many nines of racket code
are going to start with an open parent.
The only reason to really put something
without parentheses on the top level
is to have it print the value out.
So here, the only thing that would break
if we change it to hashling rash is this B
because it'll now get a line macro inserted.
We can fix that obviously by wrapping in the parentheses
or we could make some identity line macro.
So this syntax is useful in either files
or as an interactive rappel that gives you
everything you normally want in racket
plus say shell commands.
So control flow, I didn't add any funky one off,
for loops or if forms to the line syntax.
I figure by the time I'm ready to write control flow,
I'm ready to write a parenthesis.
So rash just uses normal racket, if, for, et cetera.
But now that we've seen how to escape from rash to racket,
we need to see how to go the other way around as well.
So never fear there's a macro for that.
This rash macro inside the for loop takes
this string and runs it as a rash code.
These funny, angley things, they're called guillemets.
They're used in a lot of other natural languages
like Spanish, the way in English we use
curly tick marks as quotes.
And in racket, the way these work in rash
and other things that use the common package
is that they create a string that balances
its delimiters and has no escaping.
So you can nest them arbitrarily deep
without having extra nesting stuff.
And this string also, it doesn't live on at runtime,
it's not evaluated or anything.
But at compile time, this macro takes it and reads it
and turns it into syntax objects
with proper location and hygiene information.
So the string here is really just trying to delimit
where one reader is used and where another is.
Of course, some people haven't liked the GMA things.
You can also use the at reader and so do whatever you like.
One thing I do like about the GMA sort of method though
is it can also produce these kind of implicit identifiers.
So these funny triangle parens here,
they read as the same as the GMA
but also produce this hash percent upper triangles.
So if we bind that to be the rash macro,
we can switch languages by just using funny parentheses.
So here in the middle of this for loop,
we've got racket embedded in rash,
embedded in rash, embedded in racket.
And we just had to use switch back and forth
between which parentheses we were using.
And if you don't like funny Unicode things,
you can just use braces or something too.
So one slight disclaimer, the library is not entirely stable.
It's got a few rough edges.
Everything here works, but there are two do's to be done.
So let's have a quick demo.
So everything that I was gonna do,
I think I have in my command history.
So obviously, we can do LS pipe to things,
we can do aliases.
Here we have a list, we embed it, we filter it,
we send it to Cal State.
So we can have racket and Unix programs
like the wonderful Cal State working together.
Also, one thing that's done in, say, PowerShell
is they've, at least on Windows,
implemented a lot of system administration,
sort of commands in C sharp that produce objects.
So here, I've implemented a PS wrapper
that the prompt knows how to print it out nicely as a table,
but it's giving me an object.
So I can sort it by keys rather than doing ad hoc parsing
on the command line in the middle of the pipeline.
Anyway, that's a look at it.
So to conclude, we take the nice parts of shell
that wants to be just a really simple DSL,
we put it inside racket and make it so you can
easily and seamlessly switch between the two
and it lets you both on the command line do nice things
and it lets you grow shell scripts more from
starting as a shell script and gradually replace things
and put them in full racket
rather than just throwing them away completely.
So yeah, thanks.
Okay, one question, yes?
Yeah, so the question was,
am I planning on doing stuff like T and bash?
Well, you can just put in T if you want,
it's an external program,
but you can do redirections to arbitrary ports.
I haven't put anything in yet to make that really nice,
but you could put some sugar or a pipeline
that has a good way of saying that, for instance.
So it's possible.
All right, if you have more questions
and you're ready to give up on bash,
then catch William later today.
