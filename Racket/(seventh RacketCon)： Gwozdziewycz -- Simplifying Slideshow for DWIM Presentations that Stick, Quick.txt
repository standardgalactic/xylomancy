Our next and final talk, this is Andrew Goshevitz.
He's impressed that I could pronounce his name.
After only two hours of practice.
He's going to tell us about slideshow.
Now, we've seen lots of talks.
Those of us who write talks with slideshow, we recognize them all.
There's various telltale signs.
But some people haven't written their talks in slideshow.
And I can only assume it's because it isn't simple enough.
Perhaps Andrew is going to help us with this problem.
Let's welcome him.
Applause
Can you hear me?
Good.
Keep talking.
Automatically.
Yes, there.
What?
Eat the mic.
Eat the mic.
Okay.
All right.
So, I'm Andrew.
That's kind of the phonetic.
If you haven't seen the 12 letters that make up my name,
and you look at it, there it is.
So, I work on a time series database and monitoring system at Heroku.
We just go.
I don't really like go.
But, okay.
And I've dabbled with Lisp, a common Lisp scheme,
closure probably since about 2005 or so.
And I've written a lot of stuff,
but none of it's ever really been, you know,
it's never really stuck.
So, a couple of jobs ago,
I did manage to get a closure app in production,
but it was decommissioned maybe six months after I left.
So, but I often ask myself, why?
Like, why do people not understand why I like Lisp so much?
Any flavor?
And, you know, do people believe it's not practical?
Do people, are people so hard to change?
Are, am I just horribly unsuccessful at marketing?
Like, where are the marketing people?
Are there any marketing people in the room?
No, okay.
And then there's the reactions that you get when you talk about it.
Lots of something, something parentheses, you know?
So, then there's the claims like this,
which are totally on the money, you know?
But, maybe we should pick racket instead.
That would be pretty awesome, right?
So, the success of closure proves that parentheses blindness is a thing, you know?
People can overlook parentheses.
And it proves that given the right set of conditions,
a Lisp can actually thrive in production and, you know, and work.
And, you know, it can overcome the barriers to adoption.
So, I have to ask myself, what are racket's barriers to adoption?
What are my barriers to adoption?
Why am I not writing real programs in racket yet?
And, you know, when you think about it,
you think about the established code bases that are out there.
They don't really work well with racket.
A Ruby code base doesn't work with racket.
A Go code base doesn't work with racket.
There's an established norm.
If someone does a project in Rails,
then the next project is going to be in Rails
because they already have the leverage of that.
And there's already this established bias against Lisp to begin with.
So, I've started taking a second avenue towards my own personal adoption,
which I hope helps in the workplace as well.
And I think some of you got it.
But if you didn't get it, this is the Manhattan subway.
They recently added a second avenue line.
So, I'm slowly using a racket to create sharp tools.
And, you know, if I need a script for text processing,
I'll just go to racket.
I don't know.
I think maybe it does, but maybe not.
It would be pretty cool if it did.
Maybe your next project will is a better awk.
I definitely use it for a desktop calculator.
I asked on the list recently about diagramming.
I've got some interesting answers.
I'm really looking at exploring what we can do with that next.
There's already data analysis tools and plot 2D,
R-like experience type stuff.
Interested in thinking about how I can incorporate that into some of the stuff I do.
There's rash, of course.
I'm kind of an e-shell guy myself, some bash.
But I think rash is super interesting.
And then, you know, for the documentation that I'm supposed to be writing,
I think I should just be using Scribble.
Thinking about, like, diagramming and things like that as part of Scribble
would just be amazing.
So I'm going to try that next week.
So, racket already has great tooling.
I mean, there's no way to deny that.
I could already do so much today that I need to do.
And the ecosystem is evolving.
The community is growing.
There's books coming out.
Beautiful racket is great.
I've heard of a new book about web programming and racket that's coming out soon.
I think it's maybe just an e-book.
Things are just super looking up.
So preparing presentations is hard.
And I'm a principal engineer at work, so that kind of means that I'm supposed to know what's going on, I guess.
I think maybe opinion leader would be a little bit more apt of a title, but, you know, whatever.
And I choose to give internal talks and talk about what it is that's happening, what I'm thinking about.
And sometimes, you know, even in a meeting, I need to quickly come up with something to present, you know,
just quickly do that, which isn't always easy.
And it'd be nice to do that with a lot of fuss.
So when I typically prepare a presentation, I kind of write out what it is I want to say,
and then, you know, spend way too much time thinking about how do I turn that into slides.
And so I thought Racket has slideshow.
Maybe that can help.
And so a quick story about that.
So in May, I signed up for a talk at San Diego DevOps, which was, at the time, a local meetup for me.
And I procrastinated on slides until just hours before, as one does.
And then I chose to do it in slideshow.
The laughter says so much.
Ironically, this is a JPEG, or this is a PNG, not a GIF.
So slideshow is immensely powerful.
I've seen numerous examples of that today.
The fact that we were rendering video live in slideshow is amazing early this morning.
It's powering this presentation right now, but it's certainly not simple.
I kind of like to think of it as more like hypercard light for experts, which is kind of ironic.
So I decided that maybe I could do something about that, make the base case, make the simple case simpler.
And so I am introducing to you slideshow simple.
It's really not much more than a read syntax that implements a slideshow module.
But who cares?
It runs just like you would a normal slideshow presentation.
It even supports all of the things that slideshow supports.
It largely does what I mean without frustration.
So it's inspired by this tool sent by the Suclus project.
If anybody has heard of that, I think I've seen DWM use today.
And it's pretty good, slideshow simple that is, it's pretty good for the Takahashi method, which is slides like this.
You know, like short slides that are one or two words long.
Lots of them.
I'm on slide 63.
Some Takahashi presentations are probably 500 slides in 40 minutes.
Who knows?
I mean, that's kind of crazy, but I like to think of slideshow simple as a tool for writing slideshows that are Takahashi inspired.
So we get a little more, a few more tricks.
So we've got numbered lists, we've got bulleted lists, images of cats because no presentation is complete without one.
We get quotations, longer paragraphs kind of just do what I mean, just thanks to slideshow.
And sometimes, you know, you want to just borrow Robbie's slides.
So this is the closing slide from his ICFP 2014 talk.
This is probably the only slide that I could find that didn't require about seven libraries.
This relies only on picked.
Thank you, Robbie.
And so you can do that here.
The syntax, it's just plain text.
One slide per paragraph, a line oriented.
And what that means is that the first couple characters tell you exactly what the slide is going to be.
The comments become speaker notes and their Unix style.
Prefixing a line with a backslash allows you to quote and escape the initial characters.
So you can do an image with this.
So this is just bang and then the path to the image.
That list, it looks exactly like the list that I showed you before, but this is the syntax for a list.
Bulleted lists are that way.
If you want to quote Wayne Gretzky, you can do that with, you know, alligator equal or greater than or whatever you want to call them.
And then this is the, you know, the same syntax we saw for Robbie's slide.
And you can kind of just embed arbitrary racket there.
So it makes simple slide shows trivial, relatively frustration free on the average case.
And that's what I'm going for.
In fact, it's frustration free enough that I wrote the first version of this presentation with slides in mail.app in my bed before, you know, before I went to sleep.
I emailed it to myself and it executed just fine.
So I think it's the case that tools exist to reduce barriers and make our lives simpler.
I've been making tools in racket and I think it makes a lot of sense.
There's an existing ecosystem of really high quality and functional foundational libraries to leverage and build upon like slideshow like picked like racket gooey.
And since we all need tools to do our jobs, it only seems, you know, it only seems to be the case that if we start writing tools and racket, make people start using them.
Maybe they'll start uncovering the reasons why they don't like this.
Maybe we'll reduce their biases and start adopting racket a little bit more and work.
So I hope you'll give it a try.
I hope I've inspired you to figure out how you can utilize racket to improve your life, reduce your barriers at home in the workplace, wherever you need to do things.
And I just want to say thanks to the racket community.
Thanks for people for having me.
This has been great.
I'm really excited to be a part of this community.
Thanks.
And before we take questions, can you show the source to your duck?
Yeah, absolutely.
We're all dying to see it.
I was hoping you'd ask that.
That was actually.
So while he's cutting the talk, we can queue up another question.
So just a minute.
Here, why don't I?
Oh, wait, that's probably not what I wanted to do.
This is why you need rash.
This is why I need rash, but more importantly, you know, it's easier to do when you're not holding a microphone.
So as you can see, there's the speaker notes that are right in there.
And I'm immediately tempted to make it more complex by having some syntax for, say, repeat the slide from it.
But that's how we got where we are.
So let's take a real question.
There's some duplication of that.
There is one slide where I was telling the story.
Yeah, obviously, yeah, here it is.
So I wanted to kind of do the reveal, you know, which Racket has, or Slideshow has a nice way to do that.
This doesn't, but it's just copy and paste.
No big deal.
Question here.
Yeah, so the question is, I could, that might actually work.
The question is, what did I choose to leave out?
And the, the stuff that I left out is all of the stuff that I wouldn't need to use or wouldn't want to use if I was preparing for a presentation an hour before the presentation.
Right.
Which, I mean, if I really need that, then I probably shouldn't be preparing a presentation an hour before.
Another question.
No, I, so the question is, does Slideshow simple have standard cat, like standard fish?
No, but if, if we get something in Racket that, you know, draws a cat, maybe there is one, if there's a fish, maybe there's a cat, but I don't remember ever seeing one.
Then you could do it the same way that I just did the, the shocked face.
So we could probably make that simpler too, if we really, really wanted to.
Sounds like he wants a poor request.
Let's take one more question in the back.
Is there a way to configure things?
No, that sounds complicated.
All right, on that note, let's thank Andrew one more time.
