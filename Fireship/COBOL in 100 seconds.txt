Common business-oriented language, or COBOL, is a weak verbose and flabby language used by
code grinders to do boring things on dinosaur mainframes. It was developed over 100 years ago
in 1959, but is still in demand today in 2020 because it's the language used on many mainframe
computer systems. You know, those things we call big iron, usually built by IBM to handle massive
amounts of throughput, to handle things like credit card transactions, airline ticketing,
and most recently, the massive spike in unemployment claims. So if you want to be a programmer in
2020, COBOL might be your best bet. It's a high-level imperative language which means it's
very easy to learn. The syntax is extremely verbose by design because it's self-documenting,
and it contains over 600 reserved words for you to memorize and take advantage of.
And every COBOL program is structured with an easy-to-follow hierarchy. Your program contains
many divisions, which contain many sections, which contain many paragraphs, which contain many
sentences that contain your statements, which of course contain many characters. When you start
writing some COBOL code, you'll notice these vertical lines in your IDE. The first six characters
are your line numbers. Start at 000100 and increment by 100 for each line. Column 7 is where you
identify comments or the continuation of a previous line. If we're identifying a new division,
section, or paragraph, we can use columns 8 through 11. And notice how every line ends with a period.
That's what's known as readable code. Now columns 12 through 72 are where you write your
actual statements. The reason you don't go beyond 72 columns is because your code means to fit onto a
physical punch card, and it ensures your program is responsive on mobile devices. We can define
our variables in the data division. First we name the variable, then we define its data type with
the picture keyword, then assign a value to it. We can then work with this data in the procedure
division. We display the variable, then tell our program to stop. From there we can pile our program
to a binary, run it, and everything should work perfectly. And now you're qualified for a six
figure salary, maintaining the world's most critical legacy systems. This has been COBOL
in 100 seconds. Hit the like button if you want to see more short videos like this. Thanks for
watching, and I will see you in the next one. Oh hey there, thanks for sticking around. This is
the part of the video where we go beyond 100 seconds to learn some more advanced features of COBOL.
