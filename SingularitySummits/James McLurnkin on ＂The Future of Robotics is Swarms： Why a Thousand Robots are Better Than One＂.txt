about that shortly.
So we have one more speaker before lunch,
and it is Professor James McClurkin.
He is the Professor of Computer Science at Rice University
and a leading expert in swarm robotics.
From 1999 to 2003, he was the lead research scientist
at iRobot, where he managed the DARPA-funded swarm project.
In 2003, as a PhD candidate at MIT,
he won the Lemelson-MIT Prize for Student Invention.
Professor McClurkin's research is inspired
by the behavior of ants, bees, wasps, and termites.
He develops distributed algorithms
that allow cheap robots to exhibit
similarly advanced group behaviors,
including exploration and even dynamic task assignment.
He is here to explain how multi-robot systems offer
faster and cheaper solutions for many problems,
and he has brought some robots along for a live demo.
Please welcome Professor James McClurkin.
Thank you.
Good morning, everyone.
I have the honor of standing between you and lunch,
so I'll do my best to keep my remarks efficient
and as interesting as possible.
So we talked about swarm robots,
and I've got this talk divided into three acts.
For Act 1, let's get into the robot revolution.
As the slide already says, it has already begun
and it is televised.
Here's the Roomba.
They sold 3 million of these.
It's a fantastic little robot.
It runs around to clean your floors.
It does it all the way you're not home.
Does it do as well as you do with a vacuum?
No, but you don't have to push it.
Honda's Asimov, arguably the most advanced human robot
on the planet, just in case you're wondering,
there's Asimov right there in the middle.
And the job of Asimov is to help people.
So we've spent the last 10,000 years
building a human size and human-shaped world,
so we need a robot that can go out there
and work with us in our own place.
The Pac-Bot.
This is by iRobot.
And if you're these two warfighters,
do you want to go into this cave or send the robot in?
Well, that's easy.
iRobot builds them, sends them out like that.
Sometimes they come back like that.
And regardless of your views of our current foreign policy,
what we're doing overseas, or any of this stuff
that's going on with our military,
this is far better than the alternative.
And the postcard says, iRobot, thank you
for all of your support.
You have saved lives today.
So these are the three Ds of robotics.
These are tasks that are dangerous, dirty, and dull.
And you can figure out which ones are which,
based on the images, if you want.
But I argue that there's a fourth D.
There's a fourth D of robotics that is distributed.
And I think the next generation of robotics,
the future of a futuristic field,
is distributed systems, robots that can go and work together
and do so in very large populations.
Here's my favorite current example.
And this is Kiva Systems.
This is one of their warehouse setups.
And they have huge populations of robots that work together.
They're not quite fully distributed,
but they do have some local autonomy.
There's a big giant centralized controller
that tells them what to do.
And the number of robots have let them fundamentally
transform the warehouse to distribute some problem.
You don't need to have pickers and placers
to pick stuff off of shelves.
The shelves come to you.
You have humans on the periphery of the warehouse.
Big 18-wheelers come in on one side
and load it with one set of goods,
a big truck of staples, a big truck of pencils,
a big truck of pens show up.
Robots wheel up.
They line up.
People put the things onto the carts.
The robots go somewhere.
No one cares.
On the other side of the warehouse,
small trucks show up for individual stores.
The robots again line up from somewhere.
No one cares.
And the humans can put the stuff onto the small trucks.
All the while, the inventory is actually
moving and marching around the warehouse.
If you need to move to a bigger warehouse,
you just build a ramp between them.
I think Staples did this.
And the robots to march up to your new place.
Fantastic stuff.
So transforming the problem through large populations
is what I'm really thinking about.
So imagine if a forest fire.
We just had a bunch in Texas.
What if you had 20 robots to look for hotspots
in this forest fire?
This could prevent flare-ups from happening behind your firefighters.
This would be fantastic.
Earthquakes.
Here's a job that humans are uniquely
ill-suited to do.
We're either too big to get into either the rubble
or we're too weak to lift the rubble off
if we find a survivor.
So I imagine for this, I have 200 here.
I should change the slide.
I imagine a whole ecosystem of robots.
I imagine maybe 20,000 cockroach-sized robots
who can look for signs of life.
They then relay their findings through their cockroach radio
network to a bunch of rat-sized robots who
are structural engineers.
This is New York City, so we got serious rats here.
And these robots then can solve the reverse jenga problem,
figuring out how to excrete this person safely.
They've got blueprints.
They know where the signs would prevent occurred.
They can solve this problem.
They then relay their instructions
to a bunch of brontosaurus-sized heavy litters
who can then go in and do the reverse jenga problem
of getting the person out.
So this would be a fantastic thing for robots to do.
One of my favorite applications, though,
is sending a robot to other planets.
So right now we have two robots in Mars,
or we had two robots in Mars.
Next slide, please.
What if we had 2,000, and it might
look something like this?
So here's my demo.
And I have to start the demo in the way
that you need to never start a demo by begging forgiveness,
because the house Wi-Fi is really powerful.
My robots are less so.
OK, so here is my robots.
They have just landed on Mars.
For this demo, there's going to be a human in charge
of the swarm, me, namely.
And the first thing you need to do
is get the robots away from the landing site.
So I'm going to ask this one to lead its colleagues out
into the wild red yonder.
I think they're saying down in front.
So the problem is that I need to carry this guy around,
because I've only got about two feet of range
because of the Wi-Fi system.
But let's all imagine that we have a nice, smooth follow
the leader going on.
I've never done this for my knees before.
This is really kind of fun.
The robots themselves talk to each other using infrared light.
So if I can get them into a happy configuration,
they can take care of themselves.
And that's what I'm going to try to do.
This, of course, is the one trip where I have a single pair
of jeans as well.
All right.
So here we go.
We've got the robots out into the wild red yonder.
Now we've got them to their place of exploration.
Let's give them the cluster to one location.
One of the joys of being the project managers,
I get to pick all the music.
So they're clustering.
The way the robots are communicating
is they're using infrared light.
They're talking to their nearby robots.
The range is about one meter.
So the robots who are far away actually
have to talk to their neighbors, to their neighbors,
to their neighbors' neighbors to figure out which way to go.
So having all of your robots in one place in Mars
is a waste of a lot of taxpayers' money.
So let's get them to spread out.
There we go.
All right.
We're all nice and spread out.
If you don't like where we are in Mars,
we can switch to a flocking behavior.
We can all move off together at very simple swarming.
Let's rotate a little more.
Off we go, flocking and swarming.
Turns out, getting them to stay cohesive.
We see that they're kind of spreading out a little bit.
Getting them to remain cohesive was really hard, turns out.
I thought I'd get that figured out in a few weeks.
Nine months later, I had a nice paper
on computing the boundaries of the network,
where it turned out to be step one of what I thought
was four steps.
One of my grad students now has figured out
it's at least five steps, and we're
still working on keeping them to a nice, coherent blob.
OK, so here's flocking.
So let's say you find something in Mars.
Let's say, for example, you find, oh, I don't know, a knee.
That would be very exciting to find in Mars.
So what you'd want to do is get some other robots
to help you analyze this specimen of patellar tendinitis.
So I'm going to ask this robot to navigate through the network
to that one over there.
Now, when I say navigate through the network,
this is the same way you email routes to the internet,
but these routes to physically route.
So this begins our theme about physical data structures,
where the computation that's happening
is in the physical world, but the algorithms
are computational algorithms.
And then a mean engineer comes and moves the robot,
but that's OK.
The network is dynamic.
It has to be.
The robots are moving all the time.
If the network was not being rebuilt, nothing would ever work.
OK, so there's our navigation.
Clustering.
So now we want to have three groups of robots,
red, blue, and green.
I don't care who's in what group.
Apparently, we don't only have one red.
How sad.
Oh, no, there's another one.
So they're trying to move to members of their own group
and get away from other groups.
So very much like junior high lunchrooms,
you end up with three clumps of robots
doing different tasks.
If you wanted to, you could have them dispersed
and have their tasks written distitially,
but that doesn't make for a good demo.
OK.
This is orbiting.
I'm going to cheat and move the center.
So let's say you have found something on Mars,
and you want to keep it safe from Martians or anything else
that may be threatening your fight you'll find.
So the even-numbered robots are flashing their red lights,
and they're clustering around the source.
The odd-numbered robots are flashing their blue lights,
and they're orbiting the perimeter.
So as long as whatever is on Mars
is scared of a five-inch-taller robot,
you're in good shape now.
And our last demo is my favorite.
So for the computer scientists in the room,
this is a physical bubble sort.
What they're going to do is they're
going to arrange themselves in a sorted order
based on lowest ID, which is this one right here.
That's, by the way, how the leader is selected.
The leader is elected not based on anything I do.
It's based on whoever one is the lowest ID, which
means, whoops, which means which everyone has never
received a message from a robot that's less than it.
OK, so now I'm going to tell them to form a straight line.
So all the robots with IDs.
So every robot is going to figure out,
am I the lowest?
No, because I've got a message from robot three.
Likewise, one of them is going to figure out,
am I the highest?
And that one's going to be the lowest to highest.
All the other ones are neither the lowest nor the highest.
So they're going to look for the highest ID less than them,
and the lowest ID greater than them.
That's their successor and their predecessor
in a sorted order.
They're going to physically move between that,
that creates a straight line segment.
And then if they're all doing that by induction,
you get a globally straight line.
So off we go.
There's the highest ID.
It's 113, I think, indeed.
And all the other ones are doing their best
to get themselves arranged.
And they've done a pretty good job.
It never works that well.
Well, since that worked so well,
I've got to do what any self-respecting engineer would
do, which is a mess with it.
And the worst possible thing I can do is what I just did.
And now they have to then resource themselves.
So the little sounds are hearing.
Those are robots who are in bad neighborhoods.
They can't find a successor or they can't find a successor.
And they've got to kind of work it out.
One of the things you have to embrace with multi-year-old
systems is that you have to kind of have a zen with this
whole thing.
It may not happen exactly the way you want.
That robot may get tied into a knot.
It may look like a fool up here on stage.
But as long as you wait long enough,
as long as the system does not have any systematic errors.
They get caught behind a wall they can't get out of.
They fall into a rut.
Then, well, eventually, we'll have victory.
Excellent.
Well, there's our demo.
I'm going to leave them up here because I can't turn them off.
All right, let's go back to the boring PowerPoint.
So how do you program 20,000 robots?
Where does this come from?
So here's what the lab looked like back at our robot
before our room had to go over my feature space.
And this is 68 robots.
So let's do something useful with them.
So we've got this demo on stage.
Let's do something slightly more useful.
And what we're going to do in this video, whoops,
is that we're going to look for treasure in this room.
The treasure is hidden on the left-hand side of the screen.
In this case, it's an orange ball.
You can tell robots anything is treasure.
They're not very smart.
And you're going to see four types of robots.
Blue robots are on the boundaries between explore space
and unexplore space.
And they're going to ask the red robots
to push them forward out into the environment.
White robots are guides.
They're going to lead the humans to the treasure.
And green robots want to go back and go charge.
The video is sped up about, I think, about 10 times.
So off we go.
You can see the blue robots on the boundary.
And the red robots are pushing them forward.
Now, the robots have already found the treasure.
There's one over there blinking very excitedly in those tables.
The treasure really wasn't very well hidden.
But like I said, robots aren't very smart.
So when the lights go back off, you'll see some white robots.
And those are guides.
And they're going to lead us to the treasure.
They're running the navigation algorithm we just saw.
And green robots have low batteries.
They're going to go back and go charge.
When we're all done exploring, we had to get them all back home.
So we had to run recovery.
And here they are recovering.
They're forming, actually, a maximally span tree.
I've got a slide on this.
And they're all trying to get back home.
But the important thing about this video
is that for the keen of eye, you will notice,
one little robot didn't quite make it home.
We had 104 robots that day.
We had enough robots, these robots,
to make the floor shake in this wood-framed school house,
which is really very cool.
104 robots, one didn't get home.
That's less than 1%.
That's just fine.
We did have some other more serious problems, though.
When you're five inches tall, the world is a very big place.
So we tried a whole bunch of clever techniques
to get them to not be quite so stupid.
Eventually, we gave up and ran around duct tape,
which further proved duct tape is a solution to all problems.
All right, so where do these ideas come from?
And nature provides a fantastic repository
of distributed algorithms for which engineers can not usually
seek direct guidance, but almost always seek inspiration.
So we have leaf cutter ants, weaver ants,
and a carpenter ants.
These are my personal ants in their ant condo.
So here's a slide from Professor Thomas Celia Cornell.
And he has been studying honey bees forever, essentially.
And this is his idea of how they figure out
where to forge at a particular nectar site.
So the box says things like probability
of continuing forage from site A, forward to great
from site A, total strength of recruitment signals
from nectar source A. So they can now
choose between nectar source A, nectar source B, blah, blah,
blah, blah.
So what's important about this isn't so much what it's doing,
as is what it is.
So the computer scientists in the room, this is a flow chart.
I can take this and slap some semicolons on this
and expect that I can compile this and run it on my robots.
So the biologists get external validation of their model.
They can't change their software and their bees
to really see what is affecting what.
So it's good for them.
The engineers get software that's been
debugged for 160 million years.
Get it, debugged?
All right, here's another thing I want to look at.
This is multi-route manipulation.
And these animals do not know the geometry of their environment.
They don't know the geometry of the material.
But they're able to get it moving pretty well.
I want to understand how they do this.
OK, so what does nature teach us?
We have an existential proof that these things work.
And they work well.
Ants can get to 20 million strong for army ants and driver
ants.
That's 200 pounds of ants.
I weigh about 200 pounds.
That's a lot of ants.
And they also tell us that population sizes
can be transformative to how you solve these problems.
You can do things with 10,000 robots
that you can't do with 100.
And you can do things with 10 million robots
that you can't do with 10,000.
Here's an example.
This is a boundary detection on my robots.
So they're trying to figure out who's on the outside
and who's on the inside.
And they've done a nice job here.
I can't do this with 20 robots.
I've got 108 here on this slide.
And that's brilliant enough to do this right.
I'd prefer to have a thousand on this slide.
Here I am doing it with real robots.
And this is on the lower right over there.
I tried to make it look random.
But that's about the smallest number of robots
I could do to get that geometry to run my algorithm.
I needed more robots.
So the other thing that we can take from this,
now taking off our biology hat, putting on our computer
science hat, is that this computation is unique.
The algorithms that we do have to go through the physical world.
So it's not enough to just have a little piece of software
and think about how it's going to run.
You have to understand how the world comes into this whole picture,
how communication and mobility changes what the data
your algorithm is dealing with, and then how you can then take
that data and then put it back into the real world.
So I'm calling that physical data structures.
I'm here as a physical data structure.
This is a maximally spanning tree.
The blue robots are forming a communication backbone
for all the other robots.
So every robot has a connection to a blue robot somewhere.
They can all get information to the communication highway
to get back home.
You can use this data structure not to just route
information around, as you can guess where I'm going.
You can use it to route robots around.
So here's a video.
These are the new robots.
These robots do not have the physical data structure.
And as you can see, they are unhappy.
They can't get home.
We come over here.
We come over here.
These robots do have the physical data structure.
And some of them are staying put so that their neighbors can
work their way back home.
One little robot got the wrong way, and then his batteries died.
So I had to go take it out.
But I'm not going to let this finish, but you get the idea.
They're all going to get home except for the one that died.
So life is good with data.
I talked about the bubble sort algorithm.
Here it is on PowerPoint.
So robot two and nine are special.
They know they're special.
Robot five wants to figure out where to go.
Well, that's easy.
It goes right there.
When you get more robots, well, if they each iteratively
move to their best guess, turns out it all works out.
And the math behind this, I've got
a student who's working on the math behind this.
He's got actually very beautiful mathematical proof
that says that actually does work.
And you've seen the video, so I can skip this.
Finally, we want to explore building.
So here we want to get the robots to spread out as far
as possible to search everything in the building.
But if the building is too big to search simultaneously,
what can you do?
You have to have somebody to keep track of where you've been.
So we'll get them to go through the hallway.
They'll find a junction.
They'll do a push onto their physical stack,
where they're now going this way.
Everyone go this way.
They go that way.
Then I see everyone go this way.
The green robot and the red robot
are storing information about which way they're exploring.
They get to a junction.
They get to an endpoint.
They tell the green robot to switch.
And now the information has been updated.
So now you know the new way to explore.
So if you can source information where you need it,
aka at the junction, and you can update it
without ever having to have the robots build a global map.
They don't know where they are.
They just know I'm at a junction.
I'm facing this way.
And you can do that in real life.
Very nice.
Thank you.
So here the robots are coming down.
The junction robot is the one with the dunce cap.
I'm using that just to mark where the junction is.
This one here is going to find the junction
and then point that way.
Everyone go that way.
The robots now head out.
We'll speed up again.
When it gets to the end of the corridor,
there's another dunce cap marking the end.
That robot over there says, I'm at the end.
Everyone go the other way.
And then they all go the other way.
And that's where my students' camera ran out of memory.
So you can store the state physically,
which you can get some real efficiencies there.
OK, summary.
Multiracisms are going to become the norm, not the exception.
I'll put my stake in the ground on that.
We need algorithms, theory, and horror
to support this revolution.
So the research in my group tries
to cover all these things.
We're heavy on algorithms.
And then 50% algorithms, 25% theory and hardware.
The real breakthrough that I'm trying to make
is how to understand how to do this sensing, computation,
actuation through the physical world
and how to reason about it in a nice, clear way.
Computer science, essentially as a branch of mathematics,
has made a lot of ground, made a lot of advances,
because they have a nice, clean model of how
to deal with computation.
So I want that for the robots.
And I think physical data structures are a way to do that.
OK, so act three.
Very much in the classroom.
So taking off my research hat, putting on my professor hat,
my scholarly teaching hat, is that I
want to have impact on education.
So we are in an education crisis right now.
We have policy and politics that are largely
anti-education or funding.
I live in Texas now, which is, well, is Texas.
So if people say, we spent all this money on education,
it's really bad, we should cut the funding,
because it's not doing any good.
That doesn't make any sense.
We need to hire, we should double the salary of all
the teachers, just right there.
So that way, my students, when they come out,
they have an offer from, again, this is Texas.
So they have an offer from, what is that,
Exxon for $89K, and offer from a local school for maybe $60K.
So you're asking her to take a $29,000 pay cut.
And right now, you're asking her to take a $59,000 pay cut.
And that doesn't make any sense.
All right, so these ones here are above my pay grade.
Let's deal with these bottom three.
Count to protect your social pressure on students,
a.k.a. you're a dork, you're a geek,
you should not be doing technology,
particularly if your skin is brown.
Uninspired curriculum and amazing access
of fun and technical curriculum.
So I think robots to the rescue can solve this problem.
I think we can fix this.
I want to increase engineering literacy
with a fun hands-on curriculum.
I want to work in the real world with real robots.
This is what I give the freshman in my class,
first semester freshman at Rice University.
Everyone gets a Tupperware container.
Inside the Tupperware container, they find,
they don't find this.
They find a USB connector.
They find a piece of an anti-static phone.
And they find their very own mobile robot.
This is what they use in my engineering systems class.
We cover mechanical engineering, computer science,
and electrical engineering.
They say control theory, communications,
basic robot behaviors, simple artificial intelligence,
all in the course of the fall semester.
So we'll set that up here.
So blah, blah, blah, blah, blah.
The world didn't need a robot,
but of course we did need a robot.
So I built one, old robots, new robots.
We'll skip all this stuff.
The robot that we have now,
the new one that we're working on,
is an advanced low-cost multi-robot.
It does almost everything these 2003 versions do,
except it does it at about one-tenth the cost.
So it's advanced enough for real-life research.
It's robust enough for classroom users,
and it's cheap enough for a K-12 outreach.
The diet will be open sometime next year.
We're gonna release this stuff
so that everyone can use this thing.
So the sensors that we have are a bunch.
They're light sensors, and you know what?
I'm gonna skip this.
You can find us on the website.
Lots of sensors.
Really simple mechanical design.
And lots of sensors, by the way,
not only make sure you want a better robot,
but it opens up huge curriculum possibilities,
even fun possibilities.
You can use this robot as remote control
to control another one.
That's a great homework activity to give your students.
At any rate, amazingly simple, elegant design.
I can take a little bit of the credit for this.
My students are fantastic.
For 14 screws, whole robot, 14 screws.
I love it.
You can do real science with them.
So I gave these to my graduate class and said,
you know what, go find existing algorithms in the literature
and run them on these robots.
The video here is doing a PARCO filter.
The yellow circle is an estimate
of the position of the red circle.
These robots, they're cheap.
They don't have fantastic sensing.
But with the right processing,
you can have a pretty good estimate
of where your red neighbor is.
But the real thing that I'm proudest of
is my freshman class.
It's NG128, first semester freshman,
and we want to attract talented,
but dissuaded students.
Students who have been told,
you are far too feminine to be an engineer.
You're far too brown to be an engineer.
Or why would you want to be a geek?
Even though you can make three times
the money I'm going to make.
So we want to get those students
and have them come back to engineering.
People who were interested,
but have been turned off by social pressure.
So we have six design challenges.
These change year to year,
but here's what we've got this year.
Cookie cream, where you lift up a bag of malanos and eat them.
Bug wars, we're doing croquet on Tuesday.
Flocking, tic-tac-toe, and finally robot quiddish.
We're going to focus on these last two.
So here is croquet.
We give them the robots.
We use all these crazy courses on the ground.
They have to get the robot to drive through this course
and get through the wicket.
And some of these wickets are 35 feet long.
It's a long way for a little robot to go.
And here is Michael starting.
There is, Mika, I don't know what she's doing,
but she's typing something on the robot
and she looks very serious about it.
But she didn't know software when she got here.
And she's hacking this code.
It's fantastic.
The final project, we did quiddish.
And it's very simple.
You have bludgers, seekers, quaffos, and snitches.
And there's one snitch right down there.
That's my own custom design.
It was faster, meaner, and more powerful than the robots,
but they still caught it.
And we had, it was one of those situations
in which everything worked out from an engineering point of view.
And that never happened.
So the software worked.
One of my colleagues has a beautiful Python interpreter
that runs these robots
so the students can write in Python, not in C.
The hardware works very well.
I did a last minute change to the communication system
that didn't break everything.
That was great.
And we had some good competition.
So it was beautiful.
This means it'll never happen again.
But it was wonderful.
So that's my point.
I'm gonna stop there.
There's a video to play.
Let's go, let's play the,
cue up the robot video.
So here's our old robot platform.
These robots are designed for research.
They're fantastic, but they're frighteningly expensive.
So I wanna get robots to everyone.
And the way to do that is to build this new platform.
This is the Vice R1 Mobile Robot.
And it is advanced enough for multi-robot research.
It is robust enough for undergraduate and graduate education.
And it is cheap enough for K-12 outreach.
So these are robots that we wanna get to everyone.
And we want them to be as popular
as scientific calculators.
So this is the wall of parts
that we've slowly built up over time.
So we have almost every single part
that goes on one of these robots.
We wanna see all the lights flashing in the system
to make sure every single light is working.
The antennas are just like the way your phone works.
We send information over the antenna
and everybody receives the same information.
But their second form of communication is infrared.
It's directional.
So the two robots are going to send IR information
similar to the way a TV remote works.
The total parts count for this robot
is right around nine assembled parts.
Once you have all the parts.
It's actually 14, I miscounted.
This robot is simply enough
that we're gonna offer it first as a kit form
in the upcoming year so that anyone can go
and order these things and build them at home
or build them in your lab or build them in your school.
We put them through a class last semester of Freshman
and I was kind of in the head TA
so I was responsible when all the robots had a problem
and I've saw ones that I was almost certain
were dropped in a pool of water at one point
and they still were able to work.
My work is on multi-robot systems.
You can call them swarm robots.
So I'm not interested in building one robot or two robots.
I start to get interested when we talk about
100 or 100,000 robots.
So in order for me to do that in my lab,
I need to have a robot platform
that is small enough and cheap enough
for me to build at least hundreds of them.
They're following this blue robot right now.
Everyone that is following the blue
is lower than the blue right now.
With following, it's a good way to have the robots
navigate more complicated obstacles in a follow.
There are many applications from multi-robot systems.
Recently, we just had an oil spill in the Gulf of Mexico.
So it would be fantastic to have a thousand little robots
swimming around the Gulf
identifying where the oil actually went.
Earthquakes, we've had earthquakes,
we've had tornadoes, we've had tsunamis.
Having robots that can penetrate the robot pile
of a building, look for survivors.
Identify is a power on, is the power off.
These are things that robots can do far better
than people can.
This is a flocking behavior.
So their goal here is to actually just
match each other's orientation.
So there's no leader this time.
So it's pretty much like just a cluster of robots
that are all trying to make some sort of smart decision
on what they wanna do.
And the goal of clustering is the even-numbered robots
will go, will turn red,
and the odd number of robots will turn blue,
and we'll see if we can get them to cluster.
But they'll stay together in a cluster.
I can try to separate one and say,
stop clustering together.
And eventually they'll all move towards that robot
and they'll form a new cluster.
Here's our 2003 design.
It's a full, sophisticated resource platform.
Here's our 2012 design.
It does almost the same stuff,
except it's one-tenth the price.
Rice University, the R1 mobile robot.
Robots for everyone.
Thank you.
So I'm actually a minute and seven seconds over time.
I've been told I can take a single question,
so let's have it be a really kick-ass question.
Where's the mic? There we go.
Are you working with Dean Cayman and First at all?
Do you know First Robotics?
No.
No.
No.
No.
No.
No.
No.
No.
No.
No.
Very cool.
First Robotics.
Are you working?
Are you in contact and working with them?
Are I working with Dean Cayman and First VerBox?
No, I'm not.
But I'm a huge fan of what he's done in particular,
he looks at the problem and said
this is not a technical problem.
We have a social problem.
We need to rock starify science,
technology engineering, math and math,
so that it's cool to be a geek.
So, and the robots are just a tool to make that happen.
And it's, I mean, they sold out the Georgia dome three years ago.
I mean, it's fantastically, so I'm a huge fan.
Well, that's it.
Thank you.
Thank you so much, Professor James McClurkin.
Great job.
I'm really glad you got to do the demo.
