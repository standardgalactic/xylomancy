UML diagrams are pretty useful for visualizing aspects of your code.
Float your hearts for visualizing user interactions, class diagrams to explain the structure of your code, and so on.
The problem is, they're painted draw.
I don't like using these generic drawing tools where you have to choose between millions of different arrows to find the right one,
and when you draw a box and you have an arrow that you think is attached to it,
but then you move the box and the arrow doesn't move along, it's just really frustrating.
And for this reason, I've not been using UML diagrams very much.
But recently, I discovered a tool called Mermaid that I think is going to change this.
So in today's video, I'm going to talk about four types of diagrams that I think are very useful for illustrating your design,
and then I'm going to show you how to draw them very quickly in Mermaid without all of the frustrations.
Now, before we start, I have something for you.
It's a free guide that's available at ariancoats.com slash design guide.
It contains the seven steps that I take when I design software from scratch.
So I hope that ultimately this is going to help you make better design decisions.
So ariancoats.com slash design guide.
I've also put the link in the description of this video.
Now, let's dive into UML.
When you install VS Coding, you start editing markdown files.
Mermaid is not supported out of the box.
For example, here, I can open the preview of this particular markdown file.
And if I try to add some mermaid code to this, like so, and let's say we want to add a simple flowchart like this,
I'll talk more about the exact syntax later on the video.
So I see it simply displays the text right now.
In order for this to actually display the mermaid rendered chart, we need to install plugin in VS Code.
And the one I'm using is, I'll scroll down here, is called markdown preview mermaid support.
Let me close this preview here.
I've disabled it now to show you what happens if you don't install this.
But if I enable this and now I go back to the markdown file, let me open the preview again.
Now you see we get the actual mermaid diagram.
The problem with using mermaid in VS Code in this way is that there's no easy way to export this to a PDF.
There is an extension that allows you to export these previews as PDFs, but unfortunately, it doesn't work with mermaid.
If you want to be able to export these diagrams as PDF files or images or whatever,
then you can actually use mermaid.live and that's this site.
And there you can basically edit your mermaid code right here.
Then it's going to create the diagram right here.
And then they have a couple of these export options.
You even have different themes.
So this is the default dark theme that I can change it to.
Well, let's see cupcake.
That sounds happy cupcake.
Ooh, I'm not sure I like that.
There is corporate for the, you know, serious diagramming needs.
We have a couple of our valentines.
Oh, that's nice.
That's soon.
Actually, I should get something for my wife.
There's a couple of more here.
We have black, which is just simple black and whites.
There's wireframe.
Oh my is this comic sans.
I think it's comic sans.
Okay.
I have to get out of here.
Okay.
Close call.
All right.
So this is not an alternative.
So you can write your mermaid diagrams here and then you can simply export it as PNG or SVG or I don't know what this is.
Some other format, but the reason I like to do it in VS code is that I can integrate these diagrams directly within my markdown file.
So for example, if I write a feature document where I want to talk about a new feature in our platform in my company, then, you know, I write it down here.
I can add some diagrams to clarify things and it's all works in a simple text format, which I really like.
So I want to go through a couple of options in mermaids and show you a couple of things that you can do with it.
And it can do lots of different things, lots of different types of charts and diagrams.
But there are a couple that I find particularly useful.
And the first one that I want to talk about is the flowchart.
And you already see an example of the flowchart right here.
So flowchart is basically used for modeling flows.
It's often useful if you want to model, let's say the way that a user interacts with your application and you can identify the various paths through the flow that the user is taking.
So for example, what you could do, let's say we create a flowchart like this.
You can now add different blocks in here with arrows between them and that then models the flow or the path that the user takes.
Flowchart also has some options to control the way that it looks.
So now we're going from top to bottom, but you can create a flowchart that goes from left to right.
So it's really easy just change it in text and it updates the diagram on the right or bottom to top if you want that.
So there's a couple of different options here that you can use.
So let's stay with the default one.
And this is the basic way that you describe a piece of the flow and you can add more of these.
For example, I could also add a second one.
Let's say we have a start block and that goes to a like so.
You can also put semicolons behind them if you feel so inclined.
These are the names of these different blocks.
You can actually also change the label on it because now it simply shows the name and S doesn't really tell us very much.
So one thing you can do is simply rename the block to something like start.
But what you can also do is add a separate label like so.
And then you refer to this block in other parts of your flowcharts by using the S character.
But then this is the label that's displayed in the block itself.
That's what you see right here.
So we have no flowchart that goes from start to a let's say we model a login flow.
So a is enter your email address, right?
And then it goes to B.
There's different ways in which you can display these blocks.
So here I'm using square brackets.
So that gives me this basically quite boring rectangle, but you can also add rounded corners like so.
And now this block has rounded corners.
I like using this for most of the blocks in my flowcharts.
And then it goes to B.
And let's say B is a check whether the user already exists or not.
And by using the braces like so, you can create this kind of diamond shape.
And this is often used for choice.
Like, is this an existing user?
We can add a question mark here.
And now we can split the flow into a yes case and a no case.
So let's say it's not an existing user.
So then we need to go to a C state, which is enter name like so.
And I have to make this a bit smaller so you can actually see what's happening.
So like this.
And of course, we now need to put a label on top of this arrow to indicate that this is the no case.
And that you can do by adding no behind the arrow like so.
So I write no here.
Now you see the arrow gets a label no.
So if it's not an existing user, we've asked for the username.
Then we can continue the flow.
So we go from C to D and we want the user to accept the conditions.
So that's another choice block like this.
And then if the user says no.
So then this is basically what you get.
Let me make that again a bit smaller so we can see what's happening.
Or perhaps I could change this to a left to right flow chart and that will be a bit easier to see like so.
So enter email address is an existing user.
No, then we enter the name.
We accept the conditions.
No, we go back to enter your email address.
If you do yes, then we can go to the end state and let's put a label ends over there like so.
And what we do in the end state is send email with a magic link, right?
And then the user can use that magic link to log in like so.
And then there's a couple of other cases like what happens if it is already an existing user.
So if the case here was yes, well, in that case, if it's an existing user.
So from B and the answer is yes, we can go directly to E.
And then it also sends an email with a magic link.
And I think it somehow removed the no case for the accept conditions question.
So let's add that back here like so.
And then we go back to A.
There we go.
And then finally, what we can do is that we have the E state and that goes to the end state so that we end up in an end state right here.
So this is the flow chart that we get them.
Let's try the top to bottom again.
And then this is what you see.
So you can see it's quite easy to create these flow charts right here in mermaid.
The disadvantage of using something like mermaid is that you don't have a lot of control over where these blocks in the diagram are located.
For example, perhaps it would be nicer to have this send email with magic link block aligned more to the left.
So this yes arrow right here could actually go through this place instead of going straight through the no arrow.
It might be a bit easier to understand the diagram in that way, but still I find this way of drawing diagrams much faster than using a real drawing tool
because I can just write it down in text and it appears right here on the right side of the screen.
So that's a flow chart.
So flow charts are very useful for modeling these kinds of flows and modeling alternative flows and defining what should happen in that case.
And it's helpful to have these kinds of visualizations in your design documents.
Now flow charts really focus on modeling the flow, which makes sense because they're flow charts.
But sometimes you want to do something a bit differently, especially if you have, let's say, multiple participants in a particular operation.
That also actually happens a lot in authentication flows where you might have a client that wants to authenticate itself.
You have a server that needs an authenticated client and you have an authentication provider that does the job of authentication.
So then you have three parties that are part of, let's say, a flow or a sequence to be authenticated.
And flow charts are not really that helpful for that because they don't really indicate who is where in which part of the flow.
This is really more suited for how a user would do things.
And if you want to have the participants in a certain operation to be shown more explicitly, then something like a sequence diagram is actually quite helpful.
Let me show you how that works.
So I'm going to add a sequence diagram here right in mermaid.
And then we're going to have a number of participants.
So for each participant in this sequence, I'm going to define it right here.
And let's say we're going to model this authentication flow.
So we're going to have participants, clients.
We're going to have a participant OOF provider, which is the server that handles authentication requests.
And we're going to have a participant server that needs an authenticated client in order to do things.
So what you can do now is model the various steps in the sequence of authenticating and getting something from the server.
So the first thing that you're probably going to have is something like the client that's going to talk with the OOF provider to get authenticated.
And communication in a sequence diagram, I actually should add the A here, is done by using this type of error.
So we have the client and then we have the OOF provider.
And what this is going to do is request an access token like so.
And this should be in I as well.
So then this is what you get, right?
We have the client, OOF provider in the server and the client requests an access token.
And we can add more operations in the sequence.
So the OOF provider like this sends an access token back to the client,
assuming that the client provided the right credentials.
Then the client has the access token.
So the client goes to the server and requests a resource.
Then the server has to verify that the client is properly authenticated.
So the server talks back to the OOF provider to validate the token.
Then the OOF provider sends back to the server that the token is valid.
And then finally, the server goes back to the client and sends the resource.
And there we have a basic example of a sequence diagram in Mermaid.
The advantage of using a sequence diagram instead of a flowchart like we had before
is that it's really clear what the roles are of the different parties in this sequence.
So we have the client, OOF provider and the server,
and this really visualizes very clearly how they communicate.
So for these kinds of operations, a sequence diagram is actually quite helpful.
There's a couple of other things you can do to clarify when the operation is handled by which party.
So what you can do is activating and deactivating participants in the sequence diagram.
And that's then shown by adding rectangles to these lines.
So for example, what you can do is when the client sends something to the OOF provider right here,
we can activate the OOF provider.
And once the OOF provider sends things back to the client, we can deactivate the OOF provider again.
And now you see we get this little square here to indicate this is when the OOF provider is active.
And we can do that also for the server.
So let's say we activate the server here and here we activate the OOF provider again.
And here we deactivate the OOF provider.
And finally, we also deactivate the server like so.
And then this is basically what you get.
Now, I'm not sure why I'm seeing this twice.
Did I do something weird? I don't know.
For some reason, I'm seeing it twice.
I'm not sure why that is.
Maybe I should reopen the preview.
Oh, okay.
So it was apparently a rendering issue.
All right, so this is your basic sequence diagram.
One more thing that you can do is add numbers to these things.
So often you may want to refer in your document to certain steps in the sequence.
And it's nice to be able to add numbers to this.
And sequence diagram has a auto number feature.
So you're just right here, auto number like this.
And now it's going to add these numbers so you can, in your text, refer to step three or step four in the sequence.
And then you can easily find it back in the diagram.
So that's a sequence diagram.
Also quite helpful.
And they also like that it's really easy to create this in Mermaid.
So next type of diagram that I want to talk about is the famous class diagram.
This is probably what UML is most known for.
And this is how you create it in Mermaid so we can have a class diagram.
And then you add your classes and your relationships below this line.
For example, let's create a class that's called order.
And it's going to have, let's say, an order status like so.
So it has one instance variable of type order status and what that is, we'll look into that later.
But this is your basic diagram containing a simple class.
Personally, I don't use class diagrams all that much.
The main reason being that I'm moving more towards functional approaches and a class diagram
doesn't allow you to define functions as separate objects.
Now you could, of course, create something here you call the class, but then it's actually a function.
But well, the question is whether it really makes a lot of sense.
Actually, there's another diagram type that I do use quite a lot that I find quite useful.
And I'll talk about that in a minute.
But let's first look a bit more closely at class diagrams.
They are quite useful if you want to model things like design patterns
and visualize how design pattern works.
And when I write my applications, I generally don't create class diagrams.
I just create the classes directly inside the code.
And for me, that works just as well.
So class diagram, there's a couple of different things you can do in a class diagram in Mermaid.
One thing you can do is let's say this order status is an enumeration.
You can add a second class.
Let's call that order status.
And order status has a few options.
So we have, let's say, failed, pending and paid.
You can indicate that this is an enumeration by using this in Mermaid.
So now it's an enumeration and we add a couple of states here, like failed, pending and paid, like so.
So that's our order status.
And let's say we have another class that is a payment processor that we use for processing payments.
So we have a class, let's call that a payment processor class.
And we want this to be an interface or in Python protocol class or an abstract class,
because we're going to create subclasses for specific payment processors.
So Stripe, PayPal, et cetera, et cetera.
And in order to indicate that something is abstract or an interface, you write this in Mermaid.
And then what are we going to have?
Well, we're going to have an API key to connect to that particular processor.
So that's a string, API key.
And we're going to have a method to connect.
So that gets a URL and perhaps some JSON data, whatever.
And we're going to have a method to process a payment.
And that's going to get an order.
And that's going to return the order status.
So this is our simple interface for a payment processor.
Many object-oriented programming languages have a mechanism to protect access to particular parts of class.
So you can make members private or protected or public.
Python doesn't have it, but in your class diagram, it's often useful to indicate this in some way.
So you know which parts are going to be internal and which parts are going to be used externally.
So for example, in the case of the payment processor, well, probably the API key,
you don't want others to access this.
So you could make it private.
And making something private, you do that by putting a minus in front of the method name.
Processing the payment is probably something that's going to be public.
So you can put a plus in front of this.
And connect is probably something that's going to be internal,
but you might want to override that method and call it from the subclass as well.
So you could make it protected.
And the protected member we indicate by using this hash.
That's the kind of standard way to do it in UML.
And then order status, we can also make that public like so.
So these are the main classes in this particular example.
We have an order that has a status and there's a payment processor that can process payments of an order.
Another thing you might have is a customer.
So let's also create a class customer and the customer is going to have a name like so.
And that's also going to be public.
And that's probably going to be address information and et cetera, et cetera.
But let's leave that out for now.
So we have our four different concepts in the class diagram.
And now we can start modeling relationships between them.
And there's a couple of relationships that are in particular important.
We have inheritance relationships.
We have composition relationships.
And we have aggregation relationships.
So these all look different and they are actually also different.
Although composition and aggregation are really closely related.
So inheritance means that we have a class and a subclass relationship.
For example, here we have the customer class, which has a name,
but I could create a, let's say, private customer and a business customer.
So we can model a relationship here, an inheritance relationship that goes from customer to,
and this is how we indicate inheritance in Mermaid, a private customer.
And you also see that this inheritance relationship appears here directly in the diagram.
And let's do the same thing, but then let's create a business customer as well.
So we have the customer class that can have a private customer or a business customer subclass.
So that's inheritance relationships.
And we can do the same thing, for example, for the payment processor, like so.
And let's also create an inheritance relationship and we will have a stripe payment processor.
And we're going to have a PayPal payment processor, like so.
So now we have our interface payment process that has implementation subclasses,
stripe payment processor and PayPal payment processor.
You can put these method definitions also again in this class.
You simply can add the stripe payment processor class here
and add any instance variables or methods that you like.
So what about the relationship between, let's say, the order and the customer?
Because every order should have a customer associated with it.
There's two options that come to mind.
There is composition and there is aggregation, but what's the difference exactly?
There's actually a more generic term in UML that's called an association
that also describes a relationship between two objects.
And aggregation and composition are basically special cases of associations.
In both of these cases, it means that an object maintains a reference to an object of another class.
But the difference is that aggregation is a relationship where the child or the object that you have a relationship with
can in principle exist independently from the other object, which is the case here.
We could have an order that has a customer, but if we delete the order,
we still might want to keep the customer and the customer can actually have multiple orders over their customer lifetime.
So the customer can exist independent of the order.
And the way to model this in Mermaid is using this type of error.
So we have an order and then we write the relationship like so.
And now you see that customer is actually attached to order via this aggregation relationship.
If you turn this into a composition, then you would use a star instead of an O.
And then this will be colored in and that means it's a composition.
But actually an aggregation makes more sense here because customer can exist independently from the order.
Suppose you have a car class, then you could have a composition of the car with the engine,
which is what you see here on the right.
And here composition makes more sense than aggregation because in principle the engine is simply part of the car.
There is no reason that an engine is in multiple cars or something.
So a car really has, it contains an engine and the child, the engine doesn't normally exist independently of the car.
If you're building software for a car repair facility, then maybe you would have engine be a separate part of the car.
So it depends on the application that you're building, obviously.
But I hope you can see that there's a difference between this type of relationship, customers and orders and cars and engines.
So this is aggregation and this is composition and they're both specific versions of a more generic relationship, which is called association.
Again, I don't use these class diagrams very much myself because I rely less and less on classes and more functions nowadays in my code.
But still it can be useful to draw this out in text in mermaids really easily like this.
So the final type of diagram that I want to talk with you about and this one is actually quite useful.
This is called the entity relationship diagram and we write it in mermaid like so ER diagram.
And what I like about the entity relationship diagram is that it's a bit more generic than the class diagram.
It simply talks about concepts that are related in some way.
And this is actually useful if you, let's say you're trying to build software in a particular domain and you want to create a model of that domain.
You want to understand how things are related and what the main concepts are in that domain.
So what you do is you create an entity relationship diagram that describes this domain.
And then normally what you do in this kind of diagram is that you have the concepts and the relationships between the concepts.
And often there's kind of like a verb associated with each relationship.
So for example, what you could have is a customer.
I'm kind of sticking with the customer order example and customer is related to an order.
So we have the order and then between customer and order we have a relationship and in an entity relationship diagram.
This is how we do it.
And then we write a verb behind it.
And as you can see this relationship, it looks a bit complicated.
What this actually means is that this identifies how many things of something are connected with something else.
So in this case, a customer plays an order.
What this means right here is that the order is going to have exactly one customer.
So one order cannot have multiple customers.
And if you go to the mermaid documentation, so let me scroll down for the entity relationship diagrams.
So these are the options for the arrow.
So this means zero or one.
This means exactly one.
This means zero or more with no upper limit.
And this means one or more.
And these are kind of the most commonly used relationships in an entity relationship diagram.
So if we look at this example, so you can see that we have one customer that places zero or more orders, right?
So a customer can exist independently of an order.
And we can add more relationships.
So we could also have an order.
So one order is going to have one or more line items.
And that's a contains relationship, right on order without any line item whatsoever is not a valid order.
And then what you can do is also add some attributes.
The main thing here is that we don't really care if customer is a class or if it's a module containing a bunch of functions or whatever.
It's a concept and we're modeling the concepts and the relationships between the concepts.
So that makes a difference from a class diagram in UML.
Now you can add instance variables or let's say data that belongs to a particular concept.
So we could have a customer and perhaps we want the customer to have an ID.
And we want the customer to have a name like so.
And you see it also appearing here on the right and we can do the same thing.
Like for example, the order, it might have an ID and it might have a status, right?
For being paid or not.
And line item similar.
So we have line item that might have some kind of code.
It might have a description, a quantity and a price.
So the anti-relationship diagram still allows you to associate data with concepts to kind of indicate how concepts are structured.
But it's not about classes, it's really about concepts and how they're related.
And this is a diagram we also like to use from time to time just to give a global overview of how things fit together.
So I hope you enjoyed this video and that it has given you some ideas for how to use Mermaid to write better software design documents.
If you enjoyed it, give it a like, consider subscribing to my channel if you want to learn more about software design and development.
Thanks for watching, take care, see you next time.
