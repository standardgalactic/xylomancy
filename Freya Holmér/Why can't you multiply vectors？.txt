All right. So, math and cats. Enough said, right? A little bit first sight.
So, just kidding. Freya is an independent game developer and educator, and today she's going to talk about a topic that, to some, is the stuff of nightmares and to others, like myself, is perhaps a little bit more the stuff of dreams and all the squiggly lines in between.
So, in her talk, she's going to hopefully inspire you all to consider the math underlying our games a little bit more magical.
Thank you.
Okay. Hello, everyone, to probably the most technical talk. I'm going to teach you all about set theory and quaternions.
But, so, this talk is called, Why Can't You Multiply Vectors?
So, I've been doing a lot of things within game development and math for a long time now. I started out as an environment artist, and then I moved into, like, level design, and then I eventually learned programming, and I got really excited about that.
And then I got into math, like, very heavily the past, like, two years or so.
And now I've sort of, like, dived so deep into math that sometimes the stuff that I talk about, game developers are like, oh, this just seems like useless, abstract nonsense.
Like, why are you even doing this? Like, I just want to make a game. I just want to copy-paste my math from the Internet and just, like, paste it into my game so that it works.
I don't care about the underlying stuff. But today I want to talk about that underlying stuff anyway, so you're going to have to suffer through that.
So, there's a bit of a schism sometimes between math and programming.
So, I sent this tweet at some point on 9-11 of all days, so this is my personal 9-11, because this started a war between programmers and math people, which was really weird.
But, like, all the math people were like, what are those for loops? That makes no sense.
Like, all of these symbols that look so complicated and weird. And then you had all of these programmers that were like, what are those weird symbols?
Like, there's no context for this. There's nothing describing what that does. You just have to know what that does, right?
But so all I really wanted to do was kind of, like, draw this, like, simple analogy for people who might not know that much math to just be like, okay, so these summation symbols is just adding things up in a for loop.
And the capital pie is just a product. You're just multiplying things together.
So, that was interesting, because it kind of illuminated to me that there's this big schism or, like, big divide, but I kind of want to merge.
And I see that as sort of my job in a way of trying to bridge that gap.
A little bit about me. I probably don't care that much.
I've co-founded a studio called Neat Corp, made a game called Budget Cuts and Budget Cuts 2. We're a studio of like, seven, very awkward size.
Made some plugins for Unity, one called Shader Forge and one called Shapes.
One is a shader, editor, and the other one is a vector graphics plugin that I'm also working on a spline plugin right now that is not released yet.
I also make YouTube videos, so I made some videos about tech art, math, and tool development, mostly within Unity.
And then I also made some YouTube videos about Bezia curves and splines.
All right. So, I'm a tech artist. That's kind of the center of what I do.
It's kind of the intersection of art and programming, and math kind of comes in there to do all of these kinds of weird, funky, techy visual solutions to problems in games.
So, a lot of the stuff I do is just like trying to work out things like how do you render lines in a way that looks nice?
Because, you know, you have like a naive implementation, might look like garbage, but if you like spend some time thinking about it, you can make something that looks much, much prettier.
And so, a lot of the work that I'm doing, as of late, has to do with splines. This is an excerpt from my video.
It's just a lot of splines. I've just had splines in my head for like the past three years, and I can't get them out.
And so, here I am. Recently, I've been getting into like quaternionic splines, or just like splines in quaternion space to interpolate orientations.
And some torsion visualizations. I don't know. I have a bunch of things related to this that I do.
That's a dodecahedron. Anyway, so, in this talk, we're going to explore why can't you multiply vectors?
And I think as with any other talk, I think you should always start on the second slide with like some common criticisms of the title of the talk.
And so, some common criticisms might be, yes, you can. It's called a dot product. Like, what are you talking about?
Or you might say, well, yes, you can. It's called a cross product. Like, why do we mean you can't multiply vectors?
Or you might say, what do you mean? I multiply vectors all the time. This could be early signs that you might be a shader programmer.
And no, you're actually not really multiplying vectors. You're going to find out why.
So, the anatomy of a vector, just to go through what we're actually talking about. We usually write it in bold letters, and that's a vector v.
It has three components. If it's a 3D vector, realizing I'm forgetting to breathe, because I have so much to talk about.
So, we have three components. X component, the Y component, and the Z component. Usually written in the parenthesis, right?
And you can also write it as a column matrix if you want to, which can be useful sometimes, because you can, like, write longer lines for each component.
And this kind of presumes a basis, as in the basis vectors of our coordinate system, right? We have an X axis, we have a Y axis, and a Z axis.
And they're all orthogonal to each other, and they have a length of one. So, they're orthonormal, is what we call it, in the industry.
All right. So, products. We obviously know about the dot product. Everybody's heard about that, and it's some kind of multiplication, right?
You have your vector a, your vector b, and then you write a little dot in between.
And then the dot product is basically multiplying each of the components, and then adding them all up into a single scalar value.
So, it's sometimes called a scalar product. You can also write it using these summation notations.
So, it's like dimension independence. So, if you want to do the dot product in any dimension, you can use that formula.
I hope it's readable and not too small.
And then we have the cross products. The cross products does not return a scalar. It returns a vector.
So, the cross products, we have this kind of complicated formula.
We've just taken out very specific components for each of the X, Y, and Z components of the final output vector.
That's a cross product. And then we have the 2D quote-unquote cross products, which is illegal.
Don't tell your math teacher that you've been using a 2D cross product because it doesn't really exist,
but it's a very useful thing in games to have.
And that's basically a cross product where you just set Z to zero, and then whatever's left is your 2D cross product.
It's also sometimes known as the perpendicular dot product, or the exterior product, or the determinant, or the wedge product,
or the anti-symmetric product. It has many names. I don't know why. It's annoying.
And then finally, we have the Hadamard product, which is the shader programmer product,
where you just say, well, just multiply the components. Like, just do that.
Like, why not? Just take every component, multiply them together, and that's your new vector.
So, that's a component-wise product.
Okay. So, we have the dot product, we have the cross product, and we have the Hadamard product.
But what about the product? Like, just smash them together.
No goddamn symbols in between, just the canonical products, right?
Because usually, you don't write anything in between. If you want to write 5x, you don't have to write a symbol there.
In math, you just have no symbol, because multiplication is kind of the canonical main operation, right?
So, I think a lot of people, me included a few years ago, I was just like, just do it component-wise.
Why are you overthinking this? Like, if you multiply a vector by a scalar, like a vector, like two times a vector A,
you just multiply each component by two, right? So, that's component-wise.
If you divide it by two, that's also component-wise.
If you add two vectors, that's also component-wise. We add the x-axis together, we add the y-components together,
and the z-components together, also component-wise. Subtraction works exactly the same way.
So, why would multiply not just be the Hadamard product? You just take each component and multiply them together, right?
Just don't worry about it. Just go ham. Just multiply all your vectors and don't care about the rest. It's going to be fine.
But it's not that simple, unfortunately.
So, I'm going to take you all back to elementary school.
We're going to talk about the natural numbers. So, the integers starting from zero and up.
So, all of the positive integers and usually zero as well. That's when you count things.
So, we're going to count snail cats. So, here's a snail cat.
So, let's say you have two snail cats, and then you add three snail cats.
How many do we get? We get five snail cats. Isn't that amazing?
So, two, three, and five are all natural numbers. We can count items using natural numbers, right?
So, let's try multiplying. So, two snail cats multiplied by three snail cats is six snail cats. Great.
That's perfectly fine. Just one more.
So, we have two snail cats, minus three snail cats, and then we get...
Well, that's not actually a natural number anymore, right?
Like, two minus three, now we get something negative, and that's not within the realm of natural numbers.
Like, negative is not a natural number, right?
And so, in a very technical sense in math, we usually say that natural numbers are closed under addition and multiplication,
but it's not closed under subtraction, because it's possible to leave the realm of natural numbers if you subtract, right?
Because two minus three, not a natural number.
Okay. So, we can talk about numbers of different kinds, right?
Natural numbers, we can add them, but it's closed under addition.
We get a natural number if we add two natural numbers, same with multiplication, but not subtraction, because then we need the integers.
The integers, they have these technical symbols, the blackboard bold.
So, natural numbers are n, integers are z, for some German reasons, I think.
I don't know what it is.
So, then we need integers, and that includes the negative numbers, right? The negative integers.
Okay. So, integers are closed... Right. So, subtraction of natural numbers gives you integers.
Integers are closed under addition, multiplication, and subtraction, but not under division, right?
Because if you do one divided by three, that's not an integer.
Again, we've left the realm of integers, and we've gone into the realm of rational numbers.
So, rational numbers is an integer divided by another integer.
So, with division, with natural numbers and integers, we get a rational number.
We can also do exponentiation.
So, if you take like a natural number, like two to the power of three, that is also a natural number.
So, we stay with the natural numbers there.
So, it's also closed under exponentiation.
But integers are... Again, if you do integers and you do powers on those,
so like three to the power of negative one would also give you a rational number.
All right. Rational numbers, closed under addition, multiplication, subtraction, division,
you get a rational number out of that. You don't change the kind of number.
Exponentiation gets a little bit more complicated.
Because you could do to the power of 0.5, which is a square root,
because 0.5 is just one over two.
And then we need the real numbers.
So, the square root of five can't be expressed as an integer divided by an integer.
But the real numbers are closed under all of these four operations.
But then we might want to go to the next step.
Like, what about exponentiation? And here's where we enter complex numbers.
Because now it's getting a little bit weird here.
Because that's just an entirely different type.
Because a real number is just all the usual numbers we're familiar with.
But the complex numbers can express things like the square root of negative five.
In real numbers, we usually say that you just can't do the square root of a real number.
But with complex numbers, we have a way to express that.
And complex numbers are algebraically...
No, sorry. So, complex numbers.
How many of you know what complex numbers are? Raise your hand.
Quite a few. Okay, so I can sort of speedrun this one.
So, let's say we have a thing called i.
And if you square i, you get negative one.
It's just an algebraic symbol. It's a variable like any other.
But the only thing we know about it, we don't know its contents or its value,
the only thing we know is that it squares to negative one.
In other words, if you multiply it by itself, we get negative one.
And this is called the imaginary unit.
And this is just axiomatically true.
Which is math speak for, because I told you so, it is true.
And we just have to accept that, right?
Okay, so how do we do math with this?
Well, if we have three i times two i, that would be six i squared.
And since i squared is negative one, this is equal,
because we can apply this rule of i squared equals negative one,
then this becomes negative six.
Okay, another example, two i times four i minus three, we just distribute that.
And then we get eight i squared minus six i.
Again, i squared is negative one, so we get negative eight minus six i.
And we can sort of think of these numbers as having two parts to them.
The first part here is the real number.
This is just a regularized number that we use all the time.
And then we have a coefficient of i.
So this is called the imaginary part.
And you can kind of divide these up into these two separate categories.
And that's what's called a complex number.
So that's when you have a regular number, a real number,
and then some coefficient of i.
Okay, so let's say we have a complex number z.
Then we can interpret it similar to a vector,
because a vector also has two parts, right?
If you have a 2D vector, you have an x component and a y component.
Similarly, we can write complex numbers the way we write vectors,
just in parentheses, right, where we have the real part and the imaginary part.
And now the basis is just the value one and i,
because those are the things we multiply each of the components by
in order to get the final results, right?
So you can kind of see the similarity between complex numbers and vectors.
They both have two components, well, for 2D vectors.
And so you can define a coordinate space using vectors.
You have an x-axis and a y-axis.
You can also just do the same with imaginary units.
So you can have a real axis for the real numbers
and a vertical axis that's the imaginary axis.
And then for writing coordinates,
we have exactly the same thing we do for vectors.
So for 2D vectors, we have maybe this coordinate would be one and two.
So one on the x-axis, two on the y-axis.
We can do the same for the complex numbers.
So this is called a complex plane.
And it's just the same.
It's just one and two.
It's just that we're using a different basis.
The cool thing about complex numbers
is that we can actually just write them as a formula,
like the way we did before, just one plus two i.
It's just one plus two i.
And so this is really useful.
What's useful about this one is that we can do algebra with this.
If we have this formula, we can just add them together
or multiply them and just see what happens, right?
And so if we wanted to find out, like, okay,
what happens when you multiply two vectors?
Well, if complex numbers are vector-like,
we can figure out what happens when you multiply two complex numbers.
And maybe that's going to give us, like, some answers along the way
for how to multiply vectors together.
So we can just try to go through that process.
So, like, let's say we have two complex numbers,
a complex number a and b.
We multiply those together.
So we just write them out as equations.
And as usual, we just distribute or, like, expand the whole thing.
Then we might notice that, oh, this part has two i's in it, right?
So it's i squared, which means that it's equal to negative one.
So we multiply that whole thing by negative one.
And so now we can see that this part,
they share a common factor of i, so we can factor that out.
And now we get a complex number in the end.
So we had two complex numbers.
We multiply them together, just regular multiplying,
no dot products or cross products or anything.
We just multiply them together.
And in the end, we get another complex number,
because we can express this as a coefficient of just a real number
and a coefficient of i.
So what we can say is, again,
complex numbers are closed under multiplication,
because we give two complex numbers
and we get a complex numbers out of it.
So if you want to implement this in code,
like, this is how you would write that.
The actual symbol of i is never in your code.
It's just completely not there.
The i is only there to, like, help us define the algebraic operations
that we do using this.
And so we had our formula here, right?
So we're calculating some sort of real part
from two complex numbers.
And then we get the real part here.
And then we calculate the imaginary part
and we get the imaginary part.
And then we'll return a complex number.
So we only ever store the coefficients.
We don't ever store, like, the weird i symbol, right?
So the reason we can do this
is because it's closed under multiplication.
That's why it returns a complex number.
Okay, so what does this look like?
Because now, if we interpret this as a vector,
we should be able to visualize this,
because we can interpret complex numbers as 2D vectors.
And this is what it would look like.
So here we have two vectors, the red one and the blue one,
and we multiply them as complex numbers in the complex plane.
And the green vector is the result.
And you might be able to tell that
it has something to do with, like,
sort of adding the angles up, right?
It's kind of like taking the angle of one of the vectors,
adding it to the other angle.
And when it's normalized, you can see that the vectors
have the same length.
Like, the green one doesn't get longer or shorter
than the red one or the blue one.
And so this one, while it's not a vector multiplication,
it's still complex number multiplication,
we might be able to apply some of the same strategies
for figuring out, like, what happens when you multiply vectors?
Okay, so now we figured out that complex numbers
are closed under multiplication,
and in fact, they are closed under all of these operations.
And it's the only, I think it's called a complete algebra.
I think it's actually the only complete algebra
within math, which I think is kind of cool
that it's closed under all of these operations.
All right, but what we really want to figure out is vectors, right?
That was the whole point of this talk.
Like, why can't we multiply vectors?
Like, this should be possible.
I really want to try to do it, you know?
So if we go back to this,
we could write our complex numbers as a real part
plus an imaginary part times i.
So why can't we do that with vectors?
We have an x component,
we multiply it by a symbol representing our x-axis,
and then we add the y-component
multiplied by a symbol representing the y-axis.
So now, if we use this,
again, we can do algebra with this, right?
Like, now we can actually just do it ourselves.
Instead of just listening to our math teacher or me,
you can just, like, actually do it yourself, right?
So now we have another way of writing vectors.
In other words, like this, if we have a 3D vector,
we just take each of the components
and multiply them by the symbol representing
each of the three basis vectors of our coordinate system.
Okay, so if we have two vectors, a and b,
these are 3D vectors, we can write them like this.
So these, again, we have the components, we have the axes,
and then we can do some algebra with this.
So let's do something simple,
like multiplying a scalar by a vector,
just a number times a vector.
Well, we have a number s, we multiply that by our vector,
and that just distributes to all the terms in there,
and we can see that that's a component-wise multiplication,
which is what we would expect, right?
Because we've been told that that's component-wise,
and it seems to be, right?
All right, let's try one more.
So addition, so we want to add these two vectors together,
and we can remove the parentheses because they're useless.
And then we can find some common factors here.
There's a common factor of the x-axis.
Again, the red x is just referring
to the abstract concept of the x-axis.
And so we just factor out those axes,
and we end up with this.
And now, again, we have a clean factor of x, y, and z separately.
And so we can say that addition is component-wise,
which is what we were told before, too,
so I guess they were right, so that's component-wise.
Fine.
And if we do this with all of these operations,
we can find that both addition and subtraction is component-wise.
But we haven't multiplied two separate vectors yet, right?
We've only done a scalar times the vector,
but not a vector times the vector.
So what's that going to be?
Are we going to stay within the realm of 3D vectors?
Kind of like the cross product.
The cross product has a stay in there, right?
Or maybe we're kind of like the dot product,
where we just get a real number out of it instead of a vector, right?
OK, so let's find out.
We have the tools, right?
We can just have our two vectors, a and b,
multiplying them together.
And then we have the dot-damn symbols in between,
just a pure multiplication.
And we write it out.
This is the equation we just have to solve for, right?
Like a straight-up multiplication.
There's a lot of terms here,
because you need to multiply these together,
and you get this, which is ax, bx, xx,
which is a little bit abstract.
We don't quite know what that is yet.
And then we just keep on doing this,
and we end up with a lot of terms,
and so there we go.
There we have it.
So this is what happens when you multiply two vectors, I guess.
But now we have a little bit of a problem.
Like this is not a vector anymore.
We can't write this as a factor of x,
plus a factor of y, plus a factor of z.
Like this is just a pile of nonsense, right?
And so we can see that vectors are just not closed
under multiplication.
We don't get a vector out of this, it seems.
And so that's why you can't multiply vectors.
And so thanks for coming to my talk.
Hope this was useful.
And so obviously that doesn't feel enough, right?
Like, okay, we found out that it had this weird solution,
but what is it?
Like, I need to find out.
Like, we have to solve this.
We haven't solved it yet.
It obviously gave us some sort of algebraic structure,
but we need to investigate this.
And actually, like, decode this whole thing,
because there has to be answers in there, right?
Like, I'm willing to go to the ends of the earth
to just, like, approach this whole problem
and just figure out everything.
And maybe we need to take a little bit of a leap of faith
as a treat.
And so we're going to ask an oracle,
a divine being of incomprehensible wisdom.
Oh, great oracle salad.
His name is Salad.
We made a feeble attempt at multiplying vectors,
and we seem to have reached an impasse.
Can you illuminate us?
The divine being contemplates for a second
and says, I see.
A tricky conundrum indeed, but fear not.
The answers you seek are closer than you think.
Don't worry, you are safe now, my child.
I bestow upon you a key to understanding.
Venture forth, and the answers you seek
will be revealed to you.
Now I must nap.
Leave me be.
And the divine being turns into a non-Euclidean manifold.
Okay.
So this is some sort of divine axiomatic truth
we were given.
So what does this say?
So it's a vector, because it's in bold.
So if you multiply a vector by itself,
in other words, square it,
you get the length squared.
Like, the length of that vector multiplied by itself.
But this is not the full answer, right?
This is just what happens when you multiply a vector by itself,
but we want to know what happens when you multiply two arbitrary vectors.
Okay, but let's experiment with this.
So let's say we have a vector with the values one, two, and three,
and we want to square this.
In other words, multiply it by itself.
According to our divine axiom,
it is the length squared.
And the length, we can just use the Pythagorean theorem, right?
We've learned that in school.
We've learned that.
The square root and the square cancel out,
and so we're left with one squared plus two squared plus three squared,
and we get 14.
Okay, so if we square a vector,
we get just a real number, and in this case it's 14.
Okay, so let's explore this some more.
So what about our basis vectors?
Because we have an x-axis, a y-axis, and a z-axis.
They all have a length of one, right?
So what happens when you multiply those two together?
Well, following our axiom,
that should be equal to the length squared,
which is just one squared, right?
And so that's just one.
So if you take our x-axis and multiply it by the x-axis,
we get one out of that.
And all of a sudden, we actually have gotten one key to the solution here,
because all of these terms that are crossed out,
they just evaluate to one.
So those three terms are just multiplied by one, right?
Okay, so now we've started to unravel this a little bit,
so now we can separate out those terms.
That's just a real number,
because those are no longer multiplied by a vector, right?
But we still have a bit of a mess on the lower part.
What the heck is yz and xz and yx?
That's still nonsense to us, right?
So it's actually one more thing that our divine axiomatic rule gives us.
So if you consider the basis vectors, again, mutually orthogonal,
they have a length of one, yada-yada.
If you consider the diagonal between x and y,
just x plus y gives you this white vector, right?
And we know that the length of that one is a square root of two,
because we can use the Pythagorean theorem for that, right?
And so then we can actually make use of our axiom to find out some more about this,
because we can plug in the length that is the square root of two.
So if we take our vector, the white vector is just x plus y,
and we square that, we should get something that is the square root of two squared.
So the left-hand side, we can expand.
The right-hand side, we can just cancel out the square root.
And so we get the expanded form of xx plus xy plus yx plus yy,
and that's equal to two.
All right, but we know that x times x is one,
and y times y is one, right?
We already figured that out.
So now we have this.
We can subtract two from both sides.
So we end up with xy plus yx equals zero,
and if we subtract yx from both sides, we get this.
And this might seem kind of innocent.
Like, okay, sure.
Like, we have xy equals negative yx,
so the components are swapped and negated.
But it means that they're equal,
so we can swap components at will,
and if they're basis vectors, then we can do this.
Okay, so going back to our equation here,
we can see that in the top one, we have yz on the first term,
but then we have zy on the other one.
So what we can do is that we can swap these two terms
and then negate that term,
because we now have this rule of xy equals negative yx.
So we swap them,
and now we have subtraction symbols there instead of addition.
And then we can factor those out.
Do any of you recognize these?
Do these formulas seem familiar?
Like, something seems to have kind of jumped out at us, right?
Like, this is the dot product,
and we never set out to define the dot product.
We just followed the divine command we were given
of, like, the square of a vector is the magnitude squared,
and somehow we got the dot product out of it
as a complete, like, side effect.
And this is the cross product.
The cross product somehow also jumped out of us,
so we just somehow invented both the dot product
and the cross product without ever intending to do so.
We just wanted to know what happens when you multiply two vectors, right?
And so everything stems from this one rule.
But we still have a mystery of, like, what the heck are these, anyway?
Like, yz, zx, xy are just kind of confusing constructs.
We know nothing about them, right?
So let's explore those a little further
and see what happens with those.
So, for example, maybe we can try seeing what happens if you square them.
We take xy squared.
That equals xyxy.
And we know that we can swap two of these and negate,
and that's going to be the same thing.
So if we swap the middle two components,
we get negative xxyy.
We know what xx is.
We know what yy is, right?
So we get negative one times one.
So we know that that's equal to negative one.
So we have a thing that we can square that gives us a negative one.
That's the imaginary unit.
We didn't set out to invent the imaginary unit either.
This is all just still stemming from that one axiomatic rule.
And this actually applies to the other combinations as well of zx and yz.
And so if you mash them together like this,
all of that equals negative one.
And you might have seen this in a different form before.
So i squared equals j squared equals k squared equals ijk equals negative one
is the definition of quaternions.
That's the way quaternions are defined right now.
And so what seems to have happened is that
when we multiply two vectors together, two 3D vectors together,
we get a quaternion, which is written with an h for Hamilton.
So that's kind of weird, isn't it?
And so this thing that we have here has a basis of one, yz, zx and xy.
And that has the exact algebraic behavior of quaternions.
And each component, obviously it's a factor of each of these.
So it's a multiple of each of those bases.
And so that's our quaternions.
And so what about 2D?
We haven't looked at 2D vectors now, so we should try 2D as well.
That's just setting z to zero.
And if we multiply two 2D vectors together, we get this.
And this has a basis of one and xy, which that's the complex numbers.
That still just has the same algebraic behavior as complex numbers.
So this is fascinating and kind of weird that we just went through this algebraic journey
and somehow multiplying vectors gives us quaternions and complex numbers.
But again, what are these things?
What is yz and zx and xy?
We still don't know.
We kind of want to find that out, too.
So if we consider the basis vectors of a coordinate system,
our xy axes, or in 3D, our xyz axes,
they all have a length of one and they're all mutually orthogonal.
So that's our basis vectors.
The things we're trying to figure out now are these like yz and zx and all of that, right?
And these look suspiciously similar to the cross products, don't they?
And the cross product has this behavior of if you have two vectors, a and b,
and you do the cross product, you get something that's perpendicular to both of them.
In other words, it's normal to the plane formed by those two vectors.
And it also just so happens that the magnitude, the length of this green vector,
is the area formed by the parallelogram between those two vectors,
both in 2D and in 3D.
So maybe this has something to do with planes rather than like points in space, right?
So if we have our xy component, that's the only one we have in 2D.
That was the one that was equal to the imaginary unit.
And in 3D, we have yz, zx, and xy.
So what if we conceptualize these bases as planes?
So maybe our xy refers to the plane formed by x and y,
and specifically the unit plane, like a plane with an area of one.
And if we extend this to 3D, there's obviously three planes now
that are the basis planes of our coordinate system.
And so maybe we can call these bases by vectors.
So that's what we're going to name these.
They're not quite vectors, but they're sort of like two vectors forming a plane, you know?
So let's call them by vectors.
They have an area of one, and they are mutually orthogonal.
And so the way to think about this is that if you have a regular vector, like a point in space,
then it's kind of like casting a shadow onto each of the axes, right?
The three components of a vector is just how far along each axis is this point.
And so for by vectors, it's the same thing,
but instead of points along axes, maybe we can interpret this as an oriented area,
casting shadows on each of those three basis by vectors, the three basis planes.
And so a by vector has those three numbers.
It looks very similar to a vector if you just look at those numbers, right?
But we interpret it as a by vector.
So it's an oriented plane with an area, and that's it.
It has no position or anything like that.
And if we manipulate it, you can see that the numbers change as well,
so this is just me turning it around in unity.
And so again, we get kind of the shadow on each of those three planes.
And it can be negative, so we get a signed area on each of those three planes.
And obviously it has an area, so we can scale it up as well.
It can be larger, it can be smaller, and so forth.
And so this is what a by vector would look like if you just write it in code.
You have just three components.
It looks awfully similar to a vector, but algebraically, it's entirely different
because the basis is yz, zx, and xy.
It's not xyz.
And in fact, these by vectors represent the minimum information required
in any given dimension to store both a plane and a magnitude.
And this is why it shows up quite a lot when dealing with rotations
because rotations happen in a plane, right?
Like they don't really happen around an axis.
Like if you have rotations in 2D, there's no third axis to speak of,
but there is a plane you can rotate in, right?
And so if you look back at the cross product, the cross product, again,
gave us a vector, so it has an xyz component, which is a regular vector.
But the thing about the cross product is that in math and physics,
we talk about something called a pseudo vector,
which is it has these weird transformation rules.
Like if you mirror the result of a cross product, it doesn't have the expected behavior.
And it only works in 3D and 7D.
Don't ask me why.
It's just the way it is.
And it has all of these hidden transformation rules.
The thing we were doing now where we returned a by vector instead is called a wedge product.
And usually you write it with this little hat thing.
And so it algebraically, it's exactly the same in terms of the coefficients,
but the bases we use are completely different because we have yz, zx, and xy instead.
So this returns a by vector.
It generalizes to any dimension.
It doesn't have to be only 3D and 7D or whatever.
And it's a little harder to understand, though,
because we were never really taught about by vectors in school, right?
Or at least I wasn't, but...
And so here we have the 3D and the 2D vector multiplication.
We can write it a little bit more generalized by saying that multiplying two vectors together
is the dot product plus the wedge product of those two vectors together,
because the wedge product gives us the by vector part of that multiplication.
Let's see. Does this work?
Oh, shit, it works. Hell yeah.
I thought internet wouldn't work.
And another place where this actually shows up that I ran into
is when talking about a thing called curvature.
So here you can see something called the oscillating circle.
So this is kind of the circle that matches the curvature of this spline that it's moving along.
And the radius of that is 1 divided by the curvature.
So if instead of thinking about the radius,
you think about the inverse of the radius, and that's curvature.
So a curvature of 0 is a straight line, a curvature of 1 turns in one direction,
a curvature of negative 1 turns in the other direction.
Anyway, it's a useful concept.
So if we want to measure curvature of a parametric function, say,
this is how you would do curvature in 2D.
This is just straight up from Wikipedia if you want to see how to measure curvature.
This is a scalar, and it's signed.
In other words, it can be both negative and positive.
And then we have curvature in 3D.
And here we have the magnitude of the cross product
between the velocity and the acceleration divided by the speed cubed.
And so these look very different.
If you're not familiar with everything that we just talked about,
this one is always positive because we're getting the magnitude of a vector.
So all of a sudden, it's no longer signed.
There's no negative curvature or positive curvature.
And what about the axis?
If curvature turns around an axis in 3D, right?
And so these two, that's still looking a little sus.
Now we can recognize these patterns, right?
And so this is just a wedge product.
So we've kind of been mistaken in thinking about the curvature
and thinking of them as either a scalar or the cross product
or the magnitude of the cross product.
But if we just do the wedge product instead,
that is just much more simple, and it generalizes to any dimension again.
And so instead of returning to the scalar or a vector,
we get a bi-vector out of that.
Yes, I'm going to go a little bit over time.
Are you all okay with that?
Okay, I'm almost done.
So this is kind of a generalized curvature.
Anyway, so what I think is cool about this is that
throughout math, we've had this thing of like mental gymnastics,
of like, you can't really multiply vectors,
but here's eight different products.
Just use those instead.
And also the cross product doesn't work at all in all dimension,
but it works in 3D and like 5D or 7D maybe, like one of those.
And also cross product returns a pseudo vector
with like special transformation rules.
So it's not really a vector.
And complex numbers, they're like 2D vectors,
but also not at all, but they can like rotate.
And quaternions are like an extension of complex numbers
with the rules i squared equals j squared equals k squared equals ijk equals negative one.
It's just like, Jesus Christ, right?
Or we can just say that if you square a vector,
you get the length squared.
That seems a little bit more simple.
Everything else, all of those things we talked about,
just naturally emerge from that definition.
What we've been talking about is called geometric algebra.
More specifically, it's a Clifford algebra.
And if you take all of these components
and like combine them into a big multi-vector,
and 2D, they will look like this.
We have a scalar, we have a real number,
we have a vector and a bi-vector.
Vector has two components.
Bi-vector only has one component.
That's a full 2D VGA multi-vector.
VGA is either vanilla geometric algebra
or vector geometric algebra.
People haven't agreed on this.
Then the 3D multi-vector looks like this.
So the vector has three components now,
and the bi-vector also has three components.
And this is why we probably mixed up
vectors, pseudo-vectors together,
because they both have three components in 3D.
But it's actually much better to express
the results of the cross-product as a bi-vector instead.
There's also a thing called a tri-vector,
which is the unit volume
formed by the three basis vectors.
We're not going to get into that.
So basically all of these concepts
that we've kind of juggled around
with all these special rules,
they can actually generalize in a really clean way
using this framework, right?
So instead of separating complex numbers
and quaternions as separate things,
we can just call them rotors,
and that's a real number plus a bi-vector
of that given dimension.
And so finally, after this whole journey,
you might be wondering, like, well,
if multiplying two 3D vectors
gives us a quaternion,
and in games we use quaternions for rotations,
what rotation does that represent?
Like, what happens when we do that?
And this is what it represents.
So we're multiplying these two vectors together,
and the orientation that we get,
we're orienting this cube based on it,
is twice the angle between those two vectors
in the plane formed by those two vectors.
And so that applies to 3D as well.
So if we, like, separate these two vectors out,
you can see that the cube rotates after that,
and it's, like, twice the angle between those two.
If you want to read up more on that,
look up quaternions, a double cover
that talks about why it's twice the angle.
And so, why couldn't you multiply vectors?
Well, probably because your teacher
didn't explain geometric algebra to you, right?
But now you can.
And that's my talk.
Thank you very much for coming.
APPLAUSE
All right, thank you so much.
So if anything, your talk was both a question
and an answer to the multiplication
of kath, maths, and rainbows.
So there's that.
You have produced at least an answer
to that very tricky multiplication.
And with that, I would love to open it up
for a couple of questions.
Has any?
Yeah, this is a really weird cube that they pass around.
It's very strange.
I probably should have mentioned
that there was going to be questions at the end,
and I forgot.
What are you exploring next
while people think of questions?
Sorry, what?
What area are you exploring next
that you want to break your brain over?
I'm still stuck in quaternions.
So I've been making, like, a spline library.
Where, like, a spline library for unity
that has, like, quaternionic splines.
And I want to, like,
implement a bunch of different types of splines
in quaternion space,
which is really fascinating and weird.
And so that's been kind of a recent obsession.
Yes?
Is it working?
Is it working?
First of all, I want to say
I love the talk that you've been giving
and also your YouTube channel that
Oh, can you talk a little closer?
That I really like your YouTube channel
and the talk that you've just been giving.
Oh, thank you.
What different type of problems
do you have
that could help with
where you would have a benefit
for using
the wedge factor
or these operations in?
What other type of problems?
So most of it is useless.
Like, this whole talk, waste of time.
But it's like,
again, this is kind of more like
reframing things you already knew.
Like, if you looked up how quaternions worked
or how complex numbers worked,
they would just be separate systems, kind of.
But now they're kind of unified in a way
that makes more sense.
Like, for example, one thing that,
a lot of people, if you want to implement quaternions,
most people, even engine developers,
probably just like copy some code,
paste it into their engine and then call it a day
and now you have quaternion for rotations, right?
But one thing that I learned
after, like, reading up on how they actually work
is, like, you can learn
all sorts of, like, tricks with them.
So, for example, I had a use case of
I wanted to, like, interpolate
and, I don't know which coordinate system we should use.
I wanted to interpolate an orientation
along a spline.
And then I wanted to add a feature
of reversing that spline.
So, this should turn 180 degrees
in order to reverse that whole spline.
And when I did the math for that,
like, did you know
that, like, reversing a quaternion
is a swizzle?
You just shuffle the components.
Like, you can just, in any of these three axes,
or the world space axes,
it's literally just shuffling the components.
It's a free operation
in terms of, like, computational power.
You have to do a full, like, 180-degree
angle axis multiplication, right?
And stuff like that is, like,
all of these little, like, mathematical tricks
that kind of pop out.
But if you don't really care
that much about that, you don't have to learn all of this.
It's just a useful framework to me, at least.
And also, if you want to make a game
in any other dimension than 2D or 3D,
this is also very useful.
Then you really need this.
All right. Any other questions?
Okay.
People are really hungry.
I'm sorry I kept you all this long.
Oh, over there.
You get a cube.
Thank you.
Does your math library
support geometric algebra?
So, yeah,
I do have a math library on GitHub.
I have some geometric algebra
components.
It's not, like, fully fleshed out.
I've only been, like, adding things there
as I need them.
I haven't made it into a library that has
literally everything.
But I do have a library on my GitHub
with, like, there's a
BiVector3 type there.
And there's a, like, Rotor3 type,
which is just a quaternion, right?
But I do have that in my math library.
So if you do want to look into the code
of, like, how this might look,
my website is up there.
These days there are too many social media.
You can go there.
And then you can find all of the links to that.
Thanks.
Oh, actually, I don't think I have a link to my
GitHub there.
That's the only link I don't have on my website.
You can probably find it if you Google, I think.
All right.
Any other questions?
And also, you can, if you have other questions,
like, later, you can just come up to me
and talk to me.
That makes me feel important and happy
that I could provide value to all of you.
Hi.
I was just wondering, do you still plan
to do, like, your tools
on other engines, too?
Like, on Unreal Engine, for example,
the Spline upcoming tool?
I've considered it, like, obviously,
with all of the Unity disaster.
I've considered it.
And I looked into Godot and I looked into Unreal.
But they're just, they're very different tools.
Like, Unreal is, like,
it's a level designer and level artist tool
that turned into a game mention.
Like, it's just engineers
making an engine for engineers
and it's very engineer.
And I feel it's not very artist-focused.
And then any time I try to do something
that I do in Unity of, like, making, like,
quick editor scripts and just, like,
have that really fast iteration,
that is just destroyed in Unreal.
In Godot, I think it's a bit more balanced
because they have, like, a more, like,
easy-to-use scripting language and whatnot.
But I don't know.
Like, if I, like, I make, like,
20% of my income is from
selling plugins in Unity.
And so, like, could I really
support that in Godot, which is, like,
very, like, open-source, free software-driven?
And I'm like, I don't know.
I think that community is not, like, quite, like,
big enough yet to, like, support something
like the tools that I do.
And so, like, if anything, I might, like,
transition to doing, like, standalone tools.
Just separate EXEs that you open
rather than, like, tying it to any specific engine.
Or I'm just going to go back
to making games again.
Because, yeah.
I kind of want to do that, but, yeah.
Yep.
All right.
I think we got a sign that we should cut.
Yes. A stoic nod.
All right. Thank you all so much for coming.
Or did you want to close out?
No, we're good.
Okay.
All right. Thank you all.
Time for lunch.
