Hello, this is Dave. I'm working on Hyperledger Fabric version 1.2, and today I'll be discussing
and demonstrating a feature that we're working on called Private Data. Private Data is when you've
got a set of data that is sensitive and should not be shared with the entire blockchain network,
what we would call a channel. Let's say you've got a handful of organizations in your channel,
but on any given transaction, maybe only two of the organizations should have access to details
of some of these private transactions. And to do this, we store the private data on the side,
instead of on the blockchain, and sometimes this solution is called sideDB, for that reason,
side database. But a hash of the private data is stored on the blockchain and serves as evidence
of the private data, and is used to validate the private data, and can be used, for example,
later on, if there's a dispute between some of the participants, they can go check the entire
network and look at the blockchain and see what the hash of the private data was, and then you'll
know for sure if that matches the private data that you claim to have had. Discuss how the
private data gets distributed across the network. So when a client submits a proposal for chain
code execution to certain endorsing peers, it can also send in a transient field in the proposal
some private data. The endorsing peers that have executed the chain code, if they notice any private
data rights in that chain code, they will store that data in their own transient store and not
include that private data in the proposal response that gets sent back to the client. It will also
determine which other peers in the network are authorized to receive this private data,
and send the private data to those peers via gossip, so that those peers also have the data,
and can validate and commit the data when the block gets committed.
In step two, the client will submit the transaction to the ordering service, and that gets distributed
in the blocks to all the other peers as normal. And then in step three, the peers that are authorized
to have the private data will look up their private data from their transient stores, validate it
against hashes in the public blocks, and commit the transaction in the block.
So let's look at a scenario to make the principles more concrete here. We'll extend the
Marvel's demonstration that some people might know, and we'll add privacy requirements to that
scenario, such that no Marvel data should go through the ordering service. The Marvel data should
only get distributed peer to peer across the network, and all peers will have access to general
Marvel information, such as the name, size, color, and owner of the Marvel, but only a subset of the
peers have access to private pricing information. For example, only the peers or the organizations
that are involved in that transaction. So we distinguish three sets of data, green, yellow,
and red. Green is the public data that lives on the channel. It goes to the ordering service and
all the peers. Yellow is the Marvel data that goes to all the peers, but not the ordering service.
And this is defined in what we call a collection of data. So the Marvel collection
will get distributed based on the policy, and we see here it's going to go to org one or two.
And when peers endorse chain code dealing with marbles, it will distribute the private
Marvel's data to it'll attempt to distribute it to two different other peers for redundancy,
so that if this endorsing peer goes down, other peers are available at commit time if there are
requests to pull that private data. But if each of these peers are not available at the current
time on the network, let's say that only one of the peers is required to disseminate the private
data to as a condition of the endorsement of this chain code. Okay, so that is the Marvel's collection.
And then finally, the marbles private details collection includes the pricing information.
And let's say in this example, only organization one has access to this data.
Note also, we have a concept of block to live. So for very sensitive information, maybe pricing
information or maybe personal information, the even the private data shouldn't live
on the authorized peers forever. So maybe it only lives for a short time, maybe that's a day,
maybe that's a year. But the way you configure this is through a block to live property. So for
the Marvel's private pricing details, we have a block to live of three, which means this data will
live on the blockchain, or the site to be for three blocks. And after that, it will get purged.
So let's step through the data flow for this scenario. First, the client will submit a proposal
to endorsing peers to execute the chain code. Those endorsing peers see the
Marvel's collection private data. And based on our distribution policy distributes that to two
other peers. But note, there's a fourth peer in the network that we have not distributed the data to.
So we'll call this missing private data, and we'll come back to that later and discuss how that's
resolved. And remember, there's a second collection, the Marvel private details with the pricing
information. This data is sent to one other peer, because only the organization one peers have access
to this data. In the next step, the endorsing peer sends the proposal response back to the
client, the client submits the transaction to ordering, and the block with the public transaction
gets distributed to all the peers. Next, the peers with the private data will validate the
private data against the hashes in the public transaction. And this peer that had the missing
private data, it will determine that it should have the private data based on the access policy,
it's organization two, and it should have access to the Marvel's private data.
And it will try to pull the private data from other peers using the gossip protocol.
And finally, once we retrieve that private data, each of the peers has all the data they
need to commit the data, both the public data on the blockchain and the public state database,
and for the private data to the private state database, and what we call the private right
set storage, which is similar to the blockchain structure, but it's not on the actual blockchain.
And each of the peers also deletes the private data from their transient store,
once the transaction is complete and committed. Okay, let's go see private data in action. So
I'm going to bring up a network with the four peers, two from organization one and two from
organization two. And while that network is spinning up, I will go show you the chain code
that we're going to execute and the how to configure these collections. So I mentioned
there's two collections. There is a collection for marbles. And instead of a normal put state,
what we do in the chain code is we do a put private data. Okay, and then that's for most
of the Marvel's data. And then remember for the pricing information that's separate, we have another
collection for the Marvel's private details. Again, we save that with the put private data.
Function call in the chain code. And how are these collections configured? Well,
they're configured at instantiation of the chain code time. In this case, in this script,
I'm writing to a collections JSON file. And here I define the two collections, specify
the dissemination policy for the private data, the max peer peer count and the required peer
count that the endorser uses to disseminate the private data, and the block to live policy for
each of those collections. Okay, let's go take a look at our network. So it has spun up. And we
are ready to instantiate the chain code. So the script that brought the network up has brought
up the four peers and the ordering service, and it's installed this private data chain code.
I also have the script for this demonstration up here at fab 6600 in the hyperledger fabric
JIRA, so that others can follow along. But first we'll go into the client container.
And let's attempt to instantiate this chain code on org one peer zero.
And this takes a few seconds while the chain code image with the chain code gets built and deployed.
Okay, that was successful. So let's go ahead and create our first marble.
Okay, that was also successful. So next, we will query our marble information,
and we have two different queries one for the public information and one for the private
information. So let's first go try to read the public information from the first peer.
And we see that the first marble formation did come back successful.
And let us next look at the private information for this marble on org one peer zero.
Okay, and that also has come back. So we see here a price of 99 associated with that marble,
and that's the private private details of the marble.
And that was all done on org one peer zero. So of course, he's got the private data,
because this is the peer that endorsed that chain code transaction. But let's query some other
peers for the private data. We look next at org one, peer one, and remember again that
org one is entitled to see the private data has access to that private data. So this peer should
also have the private data. And this is the first time that we're doing a chain code
invocation or query on this on this peer. So he also needs to build his chain code image.
So that the chain code function can be called. And note that he has returned success with the
price. So this peer also has the private data, which means it was successfully disseminated to this
peer. And then let's check an org two peer now or two does not have access to the private data.
So when this peer gets invoked, again, he builds his chain code. This is the first time we've made a
call on this peer. And org two will not have access to the private data. And so in this case,
when we try to query for the private data, we get an error failed to read failed to get private
details from marble one. And this message states that we have a hash matching this key on the public
in public state. But we don't have the private state for this. So this is because this peer was
not entitled to that data. Okay, next, I'm going to show you some of the logging information just
so we can see how this private data was disseminated. So we'll do a Docker logs command, and we'll check
each of the peers. First, we'll do this on peer zero org one, where the invoke was called.
And the the creation of this marble was done in block four. So we can see that
we've received this block from the network. And we would try to retrieve one transaction from the
transient store because we noticed that there was private data there. And in fact, we did retrieve
the data from the transient store because there was no missing collection information. And so this
this this this transaction and this block gets committed to the database.
Now, let's try it. Let's look at something more interesting. Let's look at the organization one.
Sorry, organization two, who does not have access to the private data.
Okay, this this peer received the block.
He tried to retrieve the private data from the transient store. And it was also successful,
there was nothing missing. So this is a peer that had received the data at endorsement time.
And let's check the peer that had the missing private data, due to not getting the data at
endorsement time, that must have been pure one or two.
And here we see a lot more information, because there's more gossip work to be done. He received
the block, tried to retrieve one transactions data from the transient store. And he received
private data from the transient store, and could not find all the collection private rights sets
in the local peer transient store. So this peer had to do a private data pull, and fetch the
private data from remote peers. And it'll attempt to do this for a configurable duration, in this
case, 60 seconds. And if if they can't find the private data within those 60 seconds, it can go
ahead and proceed with commits without the private data, and he'll be missing the private data and
will not be able to endorse transactions against that private data in the future. But in this case,
in most cases, the peer will be able to find the private data from another peer in the network
by sending these gossip requests for that data. And we can see we got one match,
and we found all the missing collections. And we are also able to now commit that block
with that transaction, even in this peer that did not get the data at dissemination time.
Next, let's take a look at the private data purging capability.
So again, recall that when we tried to read the private pricing information, and let's again
try that on the first peer, we get back the price of 99. And that was done in block four,
committed in block four. And so this data should be purged after three more blocks.
Because there was this collection is configured with a block to live of three.
So what we're going to do is we're going to create a few more blocks. Let's do this by creating a
marble two. And then we'll transfer this marble to a few times. We're not going to do anything
to marble one, because that would reset its block to live. So after it has a block to live with
three, so it'll live for three blocks. And then on the fourth block commit, it will get purged.
So let's do another transfer on block on marble two. And then one more transfer on marble two.
So now marble one should have lived for three blocks and should have been purged.
So we can again try to read those marble private details on org one peer zero.
And this time, instead of getting the price of 99 back, we see that marble private details
does not exist for marble one. So this data has in fact been purged, making this sensitive data
now obsolete from the network. Okay, that concludes the private data demonstration.
Stay tuned for further updates on the Hyperledger fabric channel. Thank you.
