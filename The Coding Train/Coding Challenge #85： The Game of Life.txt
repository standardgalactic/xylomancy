Hello. Welcome to today's coding challenge. In today's coding challenge, I am going to
attempt to program this, the game of life cellular automaton. In JavaScript, I'm going
to use the P5JS framework. What's running right here right now is a processing example
using the Java programming language that I made several years ago as part of the nature
of code book. Now, if you're interested in that, you can also look at my whole playlist
about this thing that I can't pronounce called cellular automata, the plural of automaton.
And I do have some videos that give you some historical background and looking at different
Wolfram's elementary CA and some exercises and things. But I'm really just showing examples
and talking about the systems in those videos. In this video, I'm going to try to just start
from no code and finish with the simulation. Hopefully it's going to work. It generally
doesn't, so don't get your hopes up. But I do want to say that I would encourage you
to do some background reading. This is the first sort of public appearance of the game
of life as created by John Conway, a mathematician from an article in Scientific American in
1970 by Martin Gardner. Of course, you can always refer to the Wikipedia page. I'm going
to need this, which is going to, which outlines the rules for how the system behaves. And
you can also think that there's a lot of possible stuff. There's all these kinds of
interesting repeating patterns and different types of things that you can create and do
with the game of life simulation. But I'm going to program a simple version of it. Hopefully
that will happen. Then at the end, I'll talk about some variations that you might think
about and maybe someday I will try to like make one in 3D or something like that. Okay,
so let's get started. Here's what we need. A cellular automaton is a system of cells
that exist in a grid. It could be in one dimension, two dimensions, three dimensions. The game
of life system is one that exists in two dimensions. And the idea is that you have generations.
So if this is generation zero, I'm going to run some computation on the system of cells
on a grid. And then I'm going to have a new set of cells on that grid. And that's going
to be generation one. So the cells that exist on that grid all have a state. That's part
of a CA system. So that state could be a floating point number. It could be a kind of animal.
You could really imagine in a lot of different ways. I'm going to do something very simple
with the game of life. The game of life is a simple system of discrete states, two states,
zero or one, on or off, alive or dead. So you could imagine a configuration of this being
something like this. And for each time, each tick, each generation, each frame of animation,
I evaluate each cell one by one and get a new state based on the previous state. So
what's I'm trying to do this cell? I need this cell's new state. I'm going to get a
new state based on this state and its neighbors. So what are its neighbors? That's up to us
to find. It could be its left neighbor, its right neighbor. It's only its neighbors to
its left. But in the game of life system, its neighborhood are the eight cells surrounding
it. So it's this three by three area. One, two, three, four, five, six, seven, eight.
So I need to evaluate all those cells and decide whether it should stay as a zero or
turn into a one. And the reason why it's called the game of life is the rules. The rules
for how we move from one generation to another resembles some type of biological process that
you might think about population or bacterial growth. And the idea is that a cell that is
surrounded by neighbors that aren't alive cannot stay alive. A cell surrounded by neighbors
that are alive can come to life or stay alive. And a cell that's surrounded by too many neighbors
cannot stay alive due to overpopulation. And we can go back to the Wikipedia page and read
those rules precisely right here. So any live cell with fewer than two neighbors dies as
if caused by underpopulation, any live cell with two or three neighbors lives onto the
next generation, any cell with more than three neighbors dies by overpopulation, and any
dead cell with exactly three live neighbors becomes a live cell. So this is written as
if by reproduction. So this is written in a somewhat of a confusing way. I think I could
simplify this, I think. We could say like, let's say the cell is dead. It's a zero. It's
only going to change to a one if it has three live neighbors. Then it changes to a one.
Otherwise, it stays a zero. A one is going to stay a one unless it has less than two,
less than two live and greater than three live. Then it dies. So birth, reproduction happens
with exactly three neighbors. Death happens with fewer than two or greater than three.
I don't know if I got those numbers right. Let's go check the Wikipedia page again.
Thank you. I hit the sound effect by accident. Live cell with fewer than two live neighbors
dies. Yes, less than two dies. Live cell with two or three neighbors lives. I don't care
about that. I'm not going to kind of not care about change. Then it stays the same. I can
kind of ignore that. Live cell with more than three neighbors dies. Yep, that's what I've
got over there. Then any dead cell with exactly three live neighbors becomes alive. Okay,
so I've got those rules correct. Now, what do I need? Hello, you're over there. I'm
going to go back over here. I need something. All I need to make this program work is a
data structure to store this grid. This is where I'm kind of having like a bit of a
headache and I'm really not sure what to do. The way that I've always done this in previous
examples is by using something called a two-dimensional array. I think I have a video tutorial about
that somewhere, which I will link to in this video's description. But two-dimensional arrays
are kind of not so much fun in JavaScript. They can become a little bit weird and there
really is no such thing as a two-dimensional array. A two-dimensional array is a construct
of our own human mind saying like it's really just an array of arrays, which makes sense.
This is an array. Each row is an array and then the grid is an array of rows or each
column is an array and the grid is an array of columns. I think I'm going to do it that
way with the two-dimensional array. I just should say that it's a little bit awkward
two-dimensional arrays in JavaScript, but I'm going to go ahead anyway. So the first thing
that I want to do in this program is just make a two-dimensional array that stores a
random collection of zeros and ones. So let's go do that. I'm going to go to the code and
you know what I'm going to do? I'm going to actually just write a function. I'm having
like weird deja vu. I probably did this in another video somewhere. I'm going to just
write a function called make2darray and I want a certain number of columns and rows because
that way I can just say I can have a global variable called the grid. I'll call it grid
and I could just say grid equals make2darray and I could say I want a 10 by 10 grid. So
this is kind of what I want to do. I'm going to just farm out the making of the array to
another function. And now I do remember doing this because I'm going to write this in a
whole coding challenge or video. I'm going to do this in a kind of horrific way and then
everyone's going to give me all these amazing ES6 JavaScript fancy ways of doing this whole
function in one line of code. Somebody I'll come back and do that. So now let me see here.
So what I need to do is first is I need to have some sort of array and it's going to be,
it's going, this is always where I get confused too. Do I want the columns? The point of using a
2D array is that eventually at some point I'm going to be able to say something like grid,
you know, index 2, index 3. And I guess I usually think of this as x and y and x being the columns.
So I want this, the outer array, if I'm thinking about arrays of arrays to be every single column.
Every single, no, no, that's what, x is column, right? And then the y is everything over. Okay.
So I'm going to do that. So I'm going to make a new array of columns. And then I am going to say
for let i equals 0, i is less than that array dot length, i plus plus, make a array index i is a
new array of rows. Again, I know there are all sorts of shorter and fancier automatic functions
for generating and configuring arrays like fill and map and reduce and all that kind of stuff,
even more. So I'm going to do this. And then I am going to, what I want to do here now is
I also want to fill them with, I guess I could fill it with values down here.
So maybe I won't, maybe I'll actually just do that. So this is going to make me an empty 2D
array with nothing in it. And then I think what I want is, I probably want to have these global
variables. I know this is a little bit goofy that I'm doing this. And then what I'm going to do,
I could make a, and I'm going to say, let i equals 0, i is less than columns, i plus plus.
And then I'm going to do j is less than 0, j is less than rows. I'm going to do a nested loop
so that I can say grid i, j equals floor random 2. This is going to, this is going to give me a
nested loop, this is a nested loop. So I make this sort of like 2D array structure that's empty.
And then I iterate over every single column in every single row and I fill each one with a random
number 0 or 1. And I'm just, now I'm going to run this and I'm going to go back to, I'm going to go
to my code. Okay, cannot read property 0 of undefined. Well, you know what would be nice
if I actually returned that array. So they make 2D a function array. It's making this array,
it's also got to return it so that I can get it back here. And then now if I look at grid,
I'm going to see it's an array of arrays. And I forgot there's this wonderful thing you can do,
like console.table grid, which shows me, now I can see it here. So we can see this is that
2D array. That's what it looks like. It's a 2D array with rows and columns filled with 0s and 1s.
So step one is finished. Now what I need to do is I need some mechanism to every frame of animation
iterate over every single spot and set a new spot. Actually, you know what I need to do first?
I need to render this thing. I want to be able to see it as a grid of red and blue squares or
black and white squares or zeros and ones of the screens, any number of ways you could render this.
I'm going to do it in the traditional way of a grid, the square, the cell of the grid is black at
the value of zero, is white at the value of one, or vice versa. What I want to do now is I'm going
to add a draw function. And I'm going to be using this loop over and over again. I'm going to add
this loop because I'm always going to, anytime I want to look at everything, I'm going to go
through all the columns and all the rows. It's been pointed out in the chat that there are some
JavaScript libraries and packages that manage grid systems and neighbors for you. It would be
great to use those. I'm going to just do it all without that right now just to kind of like figure
it out. I'm going to say background zero and I'm going to create a canvas. I think to make my life
easier for the moment, I'm going to make the canvas also a square. And then what I need to do is I
need to draw, I want to draw a rectangle, add an x and a y with some width and height. And it's going
to, they're going to be squares, so some width and width. And that value is going to be the width
of the, you know, I should probably calculate the number of columns and rows. Here's the thing,
I'm going to redo the way that I'm doing this. So I'm not going to actually have a fixed number
of columns and rows. I'm actually going to do like a scale or I'm going to just actually have a
variable called resolution. I'm going to say that's 10 or 40. I'm going to say that's 40. So that'll
be 10 by 10. And what I'm going to do is I'm going to say columns equals the width of the canvas
divided by resolution. Rows equals the height of the canvas divided by resolution. This way I can
kind of dynamically, you'll see what, I can dynamically make a 2D array based on how big I
want the squares to be. So the columns and rows are being calculated based on how big I want the
squares to be and the canvas size. And then I have that global variable resolution, which is
probably too long of a name, which I can just use down here. And now x equals i times resolution
and y equals j times resolution. And I'm going to now say if grid i j equals one, fill 255. And,
you know, since I made the background zero, I can actually, in this case, I can just draw
white rectangles only for the values of one. So let's see, I probably got something wrong here,
but let's try to run this. Nope, I didn't. So we can see there we go, no, there's some goofiness,
like, oh, it's sort of like my math is a little off and I, what's this weird, like, nonsense over
here, flickering. I kind of feel the need to fix that. And the other thing that I can do that's,
this is going to help is if I make this 600 by 400 and I make this like 20,
right, it still works. And now this is driving me crazy. I think what I want to do is there's
a sort of issue with the stroke. So I could say, I could also say stroke 255, and then I'm getting
something like this, but I don't know, design-wise, I'm not going to worry about that too much.
Actually, I kind of like being able to see the grid. So let me actually put in stroke zero,
and then I'm going to do something kind of goofy, which is, I think if I say,
just draw the, all the rectangles like one pixel less,
whoops, I think I'm going to get the look that I want. Yeah. So whatever, there's countless ways
I could deal with this, but now I have, I have the grid, I have all the cells. So now it's up to me
to simply implement these rules. I need to, for every single cell, count the number of live neighbors,
look at its own state, and have these rules play out. Here's the thing. This is really important.
While I'm checking each cell, I check this cell first, let's say, I cannot change its value,
and then go on and check the next cell, because the next cell's new state should not be dependent on
this cell's new state, but it's previous state. And if I've changed the state, I've lost its old
state. So this is where what I actually need is I need two two-dimensional arrays. One is
the sort of old one, and one is the new one. Now, probably the simplest thing for me to do
is just make a new one every frame. That's sort of like, in some ways, a bad idea in terms of
memory management. And if you look at my processing example that I referenced at the beginning of
this video, what I actually do in that example is I just have two different arrays. I have an old
one, and then I have a new one. Then the new one is then the old one, and I write the new one over
here. I just keep swapping them, so I could maybe add that in at some point during this video. But
for right now, at the beginning of draw, I'm just always going to make a new generation.
At the beginning, what I could do here...
Why does that keep happening when I press the button to change the camera? At the beginning of draw,
I can say, let next, for next generation, equal, make 2D array columns and rows.
Now, I'm going to leave this here for the rendering, and what I'm actually going to do is at the end,
what I'm going to do is I'm going to say, I guess it doesn't really matter. Do I want to like
render first? This is kind of like a philosophical, deep philosophical question. Do I want to
compute and then render, or render and then compute? Kind of could matter in some situations.
This matter in the situation doesn't really matter, but the reason why is like I'm never
going to see the first generation, because what I want to do is say grid equals next.
So basically, the algorithm here is compute next based on grid, because draw is looping.
So I want to compute the next generation based on the grid, make grid that, render,
and then compute the next generation based on grid, make grid that, render. So I don't know,
now it's bothering me. I'm going to do this after. So at least I draw the first one, and
I'm going to do some computation for the next frame. Okay, okay. So now, what do I need to do
once again? Loop through all of these. Loop through all of these. Now what I need to do is
count live neighbors. I need to count the number of live neighbors, the neighbors that have one.
So I could do a kind of internal loop here, and that would probably be a smart thing to do.
Maybe I will do that, where basically what I do is I say I have a certain, I'm at a certain cell.
Let me look at the cells between negative one and one and negative one and one offset from where I
am. I could also just do something really silly, like let me do the really silly thing first.
I could say let sum equals zero. Then I could say sum plus equal grid i minus one j. That would be
the neighbor to the, so, right? If this is i comma j, i minus one comma j is there. i minus one j
minus one i j minus one, that sort of thing. So if I'm thinking about this, I might like add, go,
I could like manually put in all the neighbors. Just like add them all up. This is like,
I'm going to go around the horn here, right? Plus i plus one j plus one.
Sometimes I like doing ridiculous things like this just to figure this stuff out.
Now I got to go i minus one j plus one, and then what's the last one i minus one j? This should
be eight neighbors. This is eight neighbors. One, two, three, four, oh wait. One, two, three,
four, five, six, seven. What did I forget? i minus one j minus one i j minus one i plus
one j minus one. I forgot to do that whole top row. And then i plus one j, i plus one
j plus one i, yeah. So this should now be eight. One, two, three, four, one, two, three, four.
Okay, I kind of hate that I did this. You throw like throwing your tomatoes at your
television screen because of course you're all watching this on the television screen.
So this is the idea. I need to add up all those neighbors. Let's do this in a loop.
So another way I could do it is I could say, ah, you have a better idea. Let's,
neighbors, I have a better idea. Let's write a function to do this.
Neighbors equals count. I'm going to give it the grid and I'm going to give it the i and the j.
So I'm going to write a function. I'll put it all the way at the bottom of my code
that receives, I'm going to call it count, account neighbors, let's call it.
And it's going to receive some 2D array and it's going to receive an x and a y location.
And then what I'm going to do is I'm going to say i equals negative one, i is less than two,
i plus plus. Then, so I'm going to do a little nested loop using i and j around that spot.
And I'm going to say, let sum equals zero. And then I'm going to say sum plus equals grid i,
j, however, here's a problem. I don't want to count myself as a neighbor. So there's a few
different ways I could do this, but it's a little bit silly. I'm just going to like subtract it at
the end. Like I'll just subtract it out. I could have like put an if statement here, like ignore it
if i equals x and j equals x, but I'm just going to subtract it out at the end. And then I'm going
to return that sum. So this is, you could see like a couple different ways of doing this right now.
This is one way to kind of do this. What this is doing is it's saying, let me do a little loop
around here, negative one, zero, positive one, negative one, zero, positive one. So let me check
this, this, this, and then subtract this out because I don't really want to count that one.
Okay, so now I should be able to, I'm going to just delete this. I've now counted all of the
neighbors. Ah, I've got a big problem. What do I do with the fact that if I'm on the edge, there's no
neighbor to the left. If I'm on the bottom, there's no neighbor below. If I'm the top, there's no
neighbor to the above. If I'm the right, there's no, if I'm on the edge, there's no neighbor to the
right. So what I could do, there's a bunch of things I could do. I could consider this like an
infinite wrap around world where like this neighbor to the right is this, this neighbor to the left
is this. I could, there's other ways that I could approach it. What I'm going to do is I'm going to
leave the edges as fixed values and just not bother to check them. So what I'm going to do here
is I am going to, I wanted to do like, I was going to do this loop like this.
You know what? Let's do the wrap around. Do I, no, no, no, let's do it the simple way first.
I was like, let me just add the wrap around code because I could add the wrap around code here.
Um, but I'm going to, let me, maybe I'll leave that as an exercise or do that later. So the, the
issue is, you know what I really want? I think then what I want, the problem is if I change this
loop. So I have to, I have to treat the edges differently. Oh, so much, so much heartache here.
But I, I can say what I'm going to do here is I'm going to say, oh, this is the drawing.
Whoa. All right. This is the compute computation. So I'm going to say if i equals zero or i equals
columns minus one, uh, minus one or j equals zero or j equals rows minus one. These are,
this is like all of the edges. I'm just going to treat them differently.
I'm going to say next i, j equals, uh, grid i, j. So I'm just going to keep the same values from
before. This is not a great solution, but it's a quick one that I can do right now. So I'm, if I'm
on an edge, I'm just going to use the same value because now what I can do is say, look at this,
my state is grid i, j. Now it's time for me to implement those rules, right? Okay. If my state
is zero and three neighbors are alive, change my state to one. If state equals zero and neighbors
equals zero, then next i, j equals one. Okay? That's rule number one. If not, not, not, not zero equals
three. Okay. Now what else? If I'm alive and less than two or greater than three are alive,
then change my state to zero. Else if my state is one and neighbors is less than
two or neighbors is greater than three and I probably should put a little
parentheses around that one and again I'm sure they're like some nicer ways I
could write this in a more concise way but you can see this is the rule right
if I'm alive and I have less than two or greater than three neighbors then the
new state is zero in all other cases the next state is just the current is just
the current state okay so and this makes me want to put this up here at the top
so that I can also just use this here so that's the state right the state this is
the current state if I'm an edge just ignore me I'm the same state if I'm
not an edge count all the neighbors check if I should change my state or say
the same I'm seeing in the chat there's a typo at neighbors in the first if thank
you neighbors okay what's the chance I've actually finished this so there we go
I think I have mostly all the code for it okay count is not defined sketch dot
line 55 oh right because I called it count neighbors which is a better name
for the function than counts try that cannot read property negative one of
undefined at count neighbors so what is undefined oh no no no look at this this
is a big mistake right what was I doing here this loop negative right this loop
which goes which is basically a loop for like a little subsection right if this
is x and y right I is an offset negative one to positive one j is an offset
negative one to positive one the cells I'm looking at are not ij but x plus i
and y plus j because I'm I'm just looking relative to where that x y point is so
that was a big mistake here this should be x plus i y plus j oh so good count
neighbors at draw sketch I'm 55 okay ooh get signed 55 count neighbors wait
whoa can I repropriety negative one of undefined what's undefined grid neighbors
okay hold on let's look at some stuff here or j zero oh look at this I just
keep going anyway so this I really I need to break out of the loop so this is
really like I'm done leave the loop or continue or something I don't know I'm
gonna I'm just gonna put an elf in here much as I hate that so because I
shouldn't be I'm basically doing the edges or the neighbors boy this will be
much nicer if I just in this function add some code to deal with wrap around
which is not gonna be that hard to do so but now I should be good there we go the
game of life now it looks weird because the edges aren't ever changing but this
is actually now the game of life working I really got to implement this wrap
around thing so let's do that now let's fix it so that the edges consider the
other sides as neighbors so how do I do that well one way to do that is with
something called modulus this is really this is great and I can refer you to go
on Levin's guest tutorial video on modulus which was made as part of this
channel so I will link to that but basically what I'm saying here is if I
have 10 columns 0 through 9 what could and I'm always looking for the neighbor
plus 1 right so 0 plus 1 is 1 1 plus 1 is 2 etc etc etc 9 plus 1 is 10 but I want
the neighbor to be 0 well guess what 9 plus 1 modulus 10 equals 0 because
modulus is the operator that gives you the remainder of division 10 divided by
10 is 1 remainder 0 so I encourage you to watch that modulus video if you're not
familiar with modulus so this will actually work almost getting closer if
I say I'm gonna just say like I'm gonna have a new I need like a new variable
name for x plus I guess I could say column I don't like column and I'm gonna
say x plus I modulus columns and row equals y plus j modulus rows so this
gets me close it doesn't get me all the way there but it gets me close so now I'm
adding it up like this and I'm gonna I'm gonna get rid of this whole edges thing
because no longer okay so I've got to get this done now I'm gonna have an error
here right I'm still getting like an out-of-balance error because I'm going to
negative one why because what if in the case of I equal negative one so what is
if if I is 0 right so let me come to the console here 10 modulus 10 is 0 but
let's say I'm looking for the left neighbors so I'm going through negative
1 negative 1 modulus 10 is negative 1 but I need that to be 9 I need negative 1
to be 9 well guess what if I actually just add the number of columns to
everything right if I'm actually working with the numbers instead of the
numbers 0 through 9 the numbers 10 through 19 right 10 minus 1 is 9
modulus 10 is 9 so the formulas is negative 1 is negative 1 plus the number
of columns modulus the number of columns oh but that's not 10 there's a
different numbers in my system but so let's let's try to confirm this again
okay the idea is that I have an x and a y point so that point might be let's say
if it's on an edge for example might be like 0 comma it's on the left edge might
be something like 0 comma whatever the y is you know 10 it's 5 so this is the x
value and I want to take x plus I plus the number of columns modulus the number
of columns instead of this is gonna be simple but it's kind of this is really
kind of like a crazy thing to do but you might write this out and practice it a
bit on your own I it will make sense to you eventually so when this is going to
work basically let's say I is going to be the values negative 1 0 and 1 right x is
going to be the values 0 through 9 if I'm thinking about all the possible all
the possible columns so let's just take 0 and negative 1 for example 0 minus 1
plus and in this case I have 10 columns plus 10 modulus 10 is actually 9
modulus 10 which equals 9 so 0 negative 1 to the left of it that wraps it around
to get the neighbor on the right right doesn't work for just any arbitrary
thing in the middle like if I take I to be 3 sorry if I take if I take sorry x to
be 3 3 minus 1 plus 10 modulus 10 we'll see how this 10 intended kind of
cancels itself out can you see that am I off the whiteboard I'm close to being
off the whiteboard that equals 2 right because this is 12 modulus 10 is 2 so
this actually works and then what if I'm on the edge if I'm at like 9 right if
x is 9 9 plus 1 is 10 plus the number of columns is 10 is 20 modulus columns 20
divided by 10 is 2 remainder 0 0 so 9 to the right gets the neighbor 0 so this
is kind of goofy it like shifts everything over so it can kind of look
across the edge so I'm this is going to work you can believe me or not believe me
but it's going to work and I'm going to put this in so now what I want is x plus
I plus columns modulus columns y plus j plus rows modulus Joe rows add those all
up and the game of life thank you thank you for watching this challenge thank you
thank you so let's try making let's try doing a couple things just to get a
little further here let's let's I don't know no I'm not going to do you do all
the next stuff I'm just curious like let me make the resolution 10 so we can see
that's with the 10 so you can see it's running pretty fast in the browser I
have a pretty slow low resolution so here's what you should do now I'm gonna
stop this is a perfect opportunity for people watching this video to make some
variations some things you can think about well one thing is what if you make
each one of these cells an object so it's state might not actually just be it
can keep track of more than just its state zero or one it could keep track of
whether it's change state or stay the same or how long it stayed the same what
if you visualize those what if you visualize with different colors based
on the history of the system what if you allow a user to draw with the mouse
and set cells on what if you look up some of these repeating special repeating
patterns that you can create certain kinds of patterns what if you are you
going to think of more and what if you did the edges in a different way what if
you use the floating point numbers instead of zeros and ones and did like an
average or something there are so many ways you can create a system lowering
the resolution what if you drew didn't draw squares but circles used images how
can you visualize this system how can you change the rules or how can you
visualize the system in a different way to create a piece of art or for some
other purpose I look forward you share what you make in the comments there'll
be the code link from here in a read me where you can submit your versions and
I'll come back in a future live stream I'll share some of the community made
versions run this again there's one other thing but I do think that making
cell objects is a path right right now I just have oh and you should probably do
the swapping thing like maybe maybe that's one other thing you could do is
like you really maybe not don't make a new 2d array every time but what I'm
thinking about here is what if instead of each one of these being a random value
you said something like new cell I comma J and this cell object can can animate it
can move around the cells could move they could grow they could shrink they
could keep track of their history there's so many possibilities there if you
make an object for the cell okay thanks for watching I hope you enjoyed this
coding challenge and you share with me what you make goodbye
