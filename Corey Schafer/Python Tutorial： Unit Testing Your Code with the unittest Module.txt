Hey there, how's it going everybody? In this video, we're going to learn about unit testing in
Python. So we'll go over how to write tests, how to set up and tear down your tests, and also
some best practices. So if you're not currently testing your code, then it's definitely something
that you're going to want to learn and start adding to your projects. So a lot of you have
probably heard of testing, but you might not know exactly what it is. Testing your code is the most
exciting thing to do. But there's a reason that most companies and teams require their code to
be thoroughly tested. And if you're going to get a job working on any large projects, then you're
going to need to know how to properly write tests. And the reason for that is that it's going to save
you a lot of time and headache down the road. So when you write good tests for your code,
it gives you more confidence that your updates and refactoring don't have any unintended
consequences or break your code in any way. So for example, if you update a function in your
project, those changes may have actually broken several sections of your code, even if that
function itself is still working. And good unit tests will make sure that everything is still
working as it should. And if it's not, then it'll show you exactly what's broken. So in this video,
we're going to be going over everything that you need to know to get started with the built in
unit testing module. So with that said, let's go ahead and get started. So right now I have a basic
script pulled up here that has some simple functions. And I want to start off using these
really simple functions so that we can just focus on what the tests look like. Now, what a lot of us
start doing to test our code is just put in print statements and occasionally run the code. So for
example, down here at the bottom, if I wanted to test that my add function was working, I could just
say print add and add together 10 and five. And if I run that, then we can see that the output that
we got looks right. But testing your code this way isn't easy to automate. And it's also hard to
maintain. So also, if we're testing a lot of different functions, then there's no way for us to see
at a glance what failed and what succeeded. So that's where unit testing comes in. So we're going
to go ahead and just remove this print statement and actually start adding some unit tests. So to
do this, first, we need to create a test module. So I'm going to create a new file here in this
current directory. And I'm going to call this test underscore calc dot py. Now that's the naming
convention when writing tests is to start with test underscore, and then what you're testing. So in
this case, it was test underscore calc. And that's actually going to be required within our test.
So now we have this test underscore calc module pulled up. And we're currently working with an
empty file. So first, let's import the unit test module. Now this module was in the standard library.
So there's no need to install anything. You can just say import unit tests. And now we're also
going to want to import the module that we want to test. So I'm going to import that calc module.
And we can import calc from here since it's in the same directory. Now if you're testing code from
a different directory and can't get your imports to work, then you can watch my video on importing
modules and it should help you figure out how to properly get that set up. So now we need to create
some test cases for the functions that we want to test. And in order to create those test cases,
we first need to create a test class that inherits from unit test dot test case. So to do this,
we're first going to create a class. And we will call this test calc. Now you can call that class
whatever you like, but try to keep it descriptive as to what you're testing. And we're going to
want to inherit from unit test dot test case. So inheriting from unit test dot test case is going
to give us access to a lot of different testing capabilities within that class. So let's write
our first test. So to do this, we'll write a method. And the method needs to start with test
underscore. Now that naming convention is actually required so that when we run this,
it actually knows which methods represent test. So if the method doesn't start with the word test,
then they won't be run. And we'll see what that looks like in just a minute. So ours will be test
underscore, and then what we're testing. So first, we'll just test the add function of our calc module.
So we'll call this test underscore add. And just like any method in a class, this takes self as the
first argument. And now within our method, we can write our test. So since we inherited from
unit test dot test case, we have access to all these assert methods. And I have them all pulled
up in the documentation here over in Chrome. So we can see that we can assert whether two values
are equal with assert equals, not equal with assert not equal, assert true, assert false.
And the documentation shows you exactly what all of these check for. So for example, assert
is not none checks whether a variable is not none. So the documentation has a good overview of all
these asserts. And then over here, what it actually checks for. And I'll also leave a link to this
in the description section below. So now let's switch back to writing our test. So we're going to
use assert equals to test our add function. So I can run our add function from here by saying
something like result is equal to calc dot add. And we'll just add those same values 10 and five.
And we would expect this to equal 15. So to test this, we can say self dot assert equals. And now
we want to assert that that result is equal to 15. Okay, so now how do we run this test? So we could
do it from the command line. So I have my command line here pulled up and I am navigated to the
directory where our module is currently located. Now you might think that we could just run the test
by saying, you know, Python test underscore calc dot pi. But if I run that, you can see it doesn't
actually return anything. So instead, we need to run unit test as our main module, and pass in
test underscore calc. And we can do that by saying Python dash m and then unit test. And now the test
underscore calc dot pi module. And we can see that when we run that it puts a dot here, and it says
one ran one test. And at the bottom, it says Okay, so that means that everything passed. Now it would
be nice if we could just run our tests using this first method here by saying Python test underscore
calc and just running the module instead of using this longer command here and setting it up to run
that way would also allow us to run our test from directly within our editor. So to do this, we can
just come down here to the bottom. And we can say if name double underscore name is equal to
in quotes here, double underscore main, and then within this conditional, we can just say
unit test dot main and run that. Now if you don't know what this double underscore name equals
double underscore main is doing, this actually isn't related to unit testing at all. I do have a
separate video specifically what that is about. But basically, it's just saying that if we run
this module directly, then run the code within the conditional. And that code within our conditional
is this unit test dot main, and that unit test dot main will run all of our tests. So now if we go
back here, this is now saved, if we go back here to our terminal, and I will clear this out. So now
let's rerun that using that first method of just Python and our test module. And if we run that,
you can see that now we can run it directly. And it runs our unit test and says that it passed.
And since we can run it this way within the terminal, that should mean that it can also run
within our editor. So if I run this, then you can see that within our editor, we can now run these
tests also. Okay, so that's good. So we're running our first test. So it's saying that we're only
running one test. Now, do you remember earlier when I said that your tests have to start with the word
test? Well, let me show you what it does if it doesn't. So instead of test underscore add here
as our test, let's call this add underscore test and save this and run it. So when we run this,
it might not be obvious right off the bat that anything is wrong because we didn't get any errors
or any warnings. But if we look at how many tests ran, it says zero. So this test was just skipped.
So you have to be careful that all of your tests are named properly and start with the word test.
So let's go ahead and change that back and rerun it. Okay, so now what happens if our test fails?
So let's change this value here with the assert equals, the result is equal to 15. Let's change
this to a 14. So that our test of adding 10 and five fails. So let's save that and run it. So now
if I pull this up a little bit here to where we can see, we can see that instead of a dot, we got
an F for fail. And it also shows us that the test failed with an assertion error that 15 is not equal
to 14. Okay, so now let me pull this down just a little further here. And now let's change this
test back and also add in a few more tests. So first of all, instead of setting this result
variable and testing that, I'm just going to instead drop our function directly into the assert
statement. So I'm going to copy this and replace that result variable actually with our add function.
And then I can just get rid of that result variable there. So you usually want to also
check some edge cases. So let's copy and paste this line here a couple of times and test a couple
of edge cases. So one edge case might be one negative number and one positive number. So let's
make sure that negative one plus one is equal to zero. And two negative numbers would also be
another edge case. So let's make sure that negative one plus negative one is equal to negative two.
So now if we save this and run it, then it's saying that it passed, but it also says that it ran
one test. Now you may have been expecting this to say that it ran three tests. But really these
three assert methods here are just within this single test called test underscore add. But even
though it still says that there's only one test, we still made this test better by adding in these
additional checks. So it's not our goal to write as many tests as possible, but just make sure that
we write good tests. So that's something that a lot of people get tripped up on. They just shoot
for, you know, full coverage without making sure their tests are actually good enough to catch
mistakes. So try to be mindful of that when writing tests. And in order to add more tests,
we just add in more test methods. So let's test the rest of our calc functions. So I will just
copy and paste this test add function here three more times. And I'm going to get rid of our output
here so we can see a little bit better. And now I'll change these to test all of our calc functions.
So I'll test our subtraction function by changing all of these ones here to subtract. And now let's
change our assert equals. So 10 minus five will be five, negative one minus one will be negative
two, and negative one minus negative one should be zero. And now moving down the line here, let's
change this next test to be multiply. So now for our assert equals, we want to test that 10 multiplied
by five is 50, negative one multiplied by one is negative one, negative one multiplied by negative
one is one. And then let's change this last method here to test our divide function. So we want to
test divide. So now in our certain statements here, we want to make sure that 10 divided by five is
equal to two, negative one divided by one is negative one, and negative one divided by negative one
will just be one. So now if I run this code with all four of these tests, then you can see that we
got four dots, and it says that we ran four tests. And all of those tests pass with all of those assert
equals statements. So you can imagine how useful this is. So if you have a module with some complicated
functions, then once you put in the work to write good tests like this, then you can just come back
and rerun these tests to make sure that everything still works. So if you change something in your
program that you think will work, but it actually broke some stuff, then your test should catch
that. So for example, let's say that I came in here to our calc function, and we just made a typo
in this multiply function. And instead of one asterisk there, we put two. Now this is actually
going to return x to the power of y. So if we come back here to our tests and rerun this, then we
can see that if we look here at our output, that we have two dots, and then an f and then a dot. So
that means that three of our tests pass and one test failed. And the one that failed, it says that
we have an assertion error that the 10 times five should actually be equal to 50. And it's not
instead we got this value here. So that gives us an idea of exactly where the problem is, and where
we can make that change to get these tests to pass again. So let's go ahead and go back here and
change this back. Now sometimes you might make a change that doesn't actually break your test,
but will actually unexpectedly break your code. So for example, let's say that we came in here
and changed our divide function to be floor division instead of regular division. And we
can do this by changing this to two division signs. Now if you don't know what floor division is,
basically, it just doesn't give you the remainder. Now our current test won't catch this because
right now all of our and let me save this here. So right now, all of our divisions currently come
out to whole numbers anyway. So it doesn't matter if we're using floor division or regular division.
So if we run our tests, then we can see that currently all of these tests are passing. So
let's say that at some point that floor division broke our program. And after some debugging,
we traced it back to that and found the problem. Now in that case, it's always a good practice
to go update your test with a test that would have caught the problem that you just found.
That way we can know that we don't revisit the same bugs over and over. So for example,
a test that would have caught this I'm going to copy and assert equals statement here. Now a test
that would have caught this is if we would say, you know, five divided by two, we want that to
actually equal 2.5. But with floor division, that's actually just going to equal two.
So now if we run this, then we can see that we got our error because we're using that floor
division. And we can see that it is an assertion error that two is not equal to 2.5. So that should
point us in the right direction. And then we can go and see why that would be the case. And then
we can find out that we're using floor division there instead of regular revision and fix that,
go back to our tests and run it. And now they're all passing. Okay, so now there's one more thing
within our calc.py file here that we can see. We can see here that we are checking if the number
that we're dividing by is zero. And if so, then we're raising a value error with the message that
we can't divide by zero. So we'll likely want to test that our expectations are working on that
as well. So but this is done a little differently than the other assertions. So let's go back to
our tests and show how we can test that dividing by zero raises this correct error. So there's
actually two ways that we can do this. So first, we could say self dot assert raises. And within
assert raises, first, we want to pass in the exception that we expect. And that is a value error.
And now the function that we want to test, and that is calc divide, now we're not putting parentheses
or any arguments there, we're putting the arguments as arguments to this assert raises method. So
let's look at this one more time. So our first argument is the exception that we expect. The
second second argument is the function that we want to run, but we aren't passing arguments to
the function. So leave off the parentheses. And then we pass in each argument that we want to
pass into the divide function separately. So now the reason that we have to do it this way,
instead of just running the function normally, is because our function would actually throw that
value error. And our test will think that something failed. But we'll look at a way that we can do
this right after this test. So right now, if we run this, then we can see that this is currently
passing. And that's because the 10 divided by zero did throw this value error. So if I was to change
this zero to a two, then it's not going to throw that value error. So if I run that, then it failed.
And we can see that the assertion error is that value error not raised by divide. So which makes
sense if we divided by two. So if we divide by zero, that test passes. Now I've never preferred
this method of testing exceptions, because I just like to call the function that I want to test
normally, instead of passing in all of the arguments separately, like we're doing here.
And we can do this if we test the exceptions using a context manager. Now that will allow us to
handle and check the exception properly. And also call our function normally. So to do this,
I'm actually going to get rid of everything here. And to do this, we say with self dot
assert raises value error. And that's using the context manager. And within this context manager,
we can just call our function normally, like we normally would. So calc divide, and we'll divide
10 by zero and save that and run it. Then you can see that by using this context manager,
that all of those tests still pass. So you can choose either method that you prefer. But I've
always preferred to use the context manager when testing exceptions. Okay, so now let's look at
writing slightly more difficult tests. So I have a simple employee class here. And this is the employee
class from the object oriented series. And if you don't know exactly what this class is doing,
then it's not really important. We're just going to see how this affects some testing strategies.
So basically what this code is doing is it allows us to create employee instances, where it will
set the employee's first name, last name and pay. And then we have some methods that return the
employee's email address, which is their first name and last name at email.com. Then we have a
method that returns the employee's full name, which is just their first name and last name combined.
And we also have a regular method here where we can apply a raise, and it will set their pay to
the current pay times the raise amount, which by default is 5% up here. Now the way that this
code is set up, if an employee's first name or last name changes, then that should automatically
be reflected in the email and first name. Okay, so let's say that we wanted to write some tests
for this. So first, what we would do is we would create a new file. And I'm going to call this
test underscore employee dot pi. And to save time from you watching me type all of these tests,
I'm instead going to grab them out of my snippets file here, and we'll explain exactly what we're
testing. So I'm going to copy all of these down to this point and paste these in here. Okay, so if
we scroll up to the top here, then first we're importing unit test, and also importing our employee
class from the employee module. And then we're creating our test case that inherits from unit
test test case. And then we have three different tests here. So our first test is called test
underscore email. And this creates two employees here. And when these employees are created,
we should immediately be able to access the email property. So we test both of their emails to check
if we're getting the expected values. And then we are changing their first names, and then checking
the emails again here, because their email should change with when their name changes. So this test
email is just testing to make sure that all that functionality is working properly. And then when
we test the full name, it's basically the same thing, we're creating two employees, and then we're
checking their full names to make sure they were created correctly, then we're changing their first
names. And then we are rechecking to make sure that the full names were changed as well. And
lastly, we have a test for testing the apply raise function here. And again, we are creating two
employees. And then we are applying arrays. And by default, that's 5%. So we just test to make
sure that the pay was raised by 5%. So this is basically just a slightly more complicated test
than our simple calculator test. But there isn't anything here that we haven't seen yet. So we
just have three different tests and have some assert equals in here to make sure that things
have the values that we expect. So if we run this, then we can see that all of those tests pass.
Now, one thing that you might notice is that at the beginning of every one of these tests,
we are creating two employees. Now anytime you see the same code over and over, that should be
something that pops out to you that there might be a better way of doing this. Because usually
programmers try to make their code dry, which stands for don't repeat yourself. Now the reason
for that is because if anything ever changes with these two setup employees here, then we'll need
to make changes to every single test where we created these employees. Now this might not
be a big deal when we just have three tests like this. But if you have hundreds, then it could be
a pain to maintain. So it would be nice if we could create these from scratch in one place and
reuse them for every test. And there is a way to do that. So that's what the setup and tear down
methods are for. So at the top of our test class here, let's create two new methods. And one of
these is going to be called a setup and then self as the first argument. And for now we'll just put
in a pass statement there. And the second method here will be tear down with self as the first
argument and another pass statement. Now these are camel cased with the uppercase U and the uppercase
D. So be sure that you type those correctly. Python usually doesn't do that. But I think
this is carried over from some older code. So the setup method will run its code before every
single test. And the tear down method will run its code after every single test. So for example,
we wanted to create these two employees before every single test. So we can come down here
and grab where we're creating these employees. And I'm just going to copy that and paste it here
within the setup. Now in order to access these from within our other test, we're actually going
to have to set these as instance attributes by putting self dot employee one and self dot employee
two. Now if you don't understand how these instance attributes work, then I do have a
video in my object oriented series where I go over exactly how those work. But now that we
have these within our setup method, now we can delete the creation of these employees from the
beginning of every test. So I'm going to go down and remove these from the beginning of all three
of these tests. And now since those are instance attributes everywhere that we reference employee
one and employee two, we need to add self to the beginning. So I'm going to do this with the
multi cursor functionality here within sublime text. But in your IDE or editor, you could just
use a simple find and replace. So I'm going to grab all of these employee ones here.
And just add a self dot before that. And then I'll grab these employee twos here.
And add a self dot before that. So now one more time, let's go ahead and just look at this one
more time here. So within our setup, we're creating these two employees, and it's going to create
these before every single test. So now here within our test, we're saying, okay, self dot assert
equals, and make sure that this employee that we created up here in the setup is equal to this
email. And this employee twos email is equal to this email. And we can reuse those same employees
for every single one of these tests. And they get created a new for every single one of these tests.
So let's go ahead and rerun this and make sure that this is still working. And it does look like
all three of these tests are still passing. Now we're currently not using our tear down method
for anything. But I still want to show you that it exists just in case you have a use case for it.
So let's say, for example, that you had some functions that you wanted to test,
that added files to a directory or to a database, then in your setup method,
you could create the test directory or the test database to hold those files. And in the tear
down method, you could delete all of those so that you have a clean slate for the next test.
Now just to be more clear where all of this code is being run, let me grab some code here from
my snippets that has print statements included throughout all of our tests. So I'm going to
grab from here down and replace this employee test here. Now this code is exactly what we just had.
But now we have print statements throughout our code. So we have a print statement in the setup
and in the tear down and also within every single test case. So now if I go ahead and run this and
scroll up here to the top, then we can see that we have the setup and then the test and then
the tear down. And it does this for every single test set up the test and tear down set up test
tear down. Now another thing to notice here is that the test don't necessarily run in order.
So you should never assume that the test run straight down through the script. Now that's
why we need to keep all of our tests isolated from one another. Now sometimes it's also useful to
have some code run at the very beginning of the test file, and then have some cleanup code that
runs after all of the tests has have been run. So unlike the setup and tear down that runs before
and after every single test, it would be nice if we had something that ran once before anything,
and then once after everything. Now we can do this with two class methods called setup class
and tear down class. Now I have these in my snippets also. So let me grab these so we can see
what these look like. And I'll paste these here at the top of our test. And let me fix the indentation
there. Okay, so we can see that these are class methods. And if you don't know what that means,
basically, it means that we're working with the class rather than the instance of the class like
we were with self. Now I have an object oriented video on this as well where I go into this concept
more in depth. And I'll leave a link to that in the description section below. But once we have
these class methods in place with these naming conventions of setup class and tear down class
with that camel case, if we run this code, then if we scroll up here to the top, then we can see
that it runs setup class first, and then the setups tests and tear downs for each test. And then at
the very end here, it runs that tear down class. Now the print buffering is a little strange with
that. So it ran after this line here. But it ran tear down class at the end of all those tests.
Now this setup class and tear down class can be useful if you just want to do something once
and is too costly to do before each test. So for example, maybe you want to populate a database
to run test against now as long as you're just reading from the database, then it might be
appropriate to just set this up once in the setup class method. And then you can tear it down in the
tear down class method. Okay, now I know that this video is getting a bit long. But there's one more
thing that I wanted to show you about unit testing that I think is important for most people to know.
So sometimes our code relies on certain things that we have no control over. So for example,
let's say that you have a function that goes to a website and pulls down some information. Now if
that website is down, then your function is going to fail, which will also make your tests fail.
But this isn't what we want because we only want our tests to fail if something is wrong with our
code. So if a website is down, then there's nothing that we can actually do about that. So we're going
to get around this with something called mocking. Now there's a lot that we could look at in terms
of mocking and it could probably be a video all on its own. But let's take a look at an example
of some basic usage. So one more time, I'm going to go over here to my snippets and grab a little
bit of code here. And this is going to be a new method in our employee class. So I'm going to
paste this at the bottom of our employee class, and then fix these indentations. So this is a
sample method that we're going to pretend that goes to a company's website, this line here using
request dot get and pulls down an employee's schedule for a given month. And real quick,
I also have to import the request library here at the top. So import requests and back down here
in our method. So we do the request dot get for this website for this employee and for this month
to get their schedule. And if the response is okay, then we want to return the text of that response.
And if the response is not okay, then we want to return the text bad response. So the information
from that website is something that we would want to mock because we don't want the success of our
test to depend on that website being up. We only care that the get method was called with the correct
URL, and that our code behaves correctly, whether the response is okay, and whether the response
is not okay. So to do this, let's import something from mock called patch. So up here at the top of
our test employee module, I will say from unit test dot mock import patch. Now there are a couple
of different ways that we can use patch. So we can use patch either as a decorator or as a context
manager. And it will allow us to mock an object during a test. And then that object is automatically
restored after the test is run. So let's create a new test down here at the bottom for that monthly
schedule method. And we'll just call this test underscore monthly. Oops, and I wanted to call
that monthly schedule not monthly method. And then we'll pass in self. And so in this example,
we'll use patch as a context manager. So we'll just say
so what we said here was with patch, and then within patch, we pass what we want to mock,
and we want to mock request dot get of the employee module. And then we're setting that equal to
mocked get. Now you may wonder why we didn't just import requests into our test, and just mock
that instead of the employee request. But we want to mock these objects where they're actually used.
So it's actually used in this employee module. So that is the request dot get that we want to mock.
Okay, so now when request dot get is run in the employee module, it's actually going to use
our mocked get variable here instead of the regular get method. And we can just assign
the return value instead of actually going out to the website. So we can test a successful call
by saying mocked get dot return value. And if we look back at our employee module,
we want that return value to have an okay of true. So I can say return value dot okay is equal to
true. And let's also set the text of that return value so we can set the text equal to, you know,
something like success. So if you look here in our employee module, if it returns okay as true,
then we should get our response text back. So now within our context manager here,
let's just run our monthly schedule method just like we're testing it. So we can say schedule
is equal to self dot employee one dot monthly schedule. And we'll just pass in a value of
may to get the may schedule. Now one more awesome thing about these mock objects is that they
actually record when they were called and with what values. So we want to make sure that the
get method was called with the correct URL. So to do this, we can say mocked get dot assert
called with and this is just a method of that mocked object. And now we can test that it got
called with the correct URL. So since this is employee one here, the last name is Schaefer
right here. So this should have been called with the URL HTTP company.com slash Schaefer. And the
month that we passed in was May. And if you're wondering where I get that here in our employee
class, this is where it creates the URL here. So it's saying HTTP company.com and then the
employee's last name and then the month that we passed in. So that's the URL that it should have
called that get method with. Now after we know that the method was called with the correct URL,
let's make sure that it returned the correct text, which we set to success. So let's say self
dot assert equal. And we want to assert that our schedule, which is the response is equal to
success. Okay, so now if we run this code, then we still have our print statements in here. But
we can see down here at the bottom that it ran for test, and that they all passed. Okay, now last
thing is that we want to test a failed response. So to do this, we can just do the exact same thing.
So I'll just copy all of this here and paste it in down below. But instead of this okay value
being true, I'm going to set this to false. So that will test a bad response from the website.
And if that okay value isn't true, then our monthly schedule function should just return
the string bad response. So we actually don't need this text value here at all. So we can just
remove that. And just to switch this second test up a bit, let's change our employee here to employee
two. And we'll use the month of June, just to make these tests a little better. So now the
get method should be called with the URL of Smith, which is our employee to if I scroll up here to
the top, you can see our employee to is Smith. And then that month that we used is June. So I'll
save that. And lastly, instead of our result equaling success, it should instead return the text
bad response with an exclamation point. So now if we run this, then we can see that all of our tests
are still passing. So I know that this mocking can be a little confusing when you first see it.
And like I said, it could probably be a video all on its own. But you don't use it a whole lot
unless you're, you know, accessing things like URLs and things that are basically out of your
control. So you don't use it a lot. But whenever you do need it, it is definitely nice to know.
Okay, so I think that's going to about do it for this video. But before we finish up here,
let me mention a few things about best practices. So first of all, like we saw in this video,
tests should be isolated. So if you're still unclear what that means, basically, this just
means that your test shouldn't rely on other tests or affect other tests. So you should be able to
run any test by itself, independent of the other tests. And one more thing that I wanted to mention
is that you'll notice that in this video, I was adding tests to existing code. Now you may have
heard something called test driven development. And basically what test driven development means
is that you write the test before you write the code. And I know that that might sound a little
strange. But sometimes I found it useful. I don't strictly follow test driven development to where
it's something that I always do. But basically, the concept is that you should think about what
you want your code to do, and then write a test implementing that behavior, then watch the test
fail since it doesn't actually have any code to run against, and then to write the code in a way
that gets the test to pass. So if you ever hear someone talking about test driven development,
then that's what they're talking about. Okay, so I think that is going to do it for this video.
I hope that everyone now has a good idea for how they can get started with unit testing.
Now any testing is better than no testing. So don't feel like you have to be an expert with mocks
and things like that before you start writing any tests. Even if you just write some basic
assertions, then it's better than not having anything. Now there is another test framework
out there called Pi test that a lot of people like to use more than this built in unit test
library. And I'll be doing a video on that in the near future so that you can compare the two
and see which one you like better. Now if anyone has any questions about what we covered in this
video then feel free to ask in the comment section below and I'll do my best to answer those. And
if you enjoy these tutorials and would like to support them, then there are several ways you
can do that. The easiest way is to simply like the video and give it a thumbs up. And also it's a
huge help to share these videos with anyone who you think would find them useful. And if you have
the means you can contribute through Patreon and there's a link to that page in the description
section below. Be sure to subscribe for future videos and thank you all for watching.
