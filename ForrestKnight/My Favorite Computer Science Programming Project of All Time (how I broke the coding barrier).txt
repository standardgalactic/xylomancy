Earlier today, I was looking at some, uh, old computer science programs that I wrote back in college.
Gaussian Elimination in C++.
Forloup. Nested Forloup. Nested Forloup.
Yeah, well, uh, I like Forloups. What can I say?
De-deck of cards? Whatever that means.
I don't think there's anything I hated more than header files.
The only nice thing about it is that my professor would, like, create the header files for us,
so it really made us writing the C++ file a whole lot easier.
But other than that, screw header files.
That's probably why I became a Java Dev.
A programmer, too, where, like, you would take all of your C++ knowledge
that you wrote that program in and then convert it over into Java?
Java, Java, Java. I thought I created this in C++.
Ah, I did create this in C++.
And that was the plan for this video.
I just wanted to kind of take y'all through that, give some of my thoughts,
and kind of just go through each program, and, but, like, I'm going to redirect it
because I found this wrestling tournament simulation program on no way.
This is a wrestling tournament. I forgot this even existed.
This was that one program that, like, just made everything make sense for me.
It was in advanced data structures and algorithms,
and it taught me more, well, it instilled, like, programming fundamentals
and me more than, like, any other class or program that I ever wrote.
It was the program that just, like, broke down the coding barrier for me.
That moment that just everything started to make sense.
Oh, my gosh, and I have all of the requirements for it, too.
Huh. I wonder if, I wonder if Morse would mind if I leaked these.
What would that be, like, six years after the fact?
I was just going to go through some of these programs, but I got a better idea,
and I kind of spilled coffee all over my desk right here, and it got in my cl-
Look, we got all the code here.
We have all the requirements here.
So instead of just, like, briefly going over all of these, like, random computer science programs
where you don't really dive into too much over the course of, like, ten programs,
let's go into more depth on this one.
We can discuss the requirements.
We did a whole entire design plan for this.
We can go over the code and my poorly written, no header file, everything,
all classes in one file looking at code.
So let's do that.
I got to get my baron straight here, look at some of the requirements,
and, you know, take a sneak peek at the code so I can actually explain it well to y'all.
And also, I feel like every time I move my mouse that I'm just, like, dipped in coffee.
So got to clean that up a little bit.
You know, zen, cool.
All right.
And so, yeah, I'll be right back.
Until then, let me show you what's probably the coolest coding game I've ever seen.
It's called Break the Code to 2022 by .techdomains, who is a sponsor of today's video.
And I mean, first things first, you can tell that this is a Windows 98 themed website,
which is absolutely sick.
But the game, it's an action-packed puzzle solving code breaking experience set in,
well, 1999.
We have the sign in, we have the rules, we have the prizes.
Let's go to the rules.
So the way it works, it's a contest that's structured into four drives that are made available
to the code breakers based on the schedule.
That is this down here.
So drive one starting already on March 25th.
Drive two starting on March 31st.
Drive three on April 6th, and then four on April 12th.
So we have the end date on April 15th.
However, make sure you keep note the announcement of winners.
Those dates are earlier than the end date here.
So if you want to participate and win some of the prizes, well, those are the dates right there.
Speaking of the prizes, I love the prizes.
90s themed boombox, the PS1.
I still have my PS1 in the closet set behind me.
But each one has a grand prize, a modern grand prize.
This is a custom skinned PS5.
Drive two is a custom skinned MacBook Pro.
Drive three is $5,000 worth of ETH.
But I mean, also look at the one right above that.
Count or you've signed matrix script like that is sick.
Drive four is the grand grand prize.
It's a code breakers layer, a custom gaming rig and monitor with a motorized chair.
So if you really want to test what you got, you want to see how good you are at coding.
And if you can go toe to toe with some of the best out there, click the link in the top of the description.
It'll take you to this website right here.
Estimated time remaining right now is 18 days.
When you're watching this video, it's going to be less.
So take advantage of the time that you got right now after watching this video.
And a matter of fact, I'm going to sign up myself.
Oh, GitHub, Digital Lotion, Dev.2, some of the campaign partners.
Oh my, this is sick.
Clippy down here telling us what's up.
Start.
We have everything that we'd ever need.
Terminal, Web Explorer.
Let's go to terminal real quick.
Oh, not traditional Windows terminal, but it's definitely improved because we don't have backslashes.
We have this guy right here.
I already typed help.
Let's type hello.
Hello world.
Oh, I should have seen that coming.
All right, I'm getting a little distracted here.
If you're interested, link in the top of description.
Let's get back to the video.
If you went to the same college as me, ODU for computer science, then you may have had Professor Morris.
And if you had him, then you may know that he loves wrestling.
If not, bring it up to him the next time you see him.
I mean, in his own words, wrestling is the oldest and greatest sport in the world.
So he decided we're going to have a wrestling tournament simulation.
And that's why this was our final program.
As a class, we work together to determine the semantics for this particular tournament.
Like weight classes, schools, seasons, tournament, that type of stuff.
And that's where all of this comes from and basically everything that you see here.
And that just lays everything out for us.
We have a conference of eight schools.
We have 12 weight classes, one wrestler per weight class per school, all of that.
And we use that to create the design plan, which is what are the objects, what are their attributes,
what are their behaviors, collections, how do they interact, and what is the development schedule?
And here we put together a loose, rough draft of that design plan.
We have all of our objects.
We have our attributes of those objects.
We have our behaviors of those particular objects.
And then we have the development schedule.
I jumped ahead to this because it'll give you a better lay of how everything is going to be structured.
It's how the wrestling season is, as well as how our code is going to be generated.
So of course, we start off with wrestlers.
That makes complete sense, right?
And those wrestlers aren't a particular team, which is their school.
We have the regular season, how that is made up right here.
You know, two teams, every single school team wrestles every single other school team twice.
That determines how good that particular school is, so we can seed them for the tournament.
And that's what's going on right here.
This almost directly translates to what's going on in this code right here,
with a slightly more finalized draft of all of that right here,
except I only did four objects in their attributes and basically nothing else.
Let's go class by class real quick to give an overview.
So we have a wrestler.
This is like the structure of a wrestler where we, you know,
we have the weight class that it is in based on its weight.
And then we have the ID number, which is unique for that particular wrestler at that particular school.
And then we have the ability score.
Oh, that thing is sick.
Late 70s Camaro SS going to my neighbor's house.
Okay. Anyway, so we have the weight and weight class.
We have the unique ID for that particular wrestler.
And then we have the ability score, which will later be determined based on some math here and there and whatnot.
And then we have the record down here.
So this is the overall, like we have our object, we have our object,
we have all of the attributes, we have all of these attributes.
So that's how it translates from the design plan over here.
We're going to use this object later to generate the wrestlers.
As a matter of fact, that is exactly what we do in here.
So we have the school class and with the school class, we need the name and then we need the team.
We did change this up a little bit instead of having like a object that only has one attribute.
We just took out that object altogether and put that attribute into school just like that.
And again, this is just the overall structure of the school, but we're generating the wrestlers as well.
So for each individual wrestler, which again is going to be 12 wrestlers per school, we have all of this.
This is basically all of the weight stuff.
Then we have the ability score.
That's the math I was talking about earlier in order to determine the ability score.
Which is how good the wrestler is and you may recognize this.
This is one wrestler with all of the new data being passed into and stored in the wrestler's array.
So we have the weight class.
We have the weight.
We have the name.
This will be passed in later through this parameter right here of the school plus I plus one because that's how you determine the wrestler.
If you have school 200, that's how we name our schools.
You're going to have 12 wrestlers in that school.
So, you know, the first wrestler will be 201, 202, 203, all the way up to 212, which is exactly translated right here.
And then of course, the ability score that we worked out right here, all stored as an individual wrestler.
We get that wrestler based on the weight class.
And then we have the total school score, which is taking the records from the wrestlers of that school to determine how good that school is.
So within this, we probably could have added, you know, the school's record, right?
We have our conference class, which is basically the overarching thing.
We have the five school of the eight schools that are in here.
We have the schedule.
So like the season and then maybe the tournament later and then the advantage matrix for each weight class starting off with this for loop, which is generating each school.
Just like within schools, we generated each wrestler.
We want to create eight schools, 100, 200, 300 to 800 each school has 12 wrestlers.
And those are the two parameters that we'll be throwing in to school.
We have our advantage matrix right here for our weight classes.
And then we have our season simulation, which is basically just matching every school with every other school because every school needs to wrestle each other.
And then our total school score.
This is where it comes full circle.
We determine the best school and basically the rankings.
There's eight teams.
There's going to be a number one slot, a number two slot all the way to a number eight slot.
And this is when we determine the best school because we're going to be using this to seed the tournament.
Remember, all of this is still inside conference.
So we should probably have a few more attributes in here, but that's neither here nor there.
Let's just focus on the code.
Our individual wrestling matches are right here based on the ability score and this math that we store in Sigma and passing in the parameters of the ability score of the first wrestler and this math right here.
Basically to determine the score, you know, if score one wrestler one is better than score two of wrestler two, then well, wrestler one wins.
If not, then they lose.
And obviously everything else is stored properly according to that.
And while all of this is one wrestler versus one wrestler, the individual match, we have the overall schools match, school one versus school two.
And you remember, get wrestler.
I believe that was in our school object.
And we get those wrestler and then we make each individual wrestler wrestle based on their weight class based on their school.
Then we have our comp structure, you know, aside from all of the, oh, look, this guy got a haircut comments.
Tell me what this structure does.
What does it do?
Now our match class, I don't exactly remember why I did it like this.
It's a lot of the same stuff as what we've got going on here.
But in this match class, in order to determine and basically label the wrestler as the winner or the loser as the loser.
Great spelling.
Oh, never mind.
I know why because we needed something that was just that simple for the tournament.
So let's go back up here.
This is the match class.
Basically, we're just determining winner and loser within the tournament.
So the tournament again is after the season that we seed, which is going on basically all right here in order to have the best school,
which is going to be the first in the participants array, aka rank one versus rank eight,
who's going to be last in the participants array.
And this is where the this is where the match comes in.
As you can see, we have our winner and our losers.
So that's what this is doing.
It is simulating the tournament for the rest at the end of the wrestling season.
Then we're printing the winner for each individual weight class.
And down here is where it all comes together.
So we are just doing the simulation of the season.
We are getting the conference winner based on the best school score.
And then we are getting the tournament winners down here.
I guess we're not printing that out.
Oh, no, we are print winner.
Oh, yeah, that's what we're doing.
So this is the single best winner of the season.
While each time you print out this are the best wrestlers for that weight class and the tournament.
Aha.
So yeah, that's how the wrestling tournament simulation works.
Like I said before, if you're interested in this, maybe even doing it yourself,
all of it will be on GitHub and repository that I'll link down below.
Feel free to use the design plan, the requirements, whatever with whatever language that you want to build this with.
I don't know how many people actually do.
If you do build this, let me know.
If you build it on any sort of level, let me know.
I'm not saying I'm going to be able to give you advice on how to solve this problem or that problem.
But like this video, it's fun to look at code.
And I don't know if you can guess, but my next video may or may not have a stay tuned.
If you're interested in that, I think that'll be a really fun project.
And then I have a couple other project based videos around the corner that should be going up this month.
That's really my way of saying subscribe if you aren't subscribed so you don't miss out on those videos.
Like the video if you liked it.
Thank all of y'all for watching, especially for watching since I haven't uploaded in over two months.
Well, until this video, is that how I do the outro?
I don't remember.
See y'all next week.
See y'all next time.
Something like that.
Let's just let's just stop the record.
