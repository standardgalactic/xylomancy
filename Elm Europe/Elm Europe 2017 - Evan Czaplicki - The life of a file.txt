Welcome, everyone. I want to start just saying thanks, everyone, for coming. This is kind
of crazy. I'm Evan. I made Elm. It's very exciting to be here. So I want to say thanks
one, thanks for folks for coming, thanks to Thibaut and Guillaume for saying things up,
and then thanks to everyone who is helping get the technology set up, and then this thank
you is like outer proportion. So thank you to who had the L have this tail. I really
appreciate that. But yeah, so thanks, everyone, for coming. And I want to emphasize sort of
a question that has sort of guided Elm for the last couple of years, which is how do
I grow Elm code? And so this is a question that somehow always sounds topical. So who
remembers Elm before the Elm architecture? Before the Elm architecture? Okay, there
are people out there. Okay. So there was a time when that didn't exist, and people would
say how do I write a program? And so we sort of observed, okay, maybe we can call this
thing there's a model, there's an update of you. We saw that pattern, and they were like,
okay, that's cool. How do I grow an Elm program? Okay. So we had some more examples.
And showed it, okay, you can reuse functions in this kind of way to help make a view. And
people were like, okay, cool. But how do you grow an Elm program? So I want to take the
next step in perhaps a never-ending journey. And we're going to do that by tracing the
life of a file. So we'll see it start small and gradually grow, and then grow a bit more,
and then eventually break off into two. And I think as we go through this path, it won't
necessarily be surprising or difficult. But I think it's hard to see if you're coming
from JavaScript. So before we get started with the life of a file, I want to start with
some JavaScript folk knowledge that may be leading people astray. So one thing that I
see a lot is this idea that shorter files are better. So an extreme example of this is when I
was doing the benchmark comparison between React and a bunch of other frameworks in Elm,
the Ember one just had so many files, I just didn't get it. This is a greater than file.
And it just felt like this surely isn't the easiest way. So when I see this thought process,
it sort of feels bizarre to me. And so the way I can understand it is the contact is as the lines
of code increases, the probability of sneaky mutation approaches one. It's going to happen if
you're writing JavaScript code. So if you have a thousand lines of code, there's going to be some
object that accidentally gets shared, and two people are going to be mutating it. It's just going
to happen. So therefore, for shorter files, it fills this very useful function. Another thing that
people just know in JavaScript is you have to get the architecture right from the beginning or
you're doomed. It's just not going to work out for your project. This you barely need a justification
because obviously I'm sure many of us have seen this play out in companies we either work for or
people we know. And the justification behind it is refactoring is very risky. Sometimes it's
cheaper to just rewrite the code. And I think that accounts for some of the churn in JavaScript
frameworks. People like, well, this didn't work. I could try to fix it, but it'd be just as easy
to try a different thing that maybe doesn't suck. So we have these sort of intuitions and habits
that are grown out of the actual constraints of JavaScript and of the languages we use. But in
Elm, the probability of sneaking mutation is zero. If you have a thousand lines or ten thousand
lines, it's just like not possible that a value gets shared and suddenly there's spooky action at
a distance between these two chunks of code. So this whole premise is gone. And so I don't see how
we can draw the same conclusion anymore. Similarly, refactoring is cheap and reliable. You have
types to help you out. The compiler is going to guide you through the process. So you can end up
changing 10 or 20 files and be pretty confident to end that things are fine. So again, this premise
is gone. And so this idea that the architecture has to be right from the start doesn't really play
out in practice. So the big thing to note here is that the way Elm is designed changes how you
should grow code base. And we have a lot of habits that come from, like we don't even necessarily
all know the justification of these things, but we know like, oh, that file seems too long. That's
probably that, like we have these senses that guide how we write code. So the rest of the stock is
sort of challenging these and providing a new way of seeing code that can help grow a program. Okay,
so the life of a file. We might start out with a nice little file. Let's say I, and the blue is like
the model, let's say the data structure, and then there's some logic. And maybe this is, I have a
personal like reading list, and I want to just keep track of the books that I'm interested in. And
maybe I have 200 lines of code. I'm not crazy. And so I add some features. I want to be able to mark
the books as read or not. And maybe I want to reorder them depending on if one starts to seem more
exciting. And so now I have about 400 lines. And I think a lot of folks at this point would be like,
like something's wrong. There's a problem. That's generally not that's not how I would approach
programming in Elm. It's not how things work in standard. Having a file this long is pretty standard. So
if I go through the compiler, that's I'd say the average. And so maybe add some more features. I can
add annotations to each book of quotes that I really like. Things I want to remember. So now I have
600 lines of code. And it's like, okay, now it's truly a problem. Not really. I don't know. I think you
shouldn't be too scared of a file growing long. So this is something that will typically happen. Now, at
this point, it's likely that I'll say, you know what, I think it would be good to have the data
structure for my library where I can reorder books. And a data structure for books. Where is it read
or not? What are my notes? And then I can start to organize my code around those two data structures. So
I can say, okay, mark this book as read, add this note. And so the functions in my code start to
organize around those data structures. So, hey, we discovered this better data structure. So the next
step that may happen is we split around the data structure, right? So once we discover that there's
this other way, like, chunk that we can grab onto, that can become the heart of a nice module. And so
this is the typical process that I always follow. It's just basically grow until I find a data structure
that I can split on. And if I don't find it, it's fine. So I'd encourage folks to sort of play with
this in your own code. And sort of, if you're feeling uncomfortable, like, oh, this seems like I have
too much code here, just, like, push into that feeling and, like, see if it actually is warranted. Like, is
there actually a problem? Or is it just, like, a feeling that you have based on experiences in other
languages? So, okay. So at this point, this is basically just, like, an unsubstantiated claim. Let's see
some more concrete examples, right? Ones where the code is more elaborate than lines. So, okay. So I
want to look at two examples. One is the sort of settings. So you can imagine this is, like, the
settings you'd have in a Facebook or Twitter or Pinterest or whatever, like, do you get email
notifications? Do you want video audio play? Do you want to use location? These kinds of things. And
you could just say no. But they want to give you the option to say no. The other situation is checkbox is a
bunch of fruits. Maybe I'm going to, you're going to get lunch and you are able to pick out which fruits
you want, then you can have that one. So before we dig into this, I want to sort of take a second to
ask people, like, what are the questions and concerns when you see these two that pop into your mind?
Like, when you think about how the code is probably going to look, what pops into your mind? Okay. Yeah.
Someone said, oh, oh. Okay. Okay. Okay. We're good. We're good. Someone said generic checkbox list. So
yeah, this idea of, like, how do we share, like, clearly we have checkboxes here. Like, sharing needs
to happen. Okay. This, I'm going to proceed by showing how I would address these. And then we'll
see if that intuition plays out. So when I look at the settings, the first question I ask is, how do I
model this information? Right? So do I use a record where I say there's email, there's video, there's
location? Do I use a list of pairs where the string would be email notifications true? Autoplay false?
Location false? Do I choose a dictionary, which would work similarly, but now it's unique on these
things? Or do I do this other one that's, I have a list of strings. These are all the options. So email,
autoplay location, and then a set of which ones are selected. So this would just be email. And we can
think of more. It's a good idea to get in the habit of just thinking, what are all the possible ways I
can represent this? So at this point, you want to say, okay, well, which one should I do? So one trade
off here is this one gives us the benefit of types, right? So if we're messing around in our code, and
someone misspells email or misspells one of the things, the compiler is going to give us some help. So
that's nice. And these other ones are stringly typed. So if there's some misspelling, it's sorry, like
things are going to go weird. Another thing to think about is the order in this one is just determined
by the view. So in my model, in my record, I can update however I want, it can appear however I want
it to appear in my code. But ultimately, in the view, I'm going to say, show the email, show the
notification, show this. And if our designer says, okay, we actually want to move use location above
because everyone wants to turn that off and no one can find it, we get a lot of support tickets and
they're really mad at us. So I get that, just change it. Okay. And then it becomes very easy in this
world. With this one, the order is stable, but you can actually change it in the update, right? So
we could, in the same time we're updating a bool from true to false, we could just swap, reverse the
list. And so suddenly the UI is totally different based on stuff that's happening in the update code. So
someone writing update code has to think about what was it that that designer said a while ago
about support tickets. This one, order is dependent on the keys. It's just like not a good idea. And
this one, the order is stable again. So it seems like we've got a pretty clear winner in this case.
So let's just run, let's run with this. So, okay. So here's the initial version of it. We can check
stuff. And we can, this is kind of small, but we can see people messing with the record. Oops. Okay.
So when we look at the code, can people see this? Okay. Okay. The model is what we talked about. We
have the record with our Boolean fields. And the defaults, you know, everything needs to be true,
right? We need autoplay to get that ad money. We need location on so that it can be location specific
advertising. Hey, I noticed you're in the neighborhood of, and we need the email so that they can
notify you to log in and see the autoplay ads. And then in our update, things are relatively
straightforward. We have a way to toggle each of these things. And if I mess up and say I want the
model's email, it's like, hey, I think you have a typo. So we're getting that benefit that we wanted.
And finally, we have a view. So we have a field set. There's labels, and each one contains a
check box that's, we say, okay, here's the email notifications one. Is it checked? Here's the
autoplay. Is it checked? Et cetera. Now, one of the things that you can do is say, okay, these
actually are pretty much exactly the same. So we can factor out some of this code. So I can say
view check box. I don't know if it makes sense to start with the type, but I practiced this, so I
know what it is. But we can essentially chop out this code, which appears a bunch of times, and fill in
the blanks. So checked is checked. Message. Description. And then where did my mouse go? Okay,
there it is. And then we can say, let's just replace all of these with the check box. Okay, so is it
code shorter? Not really. But if we are applying styles to all of these in the same way, now it's
a lot easier. We can do it in one place and be sure that it happens everywhere. So this is a nice
refactor given the current state of affairs. So let's see if I did it right. Yeah, okay, cool. So we
come back, we have this going. It's nice. And so we get a new feature, which is autoplay
customizations. So instead of just autoplay, we want people to be able to choose, should it play
audio by default? And should it play on Wi-Fi only, or will people allow it on cellular data as
well? So when we go back, the thing to look at is our model again. So one way to deal with this is,
well, okay, we have two new things. So we have autoplay audio and autoplay
Wi-Fi. I'm going to call it without Wi-Fi. I don't know, because it helps me understand what the
bull would be. And then we can go and mess with our view. But this is kind of lame, because we can do
it that way. And a designer will say, well, I want it to be where if there's nobody autoplay, then you
can't mess with the autoplay settings. You're not doing that, so those should be disabled. So
suddenly we have this interaction between these three fields where we always have to check autoplay
before we show this, and that determines whether it's disabled. So we're starting to get these
dependencies. So a better way to represent this would be to just actually model it directly. So
autoplay is off or on. And if it's on, there's audio or without Wi-Fi.
So in this version of reality, you can't mess with any of these options without
pattern matching on or off. So if you want to change them, you have to say, okay, let me expand
autoplay. If it's off, oh, I don't need to deal with it. And that also means in your view, you handle
these two scenarios, and you say, okay, is autoplay on, in which case I can show these things. If it's
off, then I don't. So it's sort of forcing any future user of this code base to understand that
there's a dependency between these fields. Now we say, okay, we'll show this to the designer again.
But the thing is, if we turn things off, we lose all of our options. So we want those to be
preserved. Some users will toggle this a lot, and it's annoying. So what we can do is say, okay,
type alias autoplay settings. And then we can actually just have it on both, but still force
people to go through the on off check before you're doing any logic. So, and then this will play out
throughout the course of the code. We can, a way to approach this was, well, now we have this
autoplay idea. Maybe we can start to write some helper functions to make it nice to work with.
So maybe we can say toggle autoplay, and it switches between on and off in a nice way. And so as we
create these helper functions, we start to have functions that are all built around the data
structure, which is that pattern I was talking about. So once you start to see these kinds of
chunks of code, you get these units that can break out and make your code nicer.
Okay. So we have that going. So now we come to fruits. And at this point, the question
asked yourself is, like, do you think it's going to work out the same way? So yeah, so let's take a
look. So again, we can choose between different data structures. And I picked the same ones. So
record, list of things, dictionary, the list of options and which ones are selected. So in this
case, our constraints are very different. So we work at like fruits.com, I don't know.
And the fruit availability, it's seasonal. We want to bring you the freshest seasonal fruits for
your region. And like, maybe we're out of bananas today. So we don't want to just let people say,
oh, I definitely only want bananas. Oh, sorry. Here's a mango.
So if we use a record, does that mean we would have to ship code every time availability changed
in a particular region? So that doesn't seem great. But in all these others, we can just load
the options from the server. That seems like a benefit. From there, one thing we might consider
is, well, which of these will be easier to just use? Which one will the code come out nicer?
So in this case, we'll probably use list.map to do an update. We can scan through and say,
if it's this fruit, then I'll toggle it or not. With dictionary, you can use update and say,
okay, I want to change this particular fruit. And with this one, we can use set insert and
remove. So we don't have to ever mess with this. We can just say, okay, they want to add this to
their set of their selected set, and they want to remove that one. And again, we have the ordering
problems from before where maybe our head of fruit marketing is like, we need to put bananas up at
the top because that's higher margin, and that's what we're all about here at fruits.com. Or maybe
someone else is like, well, we really should put mangoes up at the top, think about the nutritional
content, think about the bottom line. So there might be some need to change this around.
Perhaps dynamically. So again, dictionary isn't ideal for that kind of scenario.
So let's go with this one where it'll be kind of nice to add and remove things to the selection,
and we can mess with the order quite easily. Okay, so now we can go look at our fruit situation.
Which, and then we can just select, it's great. And if we look at how this goes,
we have our fruit list, which is very stable, and then selected, which is changing as we mess with
stuff. Okay, so let's check out how this code works. Fruits. Okay, so in our model, we say we
have two things, the fruits that are available, and the ones that are selected. And for our initial
model, we're just pre-populating with some fruits, but you could load this from the server.
And our selected set is none are selected. And then update logic, appreciate forward. If a fruit
is selected, add it to the selected set. If it's deselected, remove it from the selected set.
And then, is this going to fit? Okay, cool. So in our view code, we again have a field set.
Okay, you can see the mouse here. We have our field set, and then we're mapping over all the
fruits. And so when we do that, we say, okay, I have a fruit. Is it in the selected fruit set?
If so, it's checked. And then we draw things in a way that looks quite similar to what we saw
in the previous example. So it's a checkbox, whether it's checked or not, what the title is.
But the thing that's actually interesting about this code isn't the shared part. The part that
they have in common is, like, whatever, seven lines. It's not very crazy. And the chances that
they're going to stay exactly the same between these two different chunks of code is very low.
So thinking, like, focusing on just this, like, oh, I've seen a checkbox before somewhere.
Like, doesn't really give you a lot in terms of the structure of your program.
So at this point, we have a pretty good, pretty good fruits app going on, fruits.com,
business is booming, margins are good. Okay, but a new feature comes along, which is only two
fruits can be selected. We have all these folks out there who want, like, three fruits, six fruits
even. We don't have the distribution channels for that. So we want to cap out at two fruits per
person, you know, pick a favorite, like, pick a side. So this is kind of a tricky situation we
have found ourselves in. So we have this set, and we kind of need to limit the size somehow. Oh,
there's one other constraint, which is we need to check out a different fruits. No.
Fruits one, maybe. No.
Okay, I deleted a file that I should not have deleted.
But the thing that I wanted to show was we want to maintain the order that they were selected. So
if I select apple, then apricot, then banana, I want the oldest thing to be the one that's
forgotten. So I want to keep the most recently selected as I go through things.
So with a set, it's really hard to keep track of what was the order that things were added. We can
remove one of the things, but we don't know which of the two it was. You'll get this very wonky
behavior. So at this point, we can ask, well, maybe it'd be good to think about the data
structure we're using. So we want to choose two fruits in particular. So maybe we say, okay,
so I'm going to choose a string and a string. But what happens when nothing is selected? We
need to account for zero selections, one selection, two selections. So that's no good. Maybe we can
say maybe string. So all of these can be optionally selected. But there's this weird case where if one
thing is selected, we don't know if it's going to be the left or the right thing. So this doesn't
seem great either. So maybe we can say, okay, there should be this type two, and it's either zero
or one or two. Okay, that's pretty nice. You can imagine inserting into zero, you go to one,
inserting into two, and then into you maintain some order moving things along. And that design
seems okay, but we know head of fruits marketing. He's going to say, okay, well, in tropical areas,
we can actually give them more fruits. So they're going to want a limit of three. But in Iceland,
they only get half cucumbers there. That's just the rule. I don't know. That is actually how it works.
So we're probably not going to be able to just stick with two. There may be some place where we
need three or different limits. So another way we could do this is just a list of string and then
limit the size. So essentially add to the front and drop things off the back. So I don't know.
It doesn't seem perfect. Like clearly you can just add 20 things to it. But it sort of has potential.
Let's explore that route. So instead of this being empty, this is an empty list.
The cursor just disappears. Anyway, so when we select something, we want to say
list.take2 fruit on the front of our selected list. So this is saying put the fruit on the
front and then just take the front two. So whatever else is there, we'll drop it.
And then when we deselect, we can say list.filter. The fruit should not, any fruit that's not the
one we, that's a lot of knots in one sentence. We want to only keep fruits.
You get it. We want that fruit to be deselected.
And then in our checkbox code, we want to say and said list.member. And I think that's everything
except we don't need that anymore. Okay. So let's see if I did this right.
Hey. And so you can see it's maintaining the order that I clicked things. So if I,
I don't know, it's kind of hard to remember. It's easy if you go in order and you can see.
It's working nicely. Okay. So we're maintaining our two fruits per person situation. But when
we come look back at our update code, it's getting, it feels like trickier, right? And as we grow
fruits.com, like maybe someone won't realize the take two is not, oh, just some fine choice. It's
like head of fruits marketing decided that was two and you can't change that stuff. So we want to
have some more security around this code. So one way we can do that is to start to break out
the particular stuff around that data structure. So we, we know there's this selection list.
We can make a function that is
along these lines. So let's do it in the update part. Insert, oops, insert fruit list.
I'm going to leave off types for now just for speed.
And then I can say here, insert fruit. And then I can also say remove fruit from the list.
And we'll do it the same way.
So this code gets a bunch simpler as well. Remove fruit.
And we can do the same thing with the checking for membership below. Now at this point it's sort
of coalescing into, oh, there's this kind of data structure that's specifically about maintaining
just two things in the list. So I'm going to check for time to see how much live coding I should do.
Okay. Well, let's, let's start to follow this idea of like, we're starting to recognize a data
structure. So let's try to break that out. So I can say fruit list. And I have this type alias
fruit, selected fruit. So we're starting to see the beginnings of a, of a module,
like things that we can box off and put in their own place. So I'm going to just skip ahead to a
version of this in a different module. So the idea is we have this thing called a bounded set.
And yeah, no, I shouldn't skip ahead to this. That was a bad idea.
So let's say, okay, we have this and we were going to put it in a new module, the selected fruit module.
Exposing
selected fruit. And then in our fruits module, we can get rid of that and we can import
it as selected fruits. And then
we just have to go through and make a couple changes here. Oh, we'll come back to that.
Selected fruit, that insert, remove, et cetera. So this is also selected fruit.
We're kind of leaking details here. Okay, let's see it. Okay, check. Does this work? No.
Selected fruits. It's singular.
There's also a stray paren. Spelling.
It's nice that, yeah. Oh, geez, what the heck?
Okay. Just imagine there wasn't a compiler there. We're just like, maybe that's wrong. I don't know.
Okay. So this is still working, but we can kind of improve things by sort of closing down this
module. Right now we're exposing everything, but we could do better by saying, okay, from the outside,
no one knows how selected fruit is implemented. It happens to be a lister string, but no one needs to know.
So we have to do a little bit of selected. I'm disenchanted with this naming choice.
Okay. So now from the outside, no one knows how the particulars of this are implemented.
So let's just run it. This is supposed to not work.
So we're using list.member on a selected fruit, but we don't actually know the
implementation deals of that anymore. And our selected, we're saying it's a list,
but we don't have access to that information anymore. So we need to add, how do I make an empty selected fruit?
And that would be selected fruit is empty. And then we need to test for membership.
And then we can just say list member fruit list.
Oh, it's still broken because they didn't actually change the broken code.
So here we say selected fruit is empty. And then member, we say selected fruit.member.
Cool. So now we've sort of hidden all these implementation details, but we can do slightly
better. So maybe we want to make a guarantee about the size in this data structure. So we can say
we'll actually give the maximum size when we say it's empty or not.
And then in all these cases, max size. So instead of taking two, we take the max size.
And instead of removing, no, we do keep this the same, but we just have to keep the max size
around. And then here, we don't care about the max size. We just want to check. So we should have
an error because we're just calling empty without saying how big it should be.
Two. All right. And then things should work again. Cool.
So at this point, we sort of taken all this complexity around maintaining the only two
things selected and put it in its own module. So the benefits of this is that when I'm reading
through my normal code, all I know is there's some way to select fruits. I can say how many.
And then I can insert and remove. And these things will just work out nicely. And I can check if
something is a member of that. So you can go one level crazier with this, which we shouldn't get
into, but you can. So the idea was you could generalize it so that it's a list of anything,
not of strings or particular fruits. And then everything works the same, right? You choose
the size. You can insert things into it. You can remove things from it. You can check membership.
So all of these designs are possible. And the question is, which one is right for your situation,
right? Should you go like, all right, I'm writing my own data structure that's generic in all
sorts of things. And I'm going to optimize it. Or is it like, look, it's just a list. It's not a
big deal. We're probably not going to get it wrong. And so that depends on what's likely to happen.
Maybe at fruits.com, you'd make one choice. But at the new fruit stand startup, I don't know,
they want to make different choices. Okay. So the big lesson here is that we started with two things
that look basically the same and ended up with entirely different ways of approaching them.
That was all about the data structure, right? And it is true that they share checkboxes, but that's
such a small fraction of the actual difficult things that are going to happen in your code
that it makes sense to emphasize the data structure instead. So I want to put a little extra emphasis
on the module, right? So I showed this bounded set idea and it had, there's a bounded set.
If it's empty, you can insert things into it. You can remove things from it. You can check
membership. Now, the most important part of this module is the exposing line. Okay. So I'm not
exposing everything in this module. And specifically, I'm not exposing the implementation of bounded
set. So no one from outside can mess with the maximum size. And as long as these functions
work, things are going to work. So I want to point out two little benefits that come from this.
So if you reduce the public API to your module, if the implementation is hidden and if the public
API works, the code works everywhere, right? So if I try to break this code by messing with
these functions and I can't do it, anyone else who uses this code won't be able to do it either.
So this is actually really nice for testing because it means you can test the public API
very extensively. And that doesn't mean you have to test every particular usage, right? Using
this data structure somewhere doesn't mean I can introduce bugs into that data structure
retroactively. If it works, it's going to work well. The other thing that's nice is you get
it easier refactoring. So I can change how things are implemented without worrying what's
going to happen outside. And this happens in a couple ways. One is say there's an insert help
function that's doing some extra special stuff. I know that it's not exposed outside, so I can
mess with that. Arguments, add arguments, change shuffle things around and be sure that this is
not going to have any effect in any other modules. I'm not going to have to go hunt stuff down.
That's also nice because it means I don't have to worry about if it's used in 10 different
places across the code, did they need it to work in a very particular way in each of those cases?
And I'm covering all those cases. I can just say, oh, it's not publicly exposed. If it works in
this file, it works. So the other thing that you can do by creating modules in this way is maintain
invariance. So in our case, that's only two fruits. But generally speaking, this means there are
rules that cannot be enforced entirely through data structure design. So we had our two, which is
zero, one or two, but that wouldn't let us decide how many we want. So we now have a data structure
that can let us decide. And by hiding all the details, we can still maintain that rule in a
safe way, even though we can't do it purely through data. And one cool thing about finding
invariance like this is that they're excellent for fuzz tests. So I know that whatever I do with
this, if I say my bounded set has two things, no matter how many times I call insert, it should
just have two things. So by thinking in this way, you also set yourself up to write tests that
are nice and are checking the kinds of things you're worried about. So I want to add some warnings
to this advice. So first, if you find yourself writing get and set, right, so we hid the max
size, but maybe someone's like, well, I want the max size. I won't do a bad thing with it.
Okay, this is a bad sign. This is a bad sign when you have get and set. So the whole point of having
a module was that we were able to hide implementation details and say, if you use this public API,
it will work. And inside, you don't have to worry about that. We tested it. We know it's good.
Setters, their whole point is to expose those details. So you've done all this work to put
it in a module, and we went through that together. It was like, it took too long.
And now you're going to give setters that just totally defeat that entire exercise. So just use
a record. If you have data where you want people to have access, rather than hiding the details,
then exposing get and setters, these details aren't hidden. So don't do the work to hide them.
So another way to say this is expose as little as possible, but no less. Some things do need to
be publicly available. So this shouldn't just be like, hide everything. That's better. The other
thing is don't overdo it. So I'd wait until I have a problem in practice and then solve that
problem. So the goal shouldn't be let's just write modules because modules help with this kind of
stuff. It should be, hey, I'm having trouble understanding this code. I came back to it
after a month and it seemed kind of confusing. Maybe I can find parts that I can make things nicer.
So if you find yourself asking, how do I make the sidebar reusable? Try to remember to ask
yourself why. Are you going to have multiple sidebars? Maybe not. In which case, why would
you do the work to do that? If you are going to have multiple ones, a thing to think are these
cases the same or are they similar? If we're just talking about the HTML is going to look similar,
but how it works behind the scenes is fundamentally different in both cases. I think it's probably
not a good idea to try to get all into how do we share code between these two. Focus on the data
structure instead. Another thing that might happen is as you're growing your record, you don't have
any interesting types. You don't have that autoplay thing where these fields are dependent on that
field and it's just a bunch of independent stuff. If they're all independent, there's no problem.
If I just have fields that have no relationship to each other and I change one, there's not a chance
that there's some bug elsewhere. But if I do have that relationship, that's a potential to start
finding a data structure and do better modeling. So I'd say don't be afraid to just grow your record
and try to find these connections and how things fit together as opposed to preemptively like,
ah, I'm worried about this code, so I'm just going to change it. Just as there's premature
optimization, there's premature refactoring. It's fun. It's like you get to play code golf at work.
I don't think employers should encourage that, but people like to do it.
Okay. So to take a step back, we saw how a file tends to grow. And if we focus on the data
structures, we end up with these nice categorizations where like when I'm searching through a code
base even, I say, hey, where's that stuff that's related to books? It's probably in the module
about books, right? As opposed to, well, there's this update sub-directory and all the update code
is there and the book stuff is in. It's just like, it's related to books. So yeah, so big lessons
are focus on data structures and choose the best representation available. So I actually think
through as many cases as you can and the others build modules around types and try to expose as
little as possible, but no less. So yeah, so I hope this will be a nice next advice in the
how do I grow my Elm code? And one of my goals was to write this up. So I actually started
a book that is about functional programming in Elm and the goal of this book was essentially to
write this talk so that people could read it online and it would work out. It turns out it's
very hard to write that whole live coding section. So instead what I ended up with is some nice stuff
about recursion and graphs. It's fun. Hopefully I'll be able to distill this down into another
chapter that actually emphasizes these things in a way where you don't have to
see the live talk. But yeah, so that's the life of a file. Thank you.
