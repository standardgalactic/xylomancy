I love these headset mics. I feel like I should be standing here with my fingers
stifled saying stuff like, you know, we have machine learning, but do we have
machine understanding? Anyway, hello! Everybody's really excited for custom
elements. I'm Luke. I came here from Manhattan Beach, California, which is
right near Lebron, excuse me, Los Angeles. I work at No Red Ink on the
internal team right now, converting all of our Elm code to Elm0.19. Very fun.
I also work on Elie and contribute to Elm in other ways. One of the things that
I do among those three things is hang out in Slack and watch the beginners
channel. Something that frequently comes up as a question is, I have this JavaScript
library that I have to use, but I want to build an Elm app. How do I do these
things together? There's a lot of reasons to need to do that. You can't do
everything with Elm. For instance, this is how many web APIs there are. That's
not how many Elm packages there are. Can anybody in the audience who has been
in the Elm community for a while tell me how you might go about using one of
these if it's not in the Elm platform? Yeah, use the word. It's kind of become
almost a meme at this point in the Elm community that the response to how do I
use JavaScript is to use a port. It's kind of a closed question almost. What I
want to do in this talk is reopen it just a little bit. Probably the world
won't end, but we'll see. This has nothing to do with anything. I forgot to take
this slide out. I don't remember what it was for. Let's see if I can work it
in. There are more reasons to want to use JavaScript in the browser than making
calls to your growth hacking AI blockchain client. Equally as often or
possibly more, you might want to render a map in case you forget where the
conference is and you want to build an Elm program to remind you. Or maybe you
want to build a compiler into a browser platform and you need a text
editor for people to share code and tell them where you can check out their
mix tape. You can do this with ports. You can do anything with ports. It would be
hard to get me on record saying you can't do something with ports. If you've
interacted with me online, you know that to be true. The way we would go about
building maybe this with ports is we would first make a div and we give it an
ID, like text editor. We make some ports and we tag it with some string that we
can read in JavaScript and send some data as a value sometimes. We have a port
coming in where we can tag some information with a string and pass it as a
value and deal with it in Elm in a subscription. When we initialize our
application, we have to set up the initial model and send out in a knit command and
handle that in JavaScript so we subscribe and we get the type and we do request
animation frames so we can wait until the Elm version is rendering and then we
look at the element and hopefully it's there. Who knows what we do if it's not?
I certainly don't. Then we make the editor. Assuming the element is there and
then we attach the editor to the elements so we don't have to remake it every
time. And then we listen for changes on the editor. We send those back in
through the port, call a value, update it as a string tag, get the value from the
editor, make a code-changed message so that we can capture that into our update
function, handle that message, set the code in the model and then subscribe to
text editor in, look up the type, see if it's value updated, decode the data. If it
fails, if it's something else, that works. That's fine. And then maybe also we want
to do things like reset the code from within the Elm application if the user
clicks a button so we make a reset the code message and then in our model, in
our update function, we reset the code in the model, we send a message out
through text editor out, give it the name value updated, pass it as a string and in
our subscription in JavaScript, we look for the element again, hopefully it's
there. Look for the editor, hopefully that's there. And then we set the data and
then we're done.
What if we have more than one text editor in our application? If we're not
writing code, this is how we get text input from the user. It's just a text
area and we use an HTML attribute to say that this is what the code is and we use
text on input to handle the event from HTML. This is like a pretty good way to
represent some visual component, excuse me, some visual element of our user
interface that can be interacted with by the user. So wouldn't it be cool if we
also had these? We could just say give me a code editor element and then put these
attributes on it and let me listen for editor changes. Obviously these functions
don't exist in the HTML package, but false. Turns out you can do this. What? You
could do it with just today's element and the web platform as it currently
exists right now. So let's do it. This is, like I said, these functions don't
exist in the HTML package, but these functions do. HTML node, which lets us
pick any tag name we want and we have HTML.attributes.property, which lets us
assign any JSON value to any JavaScript property of that element. Similarly,
HTML.events.on lets us listen to any event. So here's that same code in the text
editor and here is that element rendered. So we can see we're assigning editor value
here. The value of that should be hello world according to our Elm program and it
is. And then if we go back to the elements tab of Chrome's dev tools and take a look at
our event listeners here, we see that there's an editor changed event. You can
just do this. It's pretty cool. So right now we have a nice gray rectangle, which as
much as I'd love for that to be the way that my text editor looks some days, it's
not super useful right now. So we actually have to explain to the browser how to deal
with this and the way we do that is with the custom elements API. So we do custom
elements.define. So this was code editor and we're going to write a class that
extends HTML elements. Oh, my gosh, VS code. We get it. So the one thing that we
absolutely have to do to get started is write this connected callback method. This
method is called by the custom elements API in the browser. Whenever the elements
been inserted into the DOM or it's been discovered in the DOM before this definition was
defined. So it guarantees us that all of the DOM APIs are going to be ready for us by
the time this code is executed. So we'll say this.editor equals code mirror this and
we'll do some options. We'll do indent unit before. We'll do mode. Elm. We'll do line
numbers. True. And we'll do value. Artcoded to module. Main. Exposing all. We'll save
it. And webpack will surely be very fast and recompile this for us. There it is. So
there's, yeah, that's pretty cool. Thank you for applauding. But unfortunately, that's
not the text that we said we should have in our Elm program. So it's not super useful
yet. So what we need to do is set up a property getter and setter to intercept the virtual
DOM's behavior of getting and setting this property. So the first thing that we will
do is set up an instructor and we have to call Suver because JavaScript says so. Make
an editor value backing store. This should be familiar to anybody who's done a lot of
C sharp programming. We'll put that default value up in the constructor and we will set
this to editor value. And now when we get editor value, we'll return this.editor value
and when we set it, the real magic happens. So not only can we assign here, we can also
check that our editor exists. And this time it's totally cool if it doesn't because we're
guaranteed for this method to run and we always know that the latest value that we've said
is going to be used. So that's fine. So we can just return here. And if it does exist,
we set value. And then the last thing that I like to make sure to do is avoid doing any
unnecessary work. So if the value is already equal to the thing that was set, we're not
going to do anything. So now I'll save it and we'll stand here awkwardly with our arms folded
while it recompiles. So France is cool. There it is. Hello, world. You don't have to clap
every time. I'll let you know when to clap after I'm finished writing. I'm a regular
Jeb Bush. Okay. So we can type in here and CodeMirror is fine with that, but as you can see, no
messages are being triggered. We have this whole elaborate listener setup, but nothing coming
in. So the way that we deal with this is to go down to where we define our editor. And if you'll
remember from before when I was talking really fast about ports, we listened to on changes to
find out when CodeMirror has changed. And this time, we will first sync our backing store with
the CodeMirror instance. And then we'll dispatch an event. This is a built-in function. With a new
custom event. This is a built-in constructor. And we said it was editor changed. I'll save it. I hope
the syntax is right. Looks like it. I think this is the last time we're going to do this. That's
fine. And now, when I expose everything from main, we can see there's some messages there and it's
filling in character by character. That's how you use the custom element with Elm. When I figured
out how to do this, I was pretty psyched. I was like, hell, yeah, dude. Remember that. It's not all
fun and games, though. It's not all jokes. There's some things you need to be aware of when you're
doing this, even though I totally recommend that you do. The first thing, warning number one, is that
the Elm virtual DOM is always right. It's always going to have the last say about what's actually in
the DOM. So to illustrate my point, when I teach this to people, sometimes they ask, maybe they're
coming from React and they ask, if I have a Google Maps element, can I put markers in the map as
nested elements? That kind of looks the way that I think that should look. And I agree that it looks
nice. This is pretty cool. The problem is the top code is what Elm thinks you're asking for when you
do this and these markers represent elements. This is what Elm thinks that you want it to be. And
when you render your map into the custom element, this is what it's actually going to be. So you have
this conflict here and virtual DOM is always going to overwrite what's in there that you've put in
there kind of outside of its knowledge. So what you should do instead when you have situations like
this is either use the Shadow DOM if your browser space supports it. Unfortunately, it probably
doesn't. And unfortunately, this is not really possible to polyfill completely. So we have some
waiting to do there. Or what I recommend that you do is represent your markers, represent your nested
data as some other kind of structured data and encode it to JSON and pass it as a property and
interpret it in JavaScript that works just as well. One of the number two is that virtual DOM
uses notes. This is kind of weird and it's hard to explain why it happens. You'll know it when you
see it. And I'll give you an example. So maybe if you go down this path and you encounter something
that's really weird, you'll remember this and kind of have an intuitive understanding of what's
going on. So let's say we have a custom element for rendering blue rectangles. It's like really
just incredibly useful custom elements. Very important. They can be light blue or dark blue.
The custom element decides. One is inside of the other. And what we want to do is remove the
outer dark blue one and have the light blue one fill the space. So what we expect it to look like
is this. What's actually going to happen is this. And that's because the virtual DOM saw the outer
rectangle and was like, oh, this is a rectangle. I'm supposed to put a rectangle here. So I'm done.
And it's wrong. But it's not Elm's fault. It's mine for making a bad rectangle. So there's tricks
you can do. And I really encourage you to avoid getting into this situation. But it is good to
be aware of just in case. And then warning number three, and this is a small warning. It's not
very big deal. Warning number three is don't use value because the Elm virtual DOM special cases
this particular property name to deal with built in inputs. So here's what I recommend you do when
you're building your custom elements. The first one is the most important. And it's to always use
leaf nodes, whether your custom element itself is at the very end of your tree branch or whether
you've got some stuff inside of it, but that stuff is fixed. I'll give some examples of that. And
the second one is to not use value for the reason I just mentioned. So here is almost verbatim the
code editor view from Ellie. It takes a bunch of attributes and it renders them all. And most
importantly, that last list there is empty. Elm, when it sees an empty list from diff to diff, it
doesn't clear anything out. It just skips it. It says, I get it. There's nothing here. Even though
we're lying. So you can see the actual implementation of this in the LA repo. And I know this is a
long URL and I'm going to click pass it, but I'll post it in Slack or something. And here is another
example from the no writing code base. This is in our UI library. We have this text area that grows
and shrinks as the user types and delete stuff. And that's not what text areas usually do or are
even capable of doing. So you need JavaScript to do that. And so what we do is we wrap it in a
custom element. The custom element goes and finds that text area and modifies it in a way that the
Elm virtual DOM is totally okay with. So since everything within the custom element is fixed and
not really changing around, this will survive the diff. So you can do it that way too. You can't do
dynamic stuff inside of a dynamic list of elements inside of a custom element and be in
field totally secure in doing that. So I recommend that you don't. So that's how you do custom
elements. That's how you avoid getting in trouble. And so this question of how do I
interoperate with JavaScripts I think has a more nuanced, slightly more nuanced answer now. It's
first to ask is the thing you want to do a UI widget? Is it a map or a date picker or a fancy
input? In that case, use a custom element. Otherwise, if you have the growth hacking AI
blockchain client or something similar to that, you use a port. And so with that, I'll just leave
you with something that's kind of a tradition at Elm conferences to put a slide with Evan's face
superimposed on an actor. So here's mine. Yeah, you can email me about this or you can find me
in Slack and those are some links that you should check out to learn about how to do this. Thanks,
everybody. Oh, yeah, questions. So I've actually done this with code mirror as well. I came up
with a very similar solution with custom elements. But I had this problem that if you type real fast
in the code mirror editor like you do kind of day to day, often the letters kind of ended up in a
different order or you dropped some characters kind of they got overwritten by the Elm state
management kind of overwrote the internal code mirror state management. Did you manage to work
out how to stop that from happening? Yes. So in the example that I gave, I'm just dispatching
events every time a change event happens. In real life, I debounce the code that dispatches the event
on request idle callback. So as long as you're typing or have typed recently, it won't bother to
trigger any changes. So by the time it actually sends the event into Elm, the editors are guaranteed
to be settled. Well, that's awesome. Thanks, man. Yeah, so you can find that in the LA code base too.
So what's the main advantage of using custom elements over mutation observers? I think the
instance management I guess is what I would call that. You don't have to
manually watch the DOM and wait for those elements to be discovered. You don't have to
have a mutation. You don't have to write the mutation observer that then queries the DOM that's
changed and find the elements and then iterate over them. It just kind of does that for you.
I think most of the polyfills that exist are based on mutation observer. So
nothing you can do with a custom element can't be done with the mutation observer. It's just
kind of nicer. It's a nicer API. Let me have back here.
And just a question, how do you manage Firefox? Do you?
We use a polyfill. Actually, the second link here is a repo for the official polyfill. It
works very well on Firefox. We use it in production at NoRidic and we haven't had any problems with
Firefox at all. And I think actually they're about to release support in the next version,
so that's very cool. All right. I think that's it. And you can come find me wherever. I'll be happy
to help. Thank you very much.
