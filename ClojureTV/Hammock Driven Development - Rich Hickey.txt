As I said yesterday, I swapped the talks around, so this is the more philosophical talk.
I had some multiple titles. I couldn't decide. Some of them were semi-cranky in those moments.
Then Mark gave me a great feeder line. This is about step one. This is just an experience report.
It's not advocacy. There's no methodology here or science or anything else.
I'd like you to try to think about when was the last time that you thought about something for an entire hour.
Nobody bothered you and you had an idea and you sat for an hour and thought about it.
How about for a whole day? Does everybody remember last time I sat and thought about something for a whole day?
How about over a course of a month? We had something you were working on.
Obviously you're not spending all the time every day when you start saying it to a month or a year.
These are tremendously valuable moments if you get to have them at all.
I consider myself extremely lucky to have had the ability to think about probably three different things for a year or more.
One of them was closure. There's nothing I prize more than that kind of time.
The other thing I'd ask is when was the last time that you felt confident trying to do something you had never done before?
What do you think it takes to become confident in doing something you've never done before?
Obviously as software developers, a lot of times we're doing the umpteenth application that takes something out of a database and puts it on the web.
The luckier you are, the more likely you are to encounter problems you've never done before.
How do you start doing that and not feel incredibly at risk?
By talking about some software development, things we all know to be true.
We hate bugs in our programs. We're trying to write quality programs.
We know if we let the programs reach the field, it's incredibly expensive to fix inadequacies in the program.
We say we'll have a big testing process in quality assurance.
Even that we know is not so great because it has this distance from the development effort, which is not good.
So now we know what to do in this area.
We fix bugs while we're coding by testing and development.
And this is the best way to avoid bugs in our applications, right?
No.
Did you notice that I learned how to make each bullet happen one at a time?
So now you don't know what I'm going to say.
It's awesome.
There's not this menu item before.
No, definitely, absolutely, positively not.
The least expensive place to fix bugs is when you're designing your software, which everybody does, yes?
I will contend of all the things I'm saying here, which are very, very extremely fuzzy,
that without a doubt, most of the big problems we have with software are problems of misconception.
We don't have a good idea of what we're doing before we do it, and then go, go, go, go.
And we do everything, you know, we have practices and all kinds of stuff, and we feel really good about ourselves after that point.
And if you mess it up, you know, as Mark said, and step one is not going to turn out well.
There are not problems of implementation.
There are problems of implementation, obviously, and testing and other things help with those,
but problems of misconception are not generally addressed by testing or type systems
or the things we use to correct defects and implementation, right?
There aren't really type systems that can tell us if we've got a good idea or what we're doing addresses that idea.
So I'm going to talk a little bit about analysis and design.
I know that's so 90s and ugly and was rightfully, you know, criticized and really dropped,
because, you know, when people considered it to be about process and drawing pictures
and, you know, knowing everything about everything and making comprehensive plans of the waterfall model,
and there was amazing amounts of stuff that was terrible about this.
But that doesn't mean that the step before go do it is not an important step.
And I think we don't spend enough time and energy or make enough time or get allocated time.
You know, it may not be a matter of our choice.
We'd say we'd like to spend some time thinking about it, but, you know, we have to ship something next week.
But we are definitely suffering in quality because we don't spend time here.
And so what I'd like to do is sort of just whatever you think analysis and design is,
like you just forget for the moment, and let's try to make a really simple definition.
Analysis and design is about two things, identifying some problem that we're trying to solve
and assessing our proposed solution in terms of whether or not it solves that problem.
That's really what it's about.
Not about anything else.
We should be solving problems.
We should not be building features.
There's nothing about feature.
What is feature?
It's just an attribute of something.
It's this shiny, you know, chrome knob on something.
It's not the purpose of the car.
There's no guarantee if you put together a feature list, even if it comes from the customer,
that it's going to solve their own problem.
Or that it solves any problem.
Or that the features when you put them together don't introduce a whole ton of other problems.
So programming and writing software is not about completing lists of features.
In particular, features provided by users, in spite of their best efforts to satisfy themselves,
are often really not good ideas.
And you've got to dig underneath it and figure out what problem they have
and what's the best solution to it, and then reconcile it with whatever they ask for.
We also have a tendency, because we're all smart, and we love being smart
and sort of figuring out how to make things go, that figuring out how to make something go
is good no matter what it took to do it.
So if we can find a way to get around a problem, we're like, ooh, that's great.
And it's not great.
Avoiding problems, which we're all capable of doing, very capable of doing,
isn't the same as solving them, so we should really try to work on solving problems.
And the thing I'm going to talk about today is really that there's a bunch of technique
and skill to solving problems.
And the first one is just to make an effort to understand the problem you're working on,
to recognize, identify it, put it somewhere, and talk about it.
So problem solving is definitely a skill.
I think you shouldn't take away from this talk that there's a certain kind of person
who's like, good at problem solving, and they get to do this part of the job,
and then we can practice these other things.
You can practice this part.
Paya wrote this amazing book called How to Solve It in 1945 or something,
which is about how to practice, and what are the techniques of solving math problems,
in this case.
And it's a terrific book, full of great insight, and if you've never read it,
go on to Amazon right after my talk and order yourself a copy.
One of the things that's not so great about the book is that it is in the math space.
And in that space, there's this really nice thing that happens.
When you're done and you think you have an answer, you have all the techniques of mathematical proof
to determine if you actually have.
Whereas as software developers, we don't have that.
There's no way to prove that you have a good solution to somebody's e-commerce site problem.
There's no mathematical techniques, and there's not going to be any anytime soon.
That will let us do that.
But it is a skill, and it is something you can practice.
It's something you can learn about.
And it's worth doing, right?
Because as human beings, we get good at what we practice.
It doesn't matter what it is.
These are the amazing examples of people practicing things that they seem to have no potential hope to become good at
and they get good at it because they practiced it.
If you practice problem solving, really practice problem solving, you will get good at it.
If you practice methodology X, you will get good at that.
And I'd like you to ask yourself, where do you think there's more leverage?
I don't care what X is. Pick any X you want.
Would you rather be good at it or the general skill of solving problems?
So what do we need to do if we're going to work on solving problems?
What is the activity like?
The first thing is to actually say, I am solving this problem.
This problem is this, blah, blah, blah, blah, blah, and therefore blah.
I have seen so much software made where no one ever said that.
No one ever wrote that down.
And then we have a whole system.
And no one said what problem is supposed to solve.
If we're not solving problems, I have no idea why we're in this room.
We absolutely should be working on solving problems, which means we should be enumerating what they are.
And then from the mental standpoint, which I'll talk about a little bit later,
it is actually important to say them out loud.
As the person is trying to solve a problem, say it.
Have a conversation with somebody in your group and say, we need to solve this.
The problem is, blah, blah, blah, rant or talk and have a little conversation.
Or write it down.
But just like you used the practice of repeating somebody's name here,
introducing them as a mnemonic to help you remember their name.
It's the same thing.
This is the seed of solving the problem is stating it.
So the next part, which is definitely a trickier end,
and Paulia's book is great.
It's got a lot of practical things.
Many of these are overlap, what he said.
Is to understand the problem.
So we said, we have this problem.
I think we need a no-SQL database.
There's something missing.
We have this problem.
We need a no-SQL database.
We haven't actually said what are the characteristics of this problem that lead us to this solution space.
And this is where all the interesting work is, I think, in software development.
And so the first step is, what do you know about what you're trying to do?
There's definitely going to be a bunch of facts.
There will be customer requirements.
There'll be other things.
There'll be context.
The system has to run on this kind of box.
It has to run for this long.
It can't consume more than this many watts or has to support 10 million users.
Whatever it is, there are those kinds of things and constraints.
All the stuff are facts you know about what you're supposed to do.
There will be things that right away, you know you don't know.
I wonder where we're going to get the data as an input to this thing.
What we're going to do when our main data source for it isn't available, do we have a secondary thing?
There'll be things like that.
Of course, there will be things that you don't know or you don't know.
Well, that's fair.
But if there's things you don't know, you should think about them now.
The other thing to do is to say, everybody says, oh, I'm doing X.
I have this great idea for X.
You're the only person in the world that ever had this problem.
That's very, very unlikely.
So go find some other solutions to similar problems.
Are there any others that you know about?
And what can you find out about them?
Because looking at other solutions to the same problem is the number one way to get up to speed really quickly
and start working ahead of the best known solutions in the space.
And then because what you'll have to do then will just be an incremental step above what the last guy did.
But if you're ignoring what the last guy did, you're starting from scratch.
So you definitely want to look around in the space.
Now, I'm not advocating a methodology or anything.
But if you're going to bother to do all this work, you should write it down.
Somehow, someway. I don't care about it.
The other thing you have to do is you have to be discerning.
You have to be critical.
And we're sort of in this world because this whole community stuff,
it's like, I just hear awesome.
It's like awesome happens.
I just hear it like 50 times a day.
Not everything is awesome.
And so it's hard to talk about other people's stuff not being awesome.
So just mainly focus on your own stuff.
In particular, as you're finding solutions, as you're trying to enumerate a solution to a problem,
look for defects in your own solution.
And of course you can have a whole talk about this because there will be technical errors.
There will be errors in logic.
There will also be errors of taste and judgment and abstraction
and all those kinds of things that all feeds into this.
And there's an entire talk in this area.
But whatever issues you can find in your own solutions,
try to solve those too right away, up front.
So the other thing you see is, oh, we're going to do this.
Oh, we're going to do this.
Oh, that's great. It has these 10 attributes. It's awesome.
It's really easy to get excited about the good parts of what you do.
But you should be looking for trade-offs.
The chances of there being no trade-offs in any solution are slim.
The other thing is just this, again, this what don't you know thing.
If there's stuff you know you don't know,
there are questions you should be asking in order to find out what you don't know.
You don't know everything.
So there should be question marks on whatever it is you want to use
that you're going to write all this stuff down.
There should be question marks on that page.
If there are no question marks, you're missing the step.
The other thing is to think about, none of us are born knowing how to write software.
None of us are born knowing about SQL or the characteristics of the web
or protocols or anything else.
And if you're trying to solve a problem, especially in a space where you haven't done it before,
you're going to have a very limited ability to come up with solutions.
If you don't have a lot of input, you're going to need to get a lot of different inputs
so that you can let your brain go around between them and say,
oh, you have this idea and that idea connected to each other,
and therefore I can do this other thing.
If you only take a really narrow slice of,
I see exactly what I'm doing right now, right this second, to deliver next week,
you're not going to have enough inputs to make decisions.
So you want to read about the kind of space that you're in, widely.
Very specifically, oh, there's other people trying to do exactly the same thing,
and then broadly, through these other characteristic problems,
and maybe even if you want, go try to find research papers that are kind of in the same space.
It's amazing the cool things you can find by searching something like ACM
or papers about the kind of, it's like, oh, I wonder if we could get a certain kind of hash code
that does whatever.
You go into Google type, hash code that does whatever, enter,
and if there's some scholarly and ACM references, grab those papers.
Even if you only understand like a tiny fraction of the paper,
it's likely to contribute to your ability to think about your problem.
The other thing is, even if you're not going to tell the other guy,
when you're looking at other solutions, be extremely critical.
I can't tell you how often you're going to find the next best idea
by completely crucifying the last guy's idea.
At least in your own head.
Take it apart.
Because when you take it apart, you're going to find a couple of things
maybe they didn't write down when they were doing it.
So everybody says designs about trade-offs.
Everybody knows this, right?
Usually when they're talking about trade-offs and their software,
they're talking about the parts of their software that suck.
I had to make these trade-offs.
That is not what a trade-off is, right?
You have to look at at least two solutions to your problem, at least two.
And you have to figure out what's good and bad about those things.
Before you can say, I made a trade-off.
So I really recommend that you do that.
And when you do it, you might want to write that down somewhere.
Okay, so let's talk a little bit more about practice.
A big part of trying to do this work is maintaining your focus.
We had a really nice talk yesterday about flow,
and that is a kind of a focus-related concept.
And when you're trying to do design work, you also need,
I think some of the most extreme focus you're going to ever need.
And so there's some cool aspects to the hammock.
One of the cool aspects to a hammock is that you can go on a hammock
and you can close your eyes, and no one knows that you're not sleeping.
But they won't bother you because they think you might be sleeping.
So it's very cool.
Computers are bad, bad sorts of distraction.
They're so bad, especially for people like us.
Something else besides what I'm trying to think about.
You desperately need to get away from the computer if you're trying to focus.
It's almost impossible to focus sitting at a computer.
The other thing about focus is that you're going to be making trade-offs
when you try to focus really intensely.
When you run to drop balls, you're going to miss calling people back
and responding to emails and doing your slides for conferences
until the airport on the way there.
Things like that.
That's just the game.
The one thing though is that you should communicate to people
that you care about about this process
and the fact that when you're doing it, you're going to seem pretty far away.
That's not a comment about the person that you care about.
It's just the nature of doing this kind of work.
So it is important to sort of do it.
A lot of people will not get time to do this all day every day
or over the course of an entire week.
But if you're going to get some focus time, define what that is.
Everybody knows about time out time for little kids.
What programmers need this focus time?
They're like little kids that need to go sit on the hammock
and have nobody bother them.
So for me personally, I think that the process involves two parts of your mind.
This is stuff that you're seeing in the books written about this or whatever.
I haven't read them, but they seem to correspond to my personal experience,
which is that you sort of have this waking mind and background mind.
And your waking mind is really good at that criticizing part.
It's extremely analytical and it's very, very good at tactics.
Right now, we need to make a decision.
The lion is chasing after us, jump left.
We are really good at that.
That's what our waking mind is about, keeping us alive and making short-term decisions
and looking at the immediately present information and doing something about it.
However, if you think you're going to sit down and look at a problem for the first time
and stare at your computer and do whatever and have a conversation for 10 minutes
and make a really great decision, I don't think so.
I know I can't do that. Definitely not.
The problem with this kind of thing is it tends to push uphill.
Oh, I see this. Oh, I see that.
Okay, here I have a choice left and right. Okay, I can go right. That's more up.
Left and right. It's right. Left, that's more up. More up.
It's this part of your thinking is really good at finding the local maximum.
But it's not very good at getting off the track.
It's on and finding the fact that there's another hill over there that really takes you higher.
But there's a very, very critical activity that you have to engage in.
I think if you want to use your entire brain and become very good at problem-solving.
And that is to think about using your waking time to assign tasks to your background line.
To actually think hard about something and create work for your background line.
That really is the point of the hammock and all this listening and all this working and talking about
what you're going to do when you're awake is actually to give the other half of you stuff to do.
The other good thing about your waking mind is when you do think you have a great idea
that you've caught up with in your background mind,
your waking mind is good at picking the other part.
Saying, you know, you thought you woke up with this brilliant idea,
but now I'm seeing this characteristic of it that seems not so brilliant.
So let's talk about the background mind.
I'm not going to directly equate it with the sleeping mind,
but the sleeping mind is the number one instance of background mind.
You can find access to your background mind during the day while you're awake,
but it's tricky.
It's good at making connections, right?
The kind of thing like, if I leave my, if I make a hut out of mud and it rains hard, it will disintegrate.
It's not necessarily the kind of thing that you can tactically figure out.
Your background mind is going to know sort of aspects of all those different components
that make the connections and synthesize them.
Even when you think you're really hot at making decisions on the fly,
you're almost always just regurgitating something your background mind has already figured out.
So the background mind is good at synthesizing things.
It's good about strategy, right?
And so when Mark talks about, you know, abstractions and things like that,
abstractions are software strategy, right?
Because the idea there is you're making some super global decision
that's going to need to be corrected in a whole bunch of contexts
in which you can't make tactical decisions yet.
What does it mean to make an abstraction?
You're going to drive libraries wrong.
What does it mean to put something in a programming language
where I had no idea what you guys were going to do with it?
It's a more strategic kind of thing.
You don't build a programming language and say,
how will this programming language deal with HTTP requests?
You know, what you want to do is give Mark something that he can use
when he's got a tactical decision to make about HTTP requests.
And that's a strategic kind of thinking.
And your background mind is good at strategic thinking.
If you want to do abstraction, you have to find time to do this thinking
because that's the part of your brain that comes from, right?
It does abstraction. It draws analogies, right?
I think this is where you solve most non-trivial problems, okay?
You can make good decisions in the moment otherwise,
but if you're really trying to solve something hard,
you've got to engage the other half of your head.
So I'm not just saying the scientific American.
Said that when we're sleeping, we process the information during the day
because that's pretty obvious.
But that sleep reinforces memory, which is good.
I mean, it is important to remember what you're working on.
But more importantly, it is a great sorter out of things.
So we had this whole...
I just advocated taking a lot of input, right?
Taking a lot of input, doing all this analysis of the requirements in the space, right?
Doing all the reading, looking at competitive solutions and tearing them apart.
That's like, there's this ton of stuff.
When are you going to decide what about that is important and what isn't?
When you're asleep, right?
That's what happens.
Evolution has solved this problem for us,
and that's the solution it came up with.
We can't ignore it.
We have to use it.
But the most critical thing is this one, right?
Finding hidden relations and solving problems we were working on.
So imagine somebody says,
I have this problem, this, that, that, that, that, that, that.
And you look at it for 10 minutes and say,
okay, I'm going to go out to the movies and do something else.
Then you go to sleep.
Are you going to solve that problem when you're asleep?
Sure.
No.
You didn't think about it, did you?
No, you didn't think about it.
You didn't think about it hard enough while you were awake
for it to become important to your mind when you were asleep.
And this goes back to that feeding your background mind thing.
You really do have to work hard.
Just think, not typing it in.
Just thinking about a problem during the day
so that it becomes an agenda item for your background mind.
That's how it works, right?
It's when people are out there and they're like,
oh my god, how are we going to find food?
And this is happening there.
But I know I saw elk over there.
They seem to be by the water sometimes or whatever.
That's when you wake up as a caveman and say,
let's go hunt for the animals by the water.
It's not a logical deduction.
It seems like that when your foreground mind is sort of analyzing it.
But there's no logic for that necessarily.
It's really a process of this very parallel kind of thinking.
So this is very important.
So we have a problem in general because we write,
and we're just being asked to write stuff
for this more and more complex as time goes by.
And we know there's a 7 plus or minus 2 sort of working memory limit.
And as smart as any of us are, we all suffer from the same limit.
But the problems that we're called upon to solve
are much bigger than that normally.
So what do we do?
If we can't fit the whole thing in our head at the same time,
how can we work on a problem with more than nine components?
You can come to the close.
What I'm going to recommend is that you write all the bits down.
Especially now, you've written a lot down about the problem.
What the problem is, a lot of facts about it,
constraints about where it runs.
You don't know.
You've asked yourself those questions.
You wrote them down.
I wish I knew blah.
You looked at competitive things and said,
that works great over here,
but that part of that competitive thing sucks.
I hate that.
I wish that wasn't there.
You gave this huge agenda to your background line.
And when you're trying to load it up,
you need to survey.
And that's the point of writing it all down before.
If you've written all the stuff down,
including some sketch of how you want to solve the problem,
you can go and just sort of jump around and look at that.
It's sort of like, how many balls can you juggle?
Well, you can only juggle so many.
I can't juggle at all.
But if we look at the 7 plus or minus 2 thing,
we're going to say we can juggle 7 to 9 balls.
But if you can imagine having an assistant
who every now and then could take one of those out
and put a different color in,
then you could juggle balls of 20 different colors at the same time,
as long as there were only 9 in the air at any one point in time.
And that's what you're doing.
You're going to sort of look around at all these pieces
and shift arbitrary shapes of 7 into your head
at different points in time.
Maybe you'll draw pictures.
Don't use the UML tool to do this.
Damn.
It's not a methodology.
So go over and over.
But then, you must, again, step away from the computer.
There's another really important part of doing this,
which is to go and sit somewhere and have no input.
And close your eyes and not go to sleep.
Close your eyes.
Because we have this other thing.
Everybody knows what it is.
It's really hard to describe.
But does everybody have a concept of their mind's eye?
What you see when you close your eyes
and you start thinking about something,
it's weird.
I mean, it's not actually technically visual,
although some people are really vibrantly visual.
I know for me, it's, I don't know.
I can't describe it, but it's not very realistic.
But you need to do that.
That part is important for your brain.
Because at that point, you're switching out of sort of an input reception mode.
If you're just looking at your list,
you're sort of in the mode of, I'm getting input.
But when you're sitting and contemplating something
and hashing it over in your head,
you don't have any other input.
Which means you're exercising the recall.
I looked at those 20 points.
Let's say it was just 20.
I looked at those 20 points over and over and over again.
And I jumped around with input between them.
Now I close my eyes and I'm trying to recall them
and think about them a little bit more in my head.
And you're going to find if you've done the last step,
going over and over,
you will actually be able to sit on a hammock
and pull all the different parts of a fairly large problem
in and out of your head, admittedly, maybe one at a time.
And think about them that way.
That exercise is really, really important.
I don't know why, it just is.
Because it forces this recall thing
that definitely makes those things agenda items
for your background mind.
So we'll call that mind's eye time.
Now you're done.
Cake is in the oven?
You just have to wait.
It's so good.
And one of the things I would say is,
at least wait overnight.
No matter how ill,
you and your buddies talked about it
and you just feel like such a hot shot today,
I have got this thing.
Sleep on it at least one night.
At least if it's an important decision.
Now, how many people woke up this morning
with the answer to a hard problem?
You see, it's science.
Science at work.
No, it's really kind of an unfortunate thing.
If you're not thinking about this,
you think, what happened?
I worked hard all day.
I'm done working.
Time to relax.
Unfortunately, if you believe in what I'm saying today,
you're actually doing something kind of important
when you're sleeping.
So occasionally, you really have to give your brain
a chance to do that other part of the job.
If you always deny it,
I don't think you're going to have the best results.
Unfortunately, sometimes overnight is not enough.
Some big problems,
especially finding really good abstractions
or finding answers to things
that satisfy a bunch of simultaneous constraints,
take a long time.
It just does.
And I know everybody has to ship and everything else.
In that case, I'll have what I'm saying doesn't apply.
And like I said before,
I consider it a huge opportunity
when I get an extended amount of time
to think about a problem.
Because I know I'll come up with a better answer.
But one of the ways you can deal with this
and not get stymied by,
well, let me just think about that for three months.
Because most managers
are not incredibly receptive to that sentence.
Just work on more than one thing.
Not inside one day.
Try to work on one thing each day.
But if over the course of time,
you have three projects,
it's quite possible to load one up
and work on it for three days
and finding answers to any of your question mark items
are able to enumerate new possibilities.
So you kind of stuck a little bit.
You switch to another project
and do that for a few days.
You have to amortize the loading up time.
It can take between an hour and an entire day
to load up something.
So once you've done that,
you try to get at least the rest of the day
or three days or more on it.
But don't get hung up about the stuck thing.
Just switch.
Don't stay stuck.
Switch.
Or get more input.
Talk about it more.
Don't stay stuck halfway.
Don't stay stuck on it.
But yeah, then eventually cake comes out of the oven.
You wake up and you have a great idea.
You think you know the answer to your problem
or you have a good idea for a solution.
Unfortunately,
sometimes you have an answer to
not the problem you were working on.
You were working on three projects
and you loaded up the project C
and you woke up with the answer to project A.
That has to be okay.
You just switch
and take advantage of it.
At least capture it.
If you wake up with an answer to some other thing
that you can't work on that day,
capture the results of this background process.
They're really useful.
Finally, you do have to take
your great ideas
and figure out if they're actually great
by either analyzing them more,
which is certainly important,
but sometimes you have to write them
and type them into your computer.
Actually, we all have to do this.
You do eventually have to code.
It's fun.
Stu has this great sense.
He's seen some of my design sheets.
I don't know what you put.
It's a document of despair or something.
It seems to be all like,
we can't do this.
This doesn't work like that.
Question marks, blah, blah.
It's all negative, but it's all challenges
to the problem-solving process.
It's not despairing.
It's positive at saying,
I know what my challenges are,
and therefore I can work on them.
But you spit this thing out.
Now you have something.
You try to avoid a lot of typing.
I know I do.
Because if I think I've got an answer
and the answer is small,
that's one of the most
telling attributes
that is probably good.
And what I would hope
from doing this whole process
is that you gain confidence in it
after you've seen it work for you
so that you say,
you know what, I have never done this before,
but I really have thought about it,
and this solution I came up with overnight
feels awesome,
and woo, let's go.
It is important to look at what you did
and to run it and see
and find out new things about the solution
and say, oh, you know what,
I had this supposition.
It's not correct.
I thought it would have this characteristic.
It doesn't, et cetera, et cetera.
I am not advocating the waterfall model.
You're going to try stuff and go back.
That's fine.
But don't lean on this, right?
Test driven dentistry,
I don't think I can come up with a better thing.
Right?
We can't really do that.
The last thing is,
you are going to be wrong.
I am frequently wrong.
That's part of the game.
You're going to think of better ideas.
I think that's one of the most exciting things.
I think no matter what I've ever thought of,
the fact that I know I'm going to think
of something better,
as much as it will suck a little bit
because I know I delivered something
that was not the best,
means that I'm still going.
You know, it's still working.
So you will think of better ideas.
Also, the fact that
the facts change.
They can change because of two reasons, right?
One, you missed some of them
early on, so they're new to you
because you skipped them.
What else do we have?
Changing requirements.
It's just, you know,
we all know this.
The facts will change.
When the facts change, do not dig in.
Do it over again and see
if your answer is still valid
in the context of the new requirements
and if it isn't,
change your mind and don't
apologize.
Sometimes you'll just make mistakes.
Errors and logic are,
you know, you just get it wrong.
That's fine.
If I can advocate anything,
it's do not be afraid.
Especially,
do not be afraid of being wrong.
So,
in summary,
if this was a rant,
there's no sorry.
I have two minutes for questions.
Yes.
