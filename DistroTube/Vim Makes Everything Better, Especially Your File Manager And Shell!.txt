VIM. VIM is more than a text editor. VIM really is a way of life. And the more I've used it,
the more I've become kind of proficient with VIM. The more difficult it is to use anything
other than VIM. I can't really use any other text editor other than VIM. In fact, I find
it difficult to use programs that are not even text editors because, you know, I'm going
to hit the VIM key bindings for different things. For example, if my email client doesn't
allow me to compose my email in VIM. Sometimes I find it difficult to do that because I'm
hitting the keyboard commands to change word or delete a line or copy and paste and none
of that works the way it does in VIM. So find it difficult to use email programs. I find
it difficult to use forms on websites. You know, if I'm sending a message to somebody
on a web page, find it difficult to use certain chat clients, IRC chat clients, because I'm
constantly wanting to do things the VIM way. I want to navigate with the VIM keys, you know,
HJKL. I want to, you know, delete with DD and you go to the top of the document with GG.
In fact, the other day I was playing a game on Steam and somebody in the Steam chat typed
GG for good game. And for some reason I was wondering why this guy was trying to go to
the top of the document in Steam. So VIM has really kind of penetrated my life in a pretty
big way. So those of you like me, you're using VIM. Maybe you recently discovered VIM or you've
been using VIM for years. If you're a VIM user, you really should take a look at a file manager
called VIFVM. It's become my preferred file manager. VIFVM uses all the VIM key bindings. It
even has modes just like VIM. I'm going to show you a little bit of what you can do with VIFVM
today. Also, if you're a VIM user, you really should enable VIM mode. There is a VI mode or a
VIM mode in both Bash and ZSH. So enable VIM mode in your shell. Now all of a sudden the standard VIM
commands you're used to work in your shell prompt. For example, in normal mode in the shell,
you'll be able to type zero on the keyboard and go to the beginning of the line or dollar symbol.
To go to the end of the line or DD to delete the line you just wrote. So all your standard VIM
key bindings work in the shell. So let's get started. And the first thing I want to discuss with
you guys is VIFVM. VIFVM is a file manager, a terminal based file manager. It uses all the
standard VIM key bindings. It has modes just like VIM such as visual mode. I can already hear some
of you folks asking why in the world would I use a terminal based file manager? Why wouldn't I just
use a graphical file manager like Nautilus or Dolphin? And then I hear some other folks going
why would I use a terminal based file manager when I can just do everything in the shell? You
know change directory and make files, delete files, make directories, delete directories. I don't
need a file manager, a graphical or terminal based file manager to do anything. No, well, that's
true. You can do everything in the shell. But having a file manager makes some tasks, some
complicated tasks much easier than doing it in the shell. Because really complicated tasks in
the shell are going to require you to use things like grepsid, all regular expressions. We're
having a file manager make some of these tasks a little easier. Why a terminal based file manager
rather than a graphical file manager? Well, graphical applications are going to be heavier than
terminal based applications, heavier on resources, graphical applications, of course, require you
to have X on the system, a terminal based application, you could open up in a TTY prompt,
you don't even have to have X or running, or even installed on the system. Graphical applications
also expect you to have a keyboard and mouse on hand. I mean, they expect you to input with the
mouse sometimes where terminal based applications are often the primary, sometimes the only way to
input stuff into them is with the keyboard. So terminal applications make sense in a lot of
situations. So this is my desktop. Let me open up my file manager of choice here. There is VIFM,
VIFM, the VI file manager. Sorry, guys. I'm in Herb's look today struggling with some of the
key bindings for Herb's look, but this is VIFM out of the box. Now, VIFM, as I told you, uses all
the standard VM key bindings right now in my home directory. Capital G goes to the bottom,
the very last file, you know, same as in VM, Capital G goes to the last line of the document,
GG goes to the first line of the document. We can give it a number, say 5G, to go to the fifth
line, you know, the fifth thing here in the file manager. It does include the dot-dot in that.
The dot-dot, of course, is an alias for the parent directory. Of course, you can copy something with
YY for Yank. You can delete something DD for delete, just like in VM. You can do bulk rename. Now,
this is a really neat thing that you can do in a terminal-based file manager like VIFM. You can
also do it in terminal-based file managers like Ranger and, I think, Midnight Commander, and I'm
sure others. Let me show you. So, I have a folder on here somewhere called Scrot for screenshots.
They enter into that, and the pictures are not going to look good because they're 5760 by 1080
screen resolution. So, the previews are really scrunched up. So, I'm just going to turn the
previews off. No reason to see them because it's not going to look right anyway. But, you see,
I have all of these screenshots, and they are named with a timestamp, the screen resolution,
5760 by 1080 underscore scrot dot ping. What if I wanted to rename all of these files? Well,
in a graphical file manager, it would be kind of tedious. You would have to probably do them one
at a time. Most graphical file managers, some of the graphical file managers are extensible,
but it's kind of hard to figure out how to do that in a graphical file manager. Things like
Nautilus, for example. But in something like VIFM, because you know it takes all the standard VIM
commands, you could go into visual mode right now, so shift V. And now, as I go down with J,
J is the down key, I am selecting every single file. I wanted to select maybe for a bulk rename.
I don't have to J a million times though. Again, capital G goes all the way to the
bottom of the document. So, now I've selected everything in this directory. How do we rename it?
Well, C for change, CW, change word. And now it opens up all of those file names in a VIM document.
Basically, we have a VIM document here with all those file names. And now, because I'm in VIM,
it makes it very easy to change these file names. So, if I wanted to do a bulk rename here,
one thing I could do is I could do visual mode, so control V. Control V in VIM gets you into a
block mode, a block visual mode. And capital G gets me to the bottom of the document here,
so all the way to the last line. So, it selected lines one through however many
file names were here. I think there were about 250 file names. And now, if I move over to the right
with the L key, the standard VIM navigation keys. And if I wanted to, I could select all of those
that block of text. And then a simple D for delete makes all of that timestamp information go away.
Now, that would be rather poor renaming since all 250 something files in this directory now
are going to be named the same thing 5760 by 1080 underscore scrot dot ping. So, let's undo that.
That doesn't make sense. But what I could do is let me move over. So, if I wanted to, I'm going to
keep the timestamp because the timestamp is unique. But I don't need the rest of this information.
I don't need 5760 by 1080 underscore scrot for sure. So, let's control V again to get into the
visual block mode. Going to capital G again to go all the way to the bottom of the document.
And this time, I'm going to go in this direction and highlight all of that D to delete. And now,
we've made those file names a little shorter. I got rid of the superfluous information that I
don't really care about. I don't care about the screen resolution. I didn't care to have scrot
in the name. I know it's a screenshot because the directory that I'm in is called scrot.
But we do need some kind of unique name for each screenshot here. So, I did leave the timestamp
if I wanted to. I could have, instead of doing visual mode, I could have just did a quick substitute.
So, I undo this. So, to do that same change instead of using visual mode, just doing
command using the substitute command nvm colon to get into command line mode here nvm. And then
percent sign s for substitute and then slash what do we want it to substitute? Well, I wanted
to substitute underscore 5760 by 1080 underscore scrot. I want that information to be substituted
with nothing. I just wanted to go away. So, normally, you would put some information here
and then another slash, but I'm just going to do two slashes with no information. I don't want to
replace it with anything. The last thing I want to do is type g at the end to make sure that it
changes this everywhere in the document. Hit enter and there you go. That's how you could do that with
substitute both equally as fast whether you use visual mode or substitute. So, that is a little
bit of the power of something like vifm because, you know, it's so vim like all the standard gem
stuff you're used to, such as modes, insert mode, normal mode and visual mode and all your commands,
delete commands and copy and paste and substitute, they just all work. Now, I could write and quit
right now because I'm happy with this and that gets me back into vifm here. If I wanted to go
back to my home directory right now, I'm in that scrot directory. I have a bookmark, a leader key h,
gets me back into my home directory gg, gets me back to the top of that directory and of course,
colon q, gets me out of vifm completely. So, that's vifm. If you're not using vifm and you're a vim
user, you really, really should check it out. It's fantastic. The best file manager are none.
Now, one other thing, if you're a vim user, you need to do, you need to have
vi mode or vim mode enabled and whatever shell you use. There are vi modes in bash and zsh. I have
both bash and zsh on my system, so I know that they exist on those shells and they work just as
expected. I think there's also a vi mode in fish. I think there's a vi mode in the seashell, probably a
vi mode in all the standard shields. It's kind of a common feature. Most people don't know about it.
I don't know why most people don't know about it, but so let me open up a terminal here and this is
the zshell. So, this is zsh. Let me zoom in and I am going to show my zshrc file here. Let's open it
up in vimg to get to the bottom of the document because on the last line, right here, bind key
dash v. So, bind key space dash v basically gets us into vim mode. That's all you need to do. Add
that line to your zshrc file and now you have vim mode in zshrc. What is vim mode? Well, by default,
when you open up your terminal, you are in insert mode, meaning I can actually type something. This
is a line of text, right? Now, if I hit escape right now and now try to type something. Yeah,
well, I typed i so I haven't gotten back into insert mode, but let me escape. Nothing really works.
Now, hjkl worked because that's the vim keys, l to move right, h to move left. I wanted to change
word. So, how about cw? This is a block of text. Escape to get back into normal mode. Of course,
I could delete a word. I could dw. Well, let me get to the beginning of the word though. So,
let me move over with the navigation keys, dw. Of course, I could undo with u. I could delete
the line with dd. I could p4 paste. I could undo and get all of that back to where I was originally.
I could zero to get to the beginning of the line. I could dollar sign to get to the end of the line.
So, that is vi mode and of course, i to get me back into insert mode so I can actually continue to type.
All right. So, that is vi mode here in zsh. What about vi mode and bash? Well, let me
get back over to bash. Why can I? Oh, that's because I created this in vi mode. It won't let me.
Let me get back into normal mode. I can't get rid of this line of text, but if I get back into
normal mode and dd. All right. And now back into insert mode, bash. It's kind of complicated
because I don't have anything visually in my prompt telling me when I'm in normal mode and
insert mode. All right. So, I'm going to switch over to bash here and now vm.bashrc. Let's check
out my bashrc and capital G to go to the end of the document here and vm and the very last line
set space dash o space vi. That enables vi mode and bash colon q to quit out of vm. So,
this is the same. So, if I, well, let me clear everything here. So, if I, this is a line of
text. So, by default, of course, when you're in the shell in the bash shell,
same thing, you're in insert mode. But if I hit escape, now, you know, I am using the vm navigation
keys hnl. Pretty much everything else on the keyboard is disabled other than I didn't get
into insert mode. So, again, oh, it gets me to the beginning of the line dollar symbol gets me to
the end of the line. All the other stuff works as expected. So, I could, you know, dd to delete the
line p to put move back over here and I could, you know, change word for new word. So, that is
all I wanted to share with you guys today is just I wanted to share with you a little bit of the
power of vm and how you can get more out of other applications such as your file manager and your
shell such as bash zsh fish by using vm and by enabling vm modes if they have such a mode available.
For me, and I know for many of you, vm has become kind of a way of life. Vm, it's so much more than
a text editor. It's not, it's not like emacs. Emacs is almost like an operating system. It does
so much stuff. I mean, you can play games in emacs. Vm, it doesn't take it to that level,
but certainly vm, again, it's kind of a way of life. And the more you get into vm,
the harder it is to do things that don't involve the vm key bindings. So, I'm going to keep
doing this with any program I can. I want to navigate with the vm keys. I want dd to delete
and p to paste. I want nothing but vm key bindings in all my programs. This show was made possible
by Ansem, Carlos, Chris, Douglas, Dylan, Leo, Rob, Robert and Tony. They are the producers of the
show. They're my highest tier patrons over on Patreon. Without them, this show would not be
possible. The show was also brought to you by all those fine ladies and gentlemen. You guys see
those names on the screen that help support my work over on Patreon. I want to thank each and
every one of those guys. If you'd like to support my work, please consider doing so. You'll find
me at DistroTube over on Patreon. Alright guys, peace.
