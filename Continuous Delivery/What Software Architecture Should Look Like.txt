Wikipedia defines software architecture as the functional structures of a software system
and the discipline of creating such structures and systems.
Well, you can kind of see what they mean, but it's a pretty dry definition and it raises
as many questions as it really answers.
After all, what does fundamental mean anyway?
And for that matter, what does structure mean in this context too?
The last bit is really only saying architecture is produced by a disciplined approach to
architecting things.
To be fair to Wikipedia, this is a difficult idea to nail down, even though I think that
most of us would agree that it's an important one in some way.
So here is my take on software architecture.
What does it mean and what does it take to do a good job of it?
Hi, I'm Dave Farley of Continuous Delivery.
Welcome to my channel.
If you haven't been here before, please do hit subscribe.
And if you enjoy the content today, hit like as well.
I'd like to begin by thanking our sponsors, equal experts, Octopus, Speckflow and Linode.
They're all helping us to develop the channel, so please do check their links in the description
below to support them.
My thinking on software development, design and architecture is deeply informed by what
I think of as an engineering approach.
I describe this generally applicable approach in my new book, Modern Software Engineering.
It's doing rather well in the rankings on Amazon at the moment, and he's collecting
some very nice reviews.
So do check it out.
There's a link to that in the description below too.
I think of myself as a software developer.
Probably more accurately these days, I'm a consultant first and a developer second.
But I also spent a considerable part of my career being called a software architect in
one form or another.
I couldn't then and can't now tell you any significant difference in my focus between
the times when I was called a developer and the times when I was called an architect.
Ultimately, I think this is about design.
Maybe it's about design at different scales, but I confess that I'm rather skeptical of
that.
The slippery nature of defining architecture as design on a bigger scale is that design
in information systems is kind of fractal.
There are things that matter at all levels of detail, and there are tiny details that
will invalidate grand assumptions, and there are grand assumptions that can prevent effective
progress at the level of tiny detail.
A popular description of software architecture comes from Grady Butch, who says, architecture
represents the significant design decisions that shape a system, where significance is
measured by cost of change.
I don't disagree with this definition, but I don't like it very much.
It implies that these are the details that we need to get right at the start to succeed.
It makes some sense if we're looking retrospectively at a system, but it's a pretty poor guide
to building one.
Be omniscient.
For something this complex, that simply isn't going to happen.
For me, there's only one approach to architecture that makes any sense at all.
It has to be an evolutionary process.
We will guide the design of our system by modifying the constraints that we apply to
that design.
These constraints, or rules of the road, are what we think make sense at any given point.
These form an important aspect of our architecture.
We create a kind of tourist map of the system that we can use as a tool to guide design choices.
Here's the tourist map from one of my systems.
This map guides the evolution of the system in the direction of the outcomes that we aim
to achieve.
If we're doing a good job, we'll discover our inevitable mistakes and update our tourist
map as our understanding deepens.
Let's try and walk into this problem a little bit more carefully.
One great definition of software architecture is, it's the stuff that we wish we'd got
right at the start of a project.
Perhaps a little more helpfully, it's the shared understanding that the expert developers
have of the system design.
Both of these definitions come from Ralph Johnson.
I'd add a couple of words to the second.
It's a snapshot of the shared understanding of the expert developers.
You hope it doesn't change too often, but you should expect it to change.
I think that in combination, these definitions get something rather important right.
At the start of any project, we don't yet know the answers, but we still need to make
some guesses about what may work in order to begin.
If we're going to be creating this system as part of a team, we need a way to discuss
design ideas to communicate with each other about the system and think about where different
behaviors of the system will be handled.
Our tourist map will help a lot with these conversations.
Debating new features in front of the tourist map can, we can explore the implications of
our design choices and maybe spot improvements or mistakes in the map.
I like Ralph Johnson's focus on the stuff we wish we got right, rather than a focus
on the stuff we must get right.
We focus on the stuff that worry us.
I like it because we almost certainly won't get it right first time, but it is important
stuff.
That aligns very nicely with my thinking and my approach to development in general, which
is significantly focused on maintaining my freedom to get things wrong.
That probably sounds a bit weird, but I want the freedom to make a mistake and the ability
to learn and recover from it.
For that, we need the ability to contain the complexity and to manage it.
Fundamentally, the architecture of our system is realized in the shapes that we make with
our code.
Or software has an architecture.
And some of them, though, it happened by accident.
In others, it was worked on with great care and grew to be something good.
Good architecture allows us to isolate one part of the problem from another.
This could be functional.
Let's create services aligned with bounded contexts so that they can change more independently
of one another.
Or it could be, in the jargon of architects, non-functional.
Let's shard the data in our system so that it can scale linearly as demand rises.
Your formal approaches to architecture often discuss architectural measures of quality.
This is the list from ISO.
I can see how talking about the illities of a system can help.
But in reality, I don't really buy into the idea of non-functional requirements very
much.
Inside every non-functional requirement is a feature of the system that users care about.
If not, why are we doing it at all?
Then something as seemingly self-centered as making our code maintainable is really
about ensuring our ability to continue to deliver value to our users in the future.
These things, security, performance, scalability, testability, deployability, resilience, and
so on, are behaviors of our system as much as taking payment with a credit card.
We have to design the system to exhibit these behaviors.
If we are sensible, we will design our system to manage the complexity of these things by
compartmentalizing them from other behaviors where we can.
The reason that people get worried about these kinds of qualities of a system and try to
teach them somewhat differently is that they tend to have a broader impact than many features.
You can't usually fix security or scalability or resilience in a single place in your system.
These are often referred to as cross-cutting concerns, but that doesn't mean that these
things are architectural concerns and other things are not.
These are just behaviors that people often forget about while chasing other kinds of
features.
Whether you call yourself an architect or not, and whether you work in a big team or
alone for any given piece of software, you need to decide how it should behave.
And that means how you process credit cards or what color your buttons are, as well as
is it okay to leak money to attackers or fall over when there are more than three people
using it.
This is our responsibility as software developers.
For some types of systems, some of these problems are genuinely difficult, and it helps a lot
when you have smart, experienced people on the team who have seen ways to cope before.
But that doesn't mean that architecture is somebody else's problem.
Whether you are in your first day on the job or a grisled veteran, your decisions may impact
on the architecture of the system.
This is another of those slippery aspects of software.
There is very little distance between what looks like a small change and that small change
having a massive impact.
In fact, the only things between that being true are luck or a good working design and
architecture that we understand and can use to guide our fine-grained decisions.
So that gives us another step forward in understanding this complex concept a little better.
The architecture of our software is the collection of constraints that we agree to adopt and maintain
that will provide us some protection from making dumb mistakes.
My preference is to engage every developer, whatever their experience in architectural
discussions, allowing everyone to develop their own understanding of the architecture
and to contribute to it as development proceeds.
Architect as a job description has seen a bit of a decline in recent years.
This is mostly in response to agile development's reaction against big upfront design.
The problem with this is, as Dave Thomas famously said, big upfront design is dumb,
no upfront design is dumber.
So we need to start somewhere, but where?
The real answer is that you make a guess based on your understanding of the problem so far
and your experience.
If you're any good at this kind of thing, you try to treat this guess as an experiment.
How could you show that your guess is wrong?
Try that.
Working incrementally, whether in fine grained design or big picture architecture, is essential
to doing a good job of anything complex.
There's a caveat to this, but as ever, you need to understand the trade-offs.
If the problem that you are solving is pretty common, then you could adopt a tried and tested
architectural approach and off the peg architecture if you like.
This is a good idea, as long as you understand the constraints and the fit of that architecture
to your problem.
Because the other big problem with software architecture as an idea is that there's no
one size fits all, there's no such thing as a generically good architecture.
Rather, it's a matter of whether a particular architecture fits the needs of the system.
One of the most successful, widely applicable architectures was a layered system backed
up by a relational database, something like this, a UI, some logic and a database.
For systems with a moderate number of users and relatively simple crud-style features,
this was a very good choice.
I think that one of the reasons it was a good choice, though, is quite informative.
I think a principal reason that the clever but slow idea of transactions in relational
databases took hold was because it allowed programmers to write multi-user systems without
worrying too much about the horrible complexity of concurrency.
If you open a transaction, read some data, change it and write it out again, the database
will block any other access to that data while you're dealing with it, and as long as your
transaction lasts, it locks access to the data.
This was very good if this architecture fit your problem.
It kept the programming model simple.
It's still good if it fits your problem today, and it fits quite a lot of problems quite
well.
However, as the web grew in influence and massive scale computing became more common, having
a relational database management system as a synchronization point to your data, a source
of truth, simply didn't scale.
So people started experimenting with other approaches.
I was once asked to consult on a huge project.
They had decided to use a NoSQL database as their primary data store, which is fine,
but they'd forgotten or didn't realize the importance of the protection that transactions
that they were more accustomed to had given them.
This NoSQL database wasn't transactional, so data was shared by multiple processes and
written to by multiple processes, and the results were essentially random.
Whoever wrote last got to store their changes, everyone else would lose theirs, and without
any indication of the loss.
It made me feel a bit queasy just to think about this big system with all the data shared
and no protection or coordination between concurrent processes.
This was a problem of not really thinking about the architecture of the system, but
only the tools.
It's not the same thing, a collection of tools alone doesn't make a software architecture.
This team had seen one of the big web companies develop this great looking NoSQL database
to help them scale up, and it did that, but only in the context of a whole raft of other
choices and constraints that this team hadn't thought to apply.
There is another somewhat similar, very common mistake that probably is a little closer to
your own software.
Microservices were invented to decouple development, they're intended to be independently deployable,
freeing teams to work separately from other teams, which means you don't get to test
them together before you release.
If you're on Netflix or Amazon, this is fantastic.
If you're a small development shop with a handful of developers, it's almost certainly
overkill and so pretty inefficient.
But worse than that, most teams that I see that claim to practice a microservice approach
aren't.
They don't have independently deployable services, which means that they have to test
them all together before they feel confident to release them.
This is in fact a distributed monolith, which is a rather complex choice, good for some
things but never simple.
I think that software is more complicated than we often think.
So the sensible thing is to approach it with a little bit more caution.
I don't mean that we should agonise for weeks or months before taking the first step, completely
the opposite in fact, but we should work on the assumption that our best guess so far
is almost certainly wrong.
So architect our systems to allow us to recover when we learn more and find out where it's
wrong.
This takes skill, certainly, but it is realistically the only sensible choice in my opinion.
Architecting a complex system is not something that someone in an ivory tower does at the
start of a project.
It's also only partly intentional.
Like more fine-grained design decisions, it's an iterative incremental exercise in a kind
of guided evolutionary process.
This is not terribly precise and sometimes, even despite cleverness, expertise and experience,
people get things wrong.
That is, I am afraid, an inevitable consequence of dealing with something as tricky and complex
as software.
A few years ago, a performance optimisation strategy in Intel processors meant that encryption
could be broken.
Obviating all of the clever security architecture features in the web, cloud, on-premises systems
even mobile devices and on pretty much every operating system.
That is a salutary lesson in how fragile architecture and design can be to tiny things.
A good way to approach this is to think about the things that you are unsure of.
I was chatting to my friend, Kevin Henney, a few days ago and we were talking about design.
He said, as soon as someone says, I don't know, there's a seam in the design.
That's quite a good way to think.
Start the design of your system with your best guesses, based on what you know so far
and be on the lookout for the things that you don't know or are unsure about.
You don't have to do a depth first exploration of these things, in fact you shouldn't, but
you do think about how to insulate the stuff that you do understand from the things that
you don't.
Crude sketches in code of those things that you don't yet understand and abstraction can
act as placeholders, while you make progress and grow your understanding for the bits of
the code that you do know.
Don't build world-class security into the first sketches of your system.
Don't take on the burden of making your system perfectly scalable from day one, but do design
your system as best as you can imagine so that you will be able to enhance security without
undoing the progress that you've already made and that you can take advantage of your
great work so far, and allocate it differently so that it does scale up if that's a demand.
Insulate the parts of the system that you understand well from those that you don't
yet.
These kinds of design approaches are at the heart of what I describe in my modern software
engineering book, using the techniques to manage complexity, to give you a chance to
go back and enhance or even correct architecture missteps when you discover them.
When we built our exchange at Elmax, we had three different fundamental attempts at the
basic architecture of our system.
But because we'd taken an incremental approach to its design, only a small part of our effort
was lost on each change.
My final piece of advice on software architecture is to aim to be intentionally a little bit
vague about the detail.
We should guide our decisions with constraints, but in great architecture there are actually
relatively few constraints.
But those that are there are pretty rigidly enforced.
Thank you very much for watching.
