Continuous delivery is the most effective way that we know of to create software.
According to the data over many years from the State of DevOps report,
collected by the Dora Group inside Google, continuous delivery literally enables us to
build better software faster. This just works. One of the most common pushbacks that I get,
whether I'm explaining continuous delivery in general or specific practices within it that
help us to achieve it, this is all very well for the geniuses at Google,
Netflix, Spotify, Amazon, Tesla, SpaceX, filling your favorite unicorn here,
but our devs aren't as good as them. This stuff only works for geniuses.
As far as I can tell, this is completely and totally wrong.
So what do you do if you only work with human beings rather than teams of geniuses?
Hi, I'm Dave Farley of Continuous Delivery. Welcome to my channel.
If you haven't been here before, please do hit subscribe. And if you enjoy the content today,
hit like as well. I think that this blame game of assuming that our team isn't good enough
is a common human failure, a kind of institutionally imposter syndrome.
Those other people do better than us because they are better people than us.
Well, actually, I think what's much more true is that those people do better than us because
they work in better ways than we do. It is usually the case that when a team is under-performing,
that it's more about the system that they're working in rather than the people in the team.
The idea of the rock star developer is alluring but wrong.
So poorly performing teams are much more about a lack of adequate training, tools,
organizational culture and often a sign of too much management direction in interference
rather than a fault of the team members themselves.
Unfortunately, this becomes a nasty downward spiral. The worse things get, the more managers
feel the need to manage, introducing new reporting requirements, more action plans and so on.
The result is that the team have less time to do their work
and so lose confidence and trust in themselves and each other.
My wife has done some work helping under-performing teams, not in the IT world as it happens.
Usually she starts work like this with a directive to shake things up,
to replace ineffective managers and maybe bring in new talent.
But her mantra is always that the people out there are just as crap or just as great as the
people already here. So it's better to work with the people that you have and already know
than to bring in some people that you don't.
Her approach is usually to start by reducing outside interference, stop unnecessary reporting
and to give decision making back to the team.
In one such contract she was asked to work with the team responsible for collecting payments.
This team were one of the worst performers in the whole of London.
She introduced ways of working that sound a lot like Agile to us.
They didn't build a big service improvement plan with targets and deadlines,
instead they started making small changes.
Changes that they could measure the impact of in under a week.
Small changes like these don't need senior management or board approval,
so the team could just act on what they agreed sounded like a good idea
and that they hoped would steer them towards their goal.
This is very different to simply following procedures or completing tasks set by somebody else.
The team chose what they could improve and brought their own ideas about how they could
improve things. To check whether what they were doing was improving things or not,
they collected their own monitoring data about their performance.
Instead of just reporting generic KPIs upwards,
they picked the measurements that suited the improvement.
All together, they spoke trust and confidence in themselves and in each other.
Within a few months, the team were transformed into a much happier and more cohesive team.
They moved quickly up the rankings to become one of the top performers in collecting payments
in their field in London. So much so that the same people who had been seen as a failing team
were now much sought after in other parts of the business to help them to improve.
Good job they weren't fired then really. This may sound risky to people that aren't used to
working this way, but it works and it works pretty much everywhere.
Let me pause there to thank our sponsors. We're fortunate to be sponsored by equal experts,
tricentis, transfic, sleuth and ice panel. All of these companies offer products and services
that are well aligned with the topics that we discuss on this channel every week.
So if you're looking for excellence in continuous delivery and software engineering,
please do check out the links in the description below.
For this more distributed approach to decision-making at work,
you need to help people to learn how to become autonomous.
And you need the organisation to allow space for teams to make decisions for themselves.
The failure of agile in our industry is largely at the feet of organisations
that so misunderstand and constrain it that there's no room for any agility at all.
The apparent chicken and egg problem here is that to work in this provenly more effective way,
we need the culture of teams and organisations to change.
But culture change is what consultants like me always say,
but it's really a kind of get out of jail free card.
Of course everything would be better if the culture was great,
but changing the culture is incredibly difficult in any organisation.
So we'd like people to be able to work better,
but they've learned how to work to be successful in this organisation,
where the culture is inherent and unavoidable.
This is the chicken and egg problem.
We need people to change their culture to be more autonomous,
while working in an organisation that promotes and rewards existing behaviours that aren't.
So what the culture of most employers has done is to train autonomy out of their workforce.
There's an interesting story from the history of lean manufacturing.
In 1984 General Motors partnered with Toyota in an auto plant in California.
Toyota were innovators in lean manufacturing.
General Motors did this to learn about the Toyota production system,
their world-leading lean approach to building cars.
They picked the Fremont assembly plant for the experiment,
which was later renamed Numie.
Before this the Fremont plant was said to be the worst in the US,
and specifically the workforce was also said to be the worst in US car manufacture.
Things were so bad in the Fremont plant before the experiment
that workers sabotaged the cars that they were building
by putting coke cans and bottles inside the structure of the doors so that they rattled.
Mondays commonly saw 50% of staff off sick.
By 1982 General Motors had had enough and so they closed the plant laying off all of the workers.
When the partnership started though, Toyota said they'd reopen and re-hire the same people.
General Motors hated this and tried to talk them out of it,
but Toyota said that they'd re-hire but change how things operated.
The old employees also hated this, but they needed the jobs.
Toyota re-trained the employees, sending many of them to Japan to train in Japanese car plants
and to learn the Toyota approach and culture.
Numie later became the highest quality General Motors factory in the United States.
The employees who went through this transformation cited two reasons for this success.
Toyota's focus on quality and teamwork.
Lean approaches in general and continuous delivery in particular
are very strongly focused on building quality into our products.
Our goal is to build good stuff, not to treat quality as an afterthought.
We optimize our process to minimize work, maximize focus,
and always, always to focus on the quality of our products and processes.
If our tools, technology, or processes present barriers to this quality focus,
it's everybody's responsibility to change them, to try new things,
to attempt to remove those barriers, and so achieve higher quality wherever we can.
One particularly interesting insight from the Numie experiment comes from John Shook.
Shook was the first American to work for Toyota in Japan.
He said that the real difference was in how the change in culture was achieved.
The conventional way to effect change like this is to change thinking in order to change behavior.
The Toyota and Lean approach was exactly the opposite,
to change behavior in order to change thinking.
In software, this is echoed very strongly as one of the findings from the State of DevOps reports
and is reported in the Accelerate book.
You can act your way to a better culture
by implementing these practices in technology organizations.
I believe this idea to be profoundly true, but it's also a bit complicated, isn't it always?
DevOps experts often talk about getting the culture right,
and this is extremely important, but I think that it's also commonly misinterpreted.
To me, let's spend lots of time teaching people how to think differently,
rather than let's start trying different ways of behaving and teach people to think differently from that.
If you've never read the Accelerate book, I very strongly recommend it.
The research that is behind the book helped the authors to build a predictive model for
software development. This model clearly shows positive relationships between specific behaviors
and better outcomes.
The fundamental behavioral change that led to this model,
and that will lead you to achieving the promise of this approach,
is to make change in small steps.
To try stuff out, see what works and what doesn't.
Use these small steps and the learning that you gain from them to try to optimize
towards your goal, whatever that might be.
This is the starting point, and when you start out,
you probably won't be very good at working in small steps and learning from them.
But basically, this is the cultural change that you're striving to achieve.
I think that of this as optimizing for learning,
this idea of focusing on behavior as a means to change culture is an important one, I think.
And not necessarily obvious, and so is often overlooked.
The trouble is that it's easy to confuse this focus on behavior sometimes with a focus on tools,
and we love to focus on tools in the software world.
This is not the same thing at all.
I think that the difference is maybe in the nature of the goals that we're striving to achieve.
Good goals focus on real, desirable outcomes, not on the steps towards those outcomes.
We can then try behaviors that we think will help us to achieve those outcomes.
Goals like these are never about the use of a particular tool or technique or ritual.
These things are at best a means to an end, but never the end in itself.
Good goals may be pretty generic or very specific.
We could decide that we want to build better software faster.
Actually, everyone wants that.
That is why the measures behind the State of DevOps report matter,
why they're important, because that's exactly what it is that they measure.
Stability and throughput are important generic measures.
They aren't perfect, but nothing else is as generic,
and if you have high scores in both, you're doing well.
It really is that simple.
If you don't have high scores in both, you aren't doing as well.
So now's the time for more small steps to fix the things that are stopping you from doing well.
Try stuff to see what works, do more of that, and less of what doesn't.
There are a few reasons why the autonomy of teams is important.
First is that people doing the actual work have a much deeper insight
into what the problems really are, what works and what doesn't.
So we want them to have the freedom to correct things,
at the moment, when they see something's going wrong.
Not to wait to be told by somebody else who's far away from the actual work.
I did some work for a client a few years ago.
One of their developers told me that one day,
they were working on a feature and spotted a bug in the code.
They fixed the bug and carried on working on the new feature.
Later, they told the project manager who then told them to revert the bug fix
because they weren't supposed to be working on the bug.
Clearly, this is in no one's interest.
The code isn't better or safer with the bug.
Following a plan is less important than producing good products.
This kind of irrationality is caused by focusing on the wrong goals,
steps in a process.
In this case, seeing the bureaucracy surrounding software development
in this organization as the goal rather than a means to achieve it.
The production of good, safe software systems is the real goal.
So if we need to allow teams the freedom to operate,
freedom to make choices and we need to help them to focus on the goals that really matter,
rather than some narrowly focused process oriented goals.
So our aim is to encourage our teams to start trying new behaviors.
Key amongst those is working in small steps and targeting specific goals
focused on building better software faster.
We can measure with the Dora metrics.
The Dora model goes further than that though.
These behaviors together predict high scores in stability and throughput.
So these are good places for teams to start with their behavioral changes.
Making small steps towards these.
Don't wait for someone else to fix these things for you though.
Start working in small steps doing whatever you can to improve in each of these areas.
Measure your progress by tracking stability and throughput.
And start thinking about how to tell whether other things that you want to try are working or not.
If your team can't be trusted to do this,
you don't get to fix that problem by micromanaging and gatekeeping them.
Because all that does is show them that you don't really trust them.
So at best, they will be second guessing their own decisions.
And at worst, and probably more commonly,
they're going to stop making decisions altogether and rely on somebody else to make decisions for them.
The last part in helping teams to become responsible is to make sure that they are actually responsible.
If they make a bad choice, it is down to them to fix it, not somebody else.
Gatekeeping in a process encourages people to adopt a mindset of throwing problems over a war.
Business teams specifying ill-thought-out solution-focused features to development teams.
Developers assuming that quality is somebody else's problem
and assuming that someone downstream will test their crappy code.
QA teams assuming that their job is to raise bugs not to help developers to reproduce them.
Or operations teams preventing release unless accompanied by pages of documentation
that no one will ever read.
The goal of all of us is to produce great software
that helps people to do something that they want to do quickly and efficiently.
And to do that, we need to learn to be creative, iterative, collaborative and autonomous.
Thank you for watching.
And if you enjoy the content on the Continuous Delivery Channel,
please do consider supporting us by joining our Patreon community
and joining the Discord discussion.
Thank you. Bye-bye.
