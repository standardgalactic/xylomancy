Hi, this is Pat with Codecademy. I'm a developer based in Washington, DC. Learners ask me all the
time what they should be learning if they want to get started in programming. There's no easy
answer, but there are some common paths that programmers take. Usually it's in web development,
computer science, or data science. But if you're new, all this can be really confusing,
and that's perfectly normal. So don't worry, we're going to cover what each of the paths looks like,
what it takes to get started in them, and where they lead. And hopefully by the end of this,
you'll feel a little bit more comfortable about which path might be right for you.
Let's get started. Codecademy offers learner paths and computer science,
data science, and web development. All agreed options if you want to launch a new career,
but which is right for you. To figure out which path is right, I find it helpful to get a much
higher level understanding of what problems are being solved rather than the coding languages
and technologies being used. Now, quick disclaimer, while getting this bird's eye view is more helpful
to determine the boundaries, it's also a bit oversimplifying. At the start here, I want to
state outright that for simplicity's sake, we're missing out on a lot of detail. For example, we
could get into the weeds of which programming language has the upper hand, but that would
completely miss the point. We're trying to understand what type of work these programming
languages help people do, not what the shortcomings and advantages are. Programming is about people.
It's the convergence of technology and an idea come to life. So what's the difference between
web development, data science, and computer science? The truth is, they all overlap in some
places and at the core is programming. Let's take computer science first. Computer science is
concerned with the theoretical or academic side of computers, but when it comes to how it works
in the real world, its primary application is exploring business problems and building the
solutions that can address them, whether that's using technology to address the needs of a customer
base or digitizing an in-person experience. Computer science can span just about all programming
languages, frameworks, and libraries, but practitioners tend to focus on timeless
foundational concepts in addition to the tools to get it done. Some of these concepts include
computation and solution complexity, probability theory and forms, data structures and algorithms,
software design patterns and principles, some of them like functional programming and
object-oriented programming, databases and testing, operating systems and scripting.
This is hardly all that computer science can do, but practitioners tend to tackle bigger
problems than minute details. Computer science is sometimes seen as the digital translator that
turns high in the sky concepts into programming functionality. For example, say you're a car
sharing startup. You need to get a rider from where they are to where they want to go. How do
you determine what side of the street they're on? What happens if that's a one-way street?
What happens if there's construction? Which route do you take to get the rider home with the
least amount of traffic? These are all problems a computer scientist solves using algorithms,
which is really just a fancy way of saying instructions for a computer. Next is data science,
the convergence of data, statistical analysis and business. It too seeks to explore business
problems, but it's also about making informed suggestions on how to solve them. For instance,
maybe you already have customers, but you don't understand their buying habits. By analyzing data,
you can better understand why they make a purchase from you to give them a better buying experience.
Some of the common languages, concepts and syntaxes for data science can include
Python or R, machine learning, model evaluation, feature engineering, data modeling, processing
and visualization, algorithms, logarithms, probability, statistics and mathematical solutions,
graphs, plots and histograms. Again, data science is a broad field with a wide set of tools to
accomplish the goals, so this is hardly an extensive list. But data scientists use a combination of
programming, statistics and business acumen to make suggestions about how to solve business
problems. They work closely with their coworkers to determine problems they didn't know existed or
clarify relationships that can be leveraged for better outcomes. Last, there's web development.
This is usually where the rubber hits the road and we're building, implementing the decisions made
at the higher levels. Web developers create, integrate and deploy the features that were
decided upon and by doing so, solving the business problems. There are typically two
disciplines that many web developers focus on, even though they may be proficient in the other,
front end development and back end development. Back end is concerned with getting, storing and
retrieving information a business needs, whereas front end is concerned with showing, capturing
and allowing users to submit that information. Web development uses a wide set of tools to
accomplish the goal, but a typical tech stack consists of HTML, CSS and JavaScript for the front
end. These could include JavaScript libraries like React, Angular and Vue with any number of
helper libraries for the HTML and CSS like post-CSS and CSS components. For the back end,
many common favorites are PHP, Ruby and Node.js with databases like MySQL, MongoDB or Postgres.
So how do you know which path is right for you? I think it's helpful to ask yourself two questions.
Where do you want to work and what kind of work do you want to do? Why those two questions? Well,
different companies at different stages of growth may treat each of these disciplines differently.
A startup may not have data for a data scientist to use. A boutique design agency may not ever
need one true computer scientist because they're making marketing websites. A large consulting
firm may specialize in big data for its clients and only need a handful of web developers but
dozens of data scientists and computer scientists. So it can be helpful to narrow down where you
hope to end up. Moreover, each business at each size has different needs and will require different
solutions from different kinds of programmers. So I like to tell learners to begin with the
end in mind so you don't end up somewhere you don't mean to go. It's normal to have your career
evolve and change and the most successful programmers I know make adjustments to their careers
rather than just have it all lined up at first. You might start out a web development and realize
you really like working with data visualizations instead. It's just normal for your career to
change as you both learn more about what kind of work you actually do and where your strengths
are as a programmer. Next, what kind of problems do you want to solve? This seems abstract but
it's a helpful thought exercise to mull over when considering paths. Web development can be very
rewarding to see your features and interfaces come to life and it's a great choice if you love
seeing your work on a friend's screen in the wild. A web developer could help a business by building
their online presence and build the digital equivalent of the store. As a data scientist it
can be very challenging to explore high-level problems and ride the rapids of data mining.
You get to ask big questions and test your hypothesis which can have lasting impacts.
A data scientist would help a business with decisions like suggesting which products the
store carries, which ones are hits, which ones are duds, where are the best places to put those
products and even how long a store should be open for. Lastly, it can be very rewarding to help a
business grow and scale as a computer scientist. You get to trailblaze paths and solve mission
critical problems blocking the business from growing to its true potential. A computer scientist
could help a business by creating a stress-free customer experience making sure there's the
right inventory for the right season and even smoothing out purchases and returns without any
hassle. As a general rule of thumb I like to tell learners if you get a lot of enjoyment out of
building things try web development. If you like solving thought experiments give computer science
a go and if you like science class growing up and doing your own research then maybe check out
data science and see how it feels. Again successful programmers often go through phases and will
change disciplines depending on where they work. Some see themselves as technologists first and
grow to adapt to what kind of work they're doing. Don't feel like you're locking yourself in when
you start down a path. The basic principles taught for each path are true across computer science,
data science, and web development. Codecademy has the paths feature to make it super easy to learn
the skills you need to do the work in various disciplines, learning it in the right order,
combining skills in the right way, and with lots of portfolio projects as you go. If you
want to choose your own adventure there's a ton of options including your own pick and mix of the
free Codecademy courses. This is Pat with Codecademy. I really hope you felt this video was helpful but
did I answer all your questions? Leave a comment below or subscribe to this channel. I love responding
to learners comments. Check out the description for some of the links that I mentioned here and if
you want to get started in programming come on over to Codecademy. We'll help you get started.
