Hello, my name is Stephanie.
I am a software developer from Georgia.
I've been programming for about 10 years,
and today I'll be sharing some of my experiences
and things that I wish I knew when I first started out.
I've put together a list of things
that helped me along the way,
and I'll largely be speaking for my experiences
and observations for my classes and at work.
So programming is incredibly broad,
and that's why you often see many people
with different backgrounds
have very different starting points.
So what's important is that you have an idea
of what you want to achieve by learning how to code.
So my starting point was just trying to change
how my profile looked on this virtual pet website, Neopets.
Please hold the judgment, no one said it had to be practical.
But from there, you'll want to get an idea
of where to start to learn this knowledge.
It doesn't matter where you start.
I've seen people start programming with a class,
a boot camp, a book, or even a bunch of Google searches.
I mean, I just ran some Google searches
to find some pre-made templates I could copy and paste.
Once you get your feet wet,
you start to figure out what you don't know.
So it's a bit counterintuitive,
but when you start to see what you don't know,
then you can start learning those things to reach your goals.
So I needed to know more about what the code was doing
in order to fully customize the website.
And so that's where I started learning
about web development.
I also realized that I needed to use my strengths
to learn concepts,
especially since code can be boiled down
to a bunch of characters in a file.
It can be difficult to understand
what's happening conceptually,
so it's a good idea to understand your learning style
and use that to master and remember a concept.
I'm very much a visual learner,
so I try to turn the concepts into something tangible,
like associating them with different images.
If there's something that I'm really struggling with,
then I'll try to draw it on a piece of paper or whiteboard.
For example, I started out learning Java,
which is great for object-oriented programming.
I'll skim over the details,
but there's this concept called a class,
which determines how an object is defined
and can be used to create instances.
So when I first learned about classes
and instances of a class,
I spent weeks trying to remember the difference
between the two and how they were related,
and I just couldn't nail the two down for the life of me.
Eventually, I just threw out some pseudocode
or fake code on a whiteboard with some illustrations,
and I suddenly started to get this visual
of what was happening in my head
and saw this assembly line with a blueprint
turning out these little bicycles.
Not everyone has the same learning style,
but I find that visualizing
helped me the most in remembering tricky concepts.
Another thing that I wish I knew
was probably that I'd get really comfortable debugging.
A lot of times we strive for perfect code,
but there isn't really such a thing.
When you're first starting out,
if you encounter a lot of bugs,
that doesn't mean you're bad at coding.
So don't beat yourself up over simple bugs
that in hindsight are obvious.
I mean, I've spent a lot of time
getting hung up on fixing syntax errors
that it made me lose sight of what I was trying to do
from a conceptual perspective.
So as a result,
I've developed a pretty complicated relationship
with a debugging process.
When I write some bad code in my editor,
it'll yell at me and serve up this lovely reminder
that my code is very wrong
in the form of this red underline.
So I fix the issue and the line goes away.
And then it comes back two lines later,
and three lines later,
and four lines later and six lines later.
I've had plenty of those days
and still have them where no matter what I do,
everything is wrong.
But that's okay.
Don't worry about remembering the programming syntax.
You can easily just run a quick Google search
to figure out what the right format is.
It's way more important to focus
on what's happening conceptually.
The most successful programmers I know
are always able to answer why
and what their code is doing behind the scenes.
It's kind of like when you're writing an essay.
If you have some grammatical mistakes,
it doesn't mean you're a bad writer
because you've got some solid ideas to shape your essay.
And for all the time that you spend fixing your bugs,
it's also really important to set aside time
for your brain to relax.
I initially thought that the amount of time
I threw into a problem would be proportional
to the progress that I made.
Well, sometimes this is true,
and other times it's less true,
especially when you've been staring at the same issue
for eight hours straight.
This has probably been the hardest for me
to come to terms with,
especially since I can be pretty stubborn.
But there have been countless times
where I would be on the same two lines of code for hours,
walk away to grab a snack, come back,
and then the answer is staring at me right in the face.
Sometimes it feels like my brain
is staging a boycott against me,
but if a break is all it takes to get a solution,
then I'll do it.
You should also take charge of your own learning.
A large part of that is being comfortable
with not knowing things and with asking questions.
In my classes, I had really low self-confidence
because it felt like my peers had so many more years
of programming experience on me.
I thought I would be judged for saying something wrong,
so I just thought,
well, I can just run a quick Google search on this later.
I didn't realize this,
but I missed out on a lot of great conversations
because of this.
Eventually, I got over my mental roadblock
and started talking to my peers
about concepts that were covered in class.
And believe it or not,
it actually helped me gain confidence
and helped them solidify their understanding.
So more often than not,
the conversation would evolve beyond my initial question,
and I would walk away with more than
what a Google search could achieve.
I also realized that when I started talking more,
I was also exercising the jargon.
One of my most embarrassing moments
was when we were talking about cash.
I had only ever seen the word on paper,
so I thought it was pronounced Cache.
And I am so glad someone was there to correct me
before I said Cache in an interview.
Everyone's experiences are different,
and these are some of the realizations I made the hard way.
But the programming community is very helpful and inclusive,
so don't be afraid of not knowing enough
to be a part of it too.
Trust me, we've all been there.
Just ask your question,
and odds are someone else will have
the same question as you too.
I hope you found this video helpful,
and good luck on your coding journey.
