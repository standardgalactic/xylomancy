Hey everyone, welcome to yet another episode of my video series on Joshua Bloch's effective Java
Where I'll take the items that he has
Enumerated in this book and expand on them and try and make sense and understand
What advice slash programming principles?
He's noted down in this book and hopefully of course the reason for me to record this is as I'm trying to make sense of them
And understand them you too will learn something and gain value from it
Apropos Java and object-oriented programming in general, of course as I usually do
I need to go through the proviso if you already watched the previous items you could just skip this part and save your time
But without further ado, I'll get started
Firstly, this is not a tutorial. I'm definitely not a teacher and as I've said many times already
The more I'm learning about Java and OOP programming
The more the more I realize how much of an expert I'm not therefore
Please don't think of this as a tutorial where what I say is
Gospel truth so to speak. I'm pretty sure already. I'm still in item five
I'm pretty sure I've already made a lot of mistakes. In fact
One person commented out a few mistakes that I've made in I think the first item so I'm really grateful for that
So I do request if I do make any mistakes
Please point them out leave them down below in the comment section
I'll pin them if there's something if it's something significant
Because then it's not only just for me
But also anyone else watching these videos can can learn from the mistakes that I made think of this as the blind
leaving the blind
this is more of a
Exploratory
Disquisition and I'm as blind as you are perhaps even more
It's got nothing to do with the fact that I'm wearing glasses
It's simply the fact that I'm still very much new to Java
And an analogy that I've been using in the previous videos in this proviso section is
It's a lot similar to what one would do in a university tutorial setting
Where we've got we've got the teacher of course then we've got the bunch bunch of students
Working together on a certain assignment or problem statement trying to figure it out and make sense of it
So that's why I call it a collective
Exploratory Disquisition and he has the third point as I said I will inevitably make mistakes
There's no way that I can get all of this right because a lot of the concepts that he is
Highlighted in these books. I've never ever used them in my day-to-day job
Let's say or my day-to-day programming. So it's all quite new to me
Some of it at least therefore again, sorry to keep beating on a dead horse here
Please do point them out and given that this is a YouTube video series. Sorry given that this is a coding video series
And it's on programming. It just makes sense to have all the code that I use on get up
So for each item, I'll break them down
I'll break the get up repository into different items and you could find not only mine, but even just your blocks
personal repository to that is published
You know in his
Get up account, which is all the code used in the book in fact
Alrighty, let's get started. So this is gonna be item number five. This was a very very interesting item
I've got to be honest. The more I've learned about the dependency injection pattern
The more I've begun to appreciate it and see the beauty in the inversion of control concepts
I would say Gwen Reed Martin Fowler's blogs
He's probably the person who introduced it to the broader programming community
But Martin Fowler has some great blog posts on in version of control and of course with dependency injection
Normally programmers at least I normally use it with the framework with with spring or caucus another framework that we use at work
And yeah, I've really begun to appreciate that pattern
and item five, of course states
Prefer dependency injection to hardwiring resources now before we get to any of the code
Let's try and get a few definitions across now
Some people might not appreciate this and some people might be a bit turned off by just reading of definitions, but personally I
have
Great admiration and I'd say even even respect for words. I love language
Therefore I do try and rely on definitions quite a lot because I think it's a good way to get a high-level understanding
Before getting deeply into the code and sort of practically understanding
It's all it always I think it's always good to first get a theoretical understanding
Despite what some people might say where you know, it's all about the code and the practical understanding in any case. Sorry
I'm way too equations
So of course two key words is dependency injection
Well, two key phrases would be dependency injection and hardwiring resources
So firstly before we look at any code, let's try and understand what what hardwiring resources is I
Couldn't find a really good definition online
I couldn't find one that was succinct and
Conveyed and sort of encapsulated that's not a programming pun encapsulated all of what this term meant
So I ended up writing my own and here's what I wrote down
Classes have dependencies obviously. So if you have a class, let's say called
Person or a better class a class called employee
That class may have a dependency called class department because that employee might be a class of
That employee might be a part of a department. So in that case the employee class is dependent on the department class
Formerly the client class dependent class depends on the service class for different utilities
It doesn't have to always be utilities, but in this case it makes more sense to think of it as a utility class and
Having dependencies can create tied coupling. That is true
Which should be avoided in software engineering, of course
fundamental principles in all the programming it can create inflexible. Sorry, I shouldn't say OOP programming
It's software engineering in general, which is why we have
patterns such as the microservice architecture because we want
Services itself to be the couple not just at an OOP level
Getting back to this
It can create inflexible and untestable code if resources are hardwired by instantiating a service class and creating objects within a class
Ergo, we should prefer dependency injection design pattern
Correct. So this is the bit that
We're gonna
Elucidate and expand on the most
the idea of why oh, sorry why it's not a good idea to
instantiate and and hardware resources in a client class
If it's depending on some other utility class
So now let's take a look at what dependency injection is because that is the
Solution that we're prescribed to this problem we face with tied coupling
So I found this I found two definitions
one is on geeks for geeks by
Gurpree Sashdeva. Here's his I'm assuming Gurpree. Yeah, Gurpree. This is probably a bloke's name. I'm assuming
Not I'm not I'm assuming here's his
Definition of what dependency dependency injection is just to make it easy
I'm gonna call it DI because sometimes dependency injection. It's kind of like a tongue twister. So I'll just call it DI
DI is a design pattern in which one object supplies the dependencies of another object, correct?
It removes the tied coupling of dependencies. So the problem we had before with hardwiring
From the programming code so that it is easy to manage and test the application
DI is also classified as a form of the broader technique of inversion of control, which is something I touched on
So the way I think of it is
Inversion of control is a broader
Principle more of a even like a paradigm in programming
I wouldn't probably put it at that level, but it's somewhere between a pattern and a paradigm
Let's think of it that way which again, as I said Martin Fowler and I believe uncle Bob
So I think those two people invented it or popularized it introduced and
dependency injection or DI is more of a
Implementation of what inversion of control is so inversion of control is more for a practice a
Principle that one can follow whereas DI is that most solid implementation in the form of a engineering pattern
The responsibility of providing dependencies is delegated to the external code, correct
The interjecting code constructs the services and invokes the client to inject them
The client code clothe the client code need not worry about the
Interjecting code and how to build the services or in some cases
Even what actuals even what the actual service is being used
Let me read that sorry the client code need not worry about the interjecting interjecting code and how to build the services
Oh in some cases even what actual service is being used. Oh gotcha
So because it's a reference that we are passing
Through a parameter in some kind of method in some cases. We don't even have to worry about what the actual service
That the client is using
So of course reading this definition one thing that should remind you of is
frameworks a very popular one or probably the most popular one is spring and you know the auto white annotation which
helps us to inject dependencies into our
components and
That's essentially the framework taking care of that. So there is this bit here where it says
That line right there
The responsibility of providing dependencies is delegated to external code
So this is really what inversion of control is we are inverting the control
They're giving that control to an external party or an external framework in this case and that's what's going on here
so the definition by
Oracle docs
would be
Di enables you to turn regular Java classes into managed objects
Again in inversion of control this management is done by the framework and
And to interject them into any into any other managed object using di your code can declare dependencies on any managed object
So if you really think about it
What di allows is in many ways is to follow that good old OOP principle to prefer
composition over inheritance because you will see in the examples soon
the dependent class is
composed from the class that depends on and
Di allows this composition to take place. So I've made a mistake here
I should type effective Java example because these are the examples. We're gonna take a look at
Alrighty firstly, let's take a look at how not to do this
How it would be done if we didn't use the di pattern by hard-wiring resources
the first approach that
Joshua block has given in the book is
By using
Static utility classes or by using static utility methods
So firstly in the example we're gonna use there's a class called spellchecker which depends on a class called lexicon and
That example is what we're gonna use across and eventually we're gonna use di onto that just to show how it works
And and why it's a better option. So it's quite straightforward despite not being the proper way to do this
It's sort of an anti-pattern. We're doing a clear hard-wiring here on line number nine. We're creating this immutable object
The spellchecker class is dependent on the lexicon class and we're storing it in a variable
Coordictionary and that's what we're using throughout this class and we're creating this immutable object using private static final despite it being immutable
It's still tightly coupled because it's hard-wired onto the class itself every time the spellchecker class is instantiated
Another example Joshua block highlights is using a singleton another way people do this. It's quite similar
Nevertheless, we're still hard-wiring a resource. I realize I've made a mistake here. I should get rid of the static keyword
That's where that instance of this class is given now
Yes, I'll only be one object of the spellchecker class, but the hard-wiring has still taken place, which is why he states
neither of these approaches is
satisfactory because they assume that there is only one dictionary worth using which is the one that be hard-wire
here and
Here in practice each language has its own dictionary and special dictionaries are used for special vocabularies
Also, it may be desirable to use a special dictionary for testing. Correct
I think I might get to the testing bit a bit later, but I found a really good article
Or like a blog post by spring as to why the DI pattern
Makes testing much more easier in any case getting back to this
It is visual thinking to assume that a single dictionary will surface for all time. So this
Tide coupling again that we touched on makes all these assumptions which in the real world probably
Won't stand static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource
classes like the spellchecker
What is required is the ability to support multiple instances of the class in our example spellchecker
Each of which uses the resource desired by the client in our example the the dictionary. So that's the resource a
Simple pattern that satisfies this requirement is to pass the resource into the construct in
constructor when a new instance when creating a new instance and that is the solution that we shall
You know do a deep dive into
That's happening right here in line number 16 and this here is in fact dependency injection
So we are passing that into the constructor of this class
This is one form of dependency injection
The dictionary is a dependency of the spellchecker and is injected into the spellchecker when it is created
So every single time a client's gonna create an instance of the spellchecker class the dependency is injected
We expect the client in fact to
Inject that dependency or pass it when using this class
So before we look deeply into the spellchecker example in effective Java
Let's take a quick look at this example. I found line a courtesy of by all done
I can never pronounce that name. I know every Java programmer uses this blog by all done
Football but I know that most of us can't pronounce it. So this example here is
How one would normally use DI because a framework is it for us?
So this is an example from spring, of course
And what we have here is we have a class called foo-fo matter and you've
annotated it with the component annotation and what this
tells the compiler or the framework is to put this into the
dependency pool or the object graph, I believe and and then the it's in the
Context of the application in the application container and all these dependencies will be created and they will exist
Within a given scope, of course a scope can change
I believe there's the application context as the request context depending on what the scope that we want
We can define how this component can live and exist and then this foo service class is a dependent is dependent on
foo-fo matter and all we're doing here is we're injecting the dependency
Using the auto watt annotation and this framework takes care of all of that
So spring really injects foo-fo matter into the foo service class now
This is mostly how on our day-to-day view would use DI, but of course
We're not here to learn about spring. We'll he'll learn about the dependence injection pattern
at least how it's
defined in this item in
Comparison or in contrast to hard-wiring resources
So here's the example we have we have simply defined a private final variable of lexicon type collisionary
There's no obviously instantiation taking place. So there's no object creation taking place
therefore, there's no hard-wiring and
Then we have the constructor where we pass the dependency
So we pass the reference the dependent object or the reference as the clients creating an
object from the spell checker class and then
Within the constructor we set that into the private final variable within the class
So in that way we expect the client to provide us with the implementation
We don't do the implementation and over here just to be safe just your block has used
Objects.require on now
So what that tells us is that we can't pass a null value into this if we do pass
Anything that's null it's going to throw null point exception and that's a extract check that we
Pass over that we have in this constructor. So then when the client wants to use this spell checker class
It'll look something like this. Let me quickly demonstrate that so if I'm going to create an object of spell checker
I don't know why
IntelliJ keeps doing that. It's kind of annoying
All I got to do is this
new oops
And then I and here I'm passing the implementation where I'm creating a new Lexicon class
So that's what we are passing here on into line number 16 in the constructor and
That's it. It's as simple as that. That is what dependence injection is
So we expect the client to do the implementation without doing any hardwiring and the great thing here is now
This gives the client the flexibility to pass any type of a lexical, you know, it could be
Dictionary 2 dictionary 3 doesn't really matter over here. I'm just creating it on the go
But or on the fly. Sorry, but it could be a different type. It could be a sub type of lexical
there are many things that we could pass into this constructor and
That creates loosely coupled code. So we continue while our spell checker example had only a single resource the dictionary
dependency injection works with an arbitrary number of resources and arbitrary dependency graphs
It preserves immutability, which is because one one object exists in the dependency graph
So multiple clients can share dependent objects exactly assuming the client's desire the same underlying resources
dependency injection is equally applicable to constructors static factories and builders of course because all those things are just methods which can pass
values into so just so that idea of
All the what he mentions here that in this example, there's only a single resource being used
For example like this in in real life
This is quite rare because one class or one object generally will be dependent on many other objects in a case like that
It's much easier using a framework because then all you got to do is use auto wired or inject or or any other annotation
depending on the framework and
Let the framework take care of it by inversion of control
Let's say and then we give him an example of how the DI pattern has been used in the Java utils library
In fact in it's it's used the example. He's given. It's for functional programming
He says a useful variant of the pattern is to pass a resource factory to the constructor a
Factory is an object that can be called repeatedly to create instances of a type
We shall see soon a good example of it such factories embody the factory method pattern before we continue
Let's quickly get a quick definition of what the factory method pattern is probably one of the most popular patterns in OOP
It is design patterns in OOP
Factory method is a creation on design pattern that provides an interface for creating objects and superclass
But allows subclasses to all to the type of objects that will be created. This is from refactoring guru
So I'm not going to go go deeply into what the factory method pattern is
But essentially it's a pattern that's used when creating objects
And it sort of makes sense to use DI or a variant of DI in the factory method pattern
Because what we're really doing here is creating objects
So the example Joshua block has used is the supply interface that was introduced in Java 8 to implement functional programming
It's a part of the Java utils function package and what this really allows us to create objects
In a functional way or in a functional programming paradigm
What we whether what a client can do is pass in a factory, which is this supplier
To create a subtype of the specified type via the generic because
We've if you go to the example in fact should I okay, so a really good example
I found is on in this article by who's written this
Someone called for sale to three. Okay. I haven't got a proper name. It's just a pseudonym
Anyway, this example here was is really good. It explains what the supplier interface does
so
What it allows is it uses a wild card. So it uses something called bounded wild card type
In fact before I get to explaining it, I mean, let me quickly read this paragraph
by Joshua block himself. So
methods that take a supplier
So that would be this method here the the create method
I'll read that again methods that take a supplier on input should typically constrain the factory's type parameter
using a bounded wild card type and that's what we're doing here the bounded wild card type what this really means is this
Generic type we are passing into this
Method is into the supplier. It should be a subtype of tile and that's why it's called
So the upper bound of that is tile and it's that's why it's called bounded wild card type
So generally the highest upper bound of something would be object because everything is a subtype of object in Java
But in this case and if any type that we pass here should
Should extend or be a subtype of tile
So it's really constrained as Joshua block has delineated on the book
Using this bounded wild card type to allow the client to pass in a factory that creates any subtype of a specified type
Simply what the tile factory is is an object that can be called repeatedly to create instances of type tile
And then another example, which I was showing here this block post by this random person on geeks for geeks
Is much clearer than the one in fact Joshua block has given in the book
So at least to explain what the supply interface does so over here
We have a supply and we're saying its type is double
And we have this random value variable that we're creating
And then simply what this does is it it creates an object every every time it's called and then
The only thing the supply interface
Contains is one method called get which allows us to get the object that we create using
Yeah, of course using using the CAD method. So yeah, the point that he's trying to make in the book is that this supply interface
Is a variant of the dependency injection
pattern being used in fact in a
factory method pattern
And then he continues
Although dependency injection greatly improves flexibility and testability. So that now I want to get to this article
On spring. I would leave a link to this down below in the description. It's a great article. I highly recommend you reading it
You will see the value of using di especially when it comes to testing now. I've personally had the experience of
appreciating
Di especially in the context of things like hibernate using ORM tools
That'll make testing much easier with junit in java. So
Therefore, I highly recommend you read this article. It's it's well worth it worth a read
So I'll read that again because I keep interrupting myself
Although dependency injection greatly improves flexibility and testability
It can clutter up large projects which typically contains thousands of dependencies
This clutter can be all but eliminated by using a dependency injection framework such as dagger
G
Goose juice g u i c never heard of it and of course spring. So that's kind of what I mentioned before
Over here. There's only one dependency, but generally in large projects. That's not the case. There are many dependencies
In that case, it just makes sense to use a framework
And then we finish off by just your blog saying
In summary, do not use a singleton or static utility class to implement a class that depends on one or more underlying resources
That would be hardwiring
Whose behavior affects that of the class
And do not have the class create these resources directly as we saw in the anti pattern examples
instead pass the resources
like that
Or factories to create them into the constructor or static factory or builder
This practice known as dependency injection
Will greatly enhance the flexibility
Reusability and testability of the class. That's it. It's quite a simple item
but it's it's ubiquitous this pattern is ubiquitous in java programming and
I I think especially using it via framework
As a client we would be clients in that case. We will start seeing its value
Therefore, it's something that's worth diving deep into and trying to understand
That's it. Thanks. That's watching. I hope you found value in the video and and enjoyed that
And really I do hope that I'm getting a bit better at making these videos because sometimes as you can clearly see
I struggle one to
Code live but also to to articulate some of these concepts in my own words
But hey, it's a process. It's it's it's it's a journey that counts to use a terrible cliche
Thanks for watching. Cheers
