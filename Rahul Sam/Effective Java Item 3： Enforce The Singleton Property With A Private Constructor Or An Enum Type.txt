Hey everyone, welcome to yet another episode of my video series on Effective Java by Joshua Block.
It's sort of a textbook to code video series where I take
topics and principles from this book and I'm hoping to do it with many other books
and expand on these topics and try to understand them and try and see what value or what we could
derive from what are in these books. And today, of course, we're on item three. So I've already
done this on two other items and it seems to be going well. I certainly can improve on certain
points, maybe above all on brevity and try and convey the points succinctly. But saying that,
though, I want to start off with the proviso. So if you did watch the other two episodes,
you could skip this bit. I'll leave a timestamp as to where exactly you could skip to just to
save your time. So facades, this is not a tutorial. That's a very, very important caveat. I'm not a
teacher. In no way am I a Java expert. In fact, the more I'm learning about Java, the more I'm
realizing of more, I'm realizing how much of an expert I'm not. I'd like to think of it as the
blind leading the blind. In this case, though, I'm really not leading. But let's say at least formally,
because this is a YouTube video kind of formally I am leading the blind somewhere. But that also
means that because I'm blind, I can make mistakes and run into a wall or something. This is only a
exploratory disquisition. That's pretty much it. Trying to make sense of things. The best, I would
say, analogy, day to day analogy I could use is what would happen in a university tutorial,
where we have a bunch of students, we have an assignment or a problem statement or some concept
you're trying to grok. Of course, there's a tutor, but in this case, there really isn't a tutor, but
just a bunch of students getting together trying to make sense of some programming concept and
needless to say, this is a programming video. So it makes sense to have all the code that I use on
GitHub where you could go and play around too. So I shall leave a link down below in the description,
not only to my code, but even to the code that Joshua Block has published himself on his personal
repository. So without further ado, let's get started on item number three, which states,
enforce the Singleton property with a private constructor or an enum type. And this is still,
of course, a part of chapter two, which is regarding creating and destroying objects.
So Singleton was one of the design patterns that was originally, I don't know if the word is originally,
but let's say popularized by the gang of four in their great software engineering book,
Design Patterns. And Singleton is a design pattern that ensures that a class can only have
one object, or as Joshua Block states in the book, a Singleton is simply a class that is
instantiated exactly once. Singletons typically represent either a stateless object such as a
function, or a system component that is intrinsically unique. So this creation on design pattern,
which I said, again, was proposed or popularized is a more accurate term by the hang of four.
It's something one would hear about a lot. If you're doing a, if you're an ORP programmer,
which is most of us, and it's, it's got many advantages, which is probably why we've been
told by the great wise, sagacious programming gurus to implement it. So I found a few advantages
of it. Keep in mind, though, if you do follow this link, this is on refactoring guru. By the way,
if you do want to understand different design patterns, this website refactoring guru is
fantastic. It'll visualize things and use analogies to the real world, which personally for me,
I always find that helps me comprehend things much better. So this design pattern,
the Singleton pattern has, they've expanded on that topic here. They've listed out not only
advantages, but also some cons, as you can see here, some disadvantages too. I'm not going to
touch on those because, you know, going deeply into the Singleton, because going deeply into the
Singleton pattern is probably a bit out of scope for this video. But some of the advantages are,
you can be sure that a class has only a single instance that really helps with maintaining a
certain, let's say, state of an object, more from a business perspective, let's say. So we
instantiate a class and we give an object a certain state, and then generally a client would
expect this object to behave a certain way. And forcing or implementing the Singleton pattern
ensures that this object doesn't behave in ways that a client won't expect. So it helps to sort of
maintain the encapsulation of the class. And yes, you gain a global access point to that
instance, because obviously only one object accessed in memory, whoever that's going to use
that object will still use that one single object. The Singleton object is initialized only when
it's requested for the first time. So that's kind of like, I guess, the lazy loading pattern.
But again, it's good because we don't want to create unnecessary objects. Generally, that's
bad. That's a bad, almost like an anti-pattern in OOP. And on that note, Joshua Block continues,
there are two ways, two common ways, sorry, to implement Singletons. Both are based on keeping
the constructor private and exporting a public static member to provide access to the sole instance.
So the first approach is using a public static final field where the member field that holds
this instance is final. Let's explore that and try and make sense of it. What we have here is a
class, a public class called Elvis. By the way, most of this code I've taken from
Joshua Block's, the code is used in the book itself. I've just sort of refactored it to make
it a bit more easier for us to understand, for me to understand. I should speak individually,
because I don't want to pretend as if I'm speaking on behalf of other people here,
for me to understand. And as you can see here, yeah, the instance is declared final, so that
object becomes immutable. So the Elvis class really has only got a simple method called
leave the building, which states, whoa, baby, I'm out of here. I guess I'm a bit too young or from
a different generation to really get the Elvis Presley jokes, which Joshua Block has made in
this book. It's kind of a bit, you know, before my time, let's say, in any case, the constructor,
of course, is private because this gives the class instance control as I stated in the comment here.
And then as simple as this, when we do get that instance access that instance, and you can probably
see here, we aren't creating any object using the new keyword or whatnot, we're simply accessing
this static member, which belongs to the class itself. And then through the static member,
which gives us that object, the instance, we are accessing this method. So if I do run this,
it'll just say, whoa, baby, I'm out of here, which is really what this object does. There we go,
right there. And on this bit of code, Joshua Block states the private constructor is called
only once to initialize the public static field Elvis instance. So that happens here.
Yeah. The class itself is instantiating itself with this private constructor, because obviously,
it has access to this constructor within itself. And that object is stored in the instance
variable. So yeah, the private constructor is called only once we initialize the public static
field Elvis instance. That's this. The lack of a public or protected constructor guarantees
a mono Elvis stick universe. So the idea is, as I did show here, the client code,
you can't instantiate this class. It's impossible because the constructor is private.
Exactly one Elvis instance will exist once the Elvis class is initialized. No more, no less.
Nothing that a client does can change this with one caveat. This is an interesting point.
And I shall comment on that in a bit. A privileged client can invoke the private
constructor reflectively with the aid of the accessible object dot set accessible method.
If you need to defend against the tag, modify the constructor to make it throw an exception
if it's asked to create a second instance. So firstly, I would say before I say anything or
comment on what Java reflection is, watch this video by code with Joan, obviously links down
below in the description. You know, I've read blog posts what not on this idea of Java reflection,
but so far, no one has explained it simply and plainly the way Joan does in his YouTube channel.
Just in general, code with Joan is a fantastic YouTube channel. I really appreciate his pedagogy
and kind of how what's what I'm looking for, how pedestrian. And I mean that in the positive sense
he makes Java seem to people like me who are still trying to, you know, truly understand the language.
So Java reflection, let me try and explain what it is. As the name suggests, it's a way
for a object or a class to introspect or reflect on itself. So what it does is generally, of course,
a client can't go around tampering private methods and setting setting setters or getters
in a class. That's not allowed that that violates the OOP principle of encapsulation.
However, Java disallowed this concept called reflection, which from what I've read, it's mostly
for frameworks. So mostly for Java framework builders that does allow a class like this,
which has a private constructor and which don't have any setters, which don't have any getters to
still implement that from outside the class using Java reflection. In fact, let me quickly pull out
a more of a formal definition of what Java reflection is, because I think it's important to
know the concept at least. So yes, as I said, this is a definition from Oracle docs, like more
not really the Oracle docs, sorry, it's more of a technical article. Whoa, written in 1998. That was
a year after I was born. Reflection is a feature in the Java programming language. It allows
an executing Java program to examine or introspect upon itself and manipulate
internal properties of the program. For example, it's possible for a Java class to obtain the
names of all its members and display them. That's an important point here. That introspection can
be done runtime. So when the program is being executed, but better if you just watch this
video, it's 22 minutes, well worth your time. So the second way Joshua Block has delineated
on creating or implementing singletons is using a static factory method. Now, if you don't know
what that is and don't know the benefits of using a static factory method, I would link you to the
first video in the series, which is item one that talks about the pros or the virtues of using
the static factory method and item one states consider static factory methods instead of
constructors. But for all intents and purposes within our topic, really, it does the same
thing. So if you take this example, which again is another class called Elvis Elvis,
why isn't it opening up? There we go. So yes, same concept, the constructor is so private,
and we only have one object being created here within the class. And instead of the client
directly accessing the member variable, that member variable is private in this case.
And we rather get it through the static factory method. Oh, this bit here, the read resolve,
we'll get to that soon. For now, just ignore line number 15. And clearly, as he says here,
you can see in the code itself, one advantage of the static factory approach is that it gives
you the flexibility to change your mind about whether the class is a singleton without changing
its API. So what he means by that is if you look at the public field approach, since we're directly
accessing that singleton via the public member variable, it doesn't really give us a flexibility
if we do want to not have a singleton, let's say, if we don't want to fill a singleton pattern.
And I should probably add this here, he also states in the previous paragraph, I should have
read that before, the main advantage of the public field approach is that the API makes it clear
that the class is singleton. The public static field is final. So it will always contain the
same object reference, which what he means there is from a client perspective. I've used an inline
variable here, by the way, the the it says here Elvis, and we're getting that single instance.
Now, it's a similar thing we're doing here. The only difference with the static factor method is
we're accessing it through this method get instance. Now, because it's a method, we can
play around with it and do what we want, so to speak, which is why Joshua Block states it gives
you the flexibility to change your mind about whether the class is a singleton without changing
its API. We don't really change anything in this method. What matters is how we handle
this object or what we do inside it from a client's perspective. An example Joshua Block has
used is something to do with multithreading in a multithread environment. The factory method
returns a sole instance, but it could be modified to return, say, a separate instance for each thread
that invokes it. That makes sense. We don't want there to be problems with multithreading by having
a single object that all the threads share. Let's that could probably corrupt the state of that
object. I don't know just to, you know, thinking out loud here. Now we sort of come to a bit of an
ancillary point, but I think is nevertheless important. A second advantage is that you can write
a generic singleton factory if your application requires it. So what is a generic singleton
factory? Let's try and make sense of it. Firstly, as per usual, I will leave two, two links to two
different, well, one stack of flow answer and then a blog post regarding this concept of type
erasure, which is what allows generic programming in Java and how it happens and why it's necessary
for generic programming. But it's not really within the scope of what we're discussing here.
It's still important to understand though. So what's a generic singleton factory? First of all,
I should say we'll be covering this in item 30 of this book. So probably next year.
Therefore, we shall go into more detail in that video. And item 30 simply states favor generic
method. But I propose to generic singleton factory in that item, Joshua Block states,
because generics are implemented by erasure. So that's what I meant by this type erasure bit.
Please go read up on that blog post article blog post article on that blog post as it'll
really expand on the matter. Because generics implemented by erasure, you can use a single
object for all required type parameterizations. But you need to write a static factory method to
repeatedly dole out the object for each requested type parameterization. This is a very cool concept
once you see in an action, which I shall show a bit of tongue twister, which I shall show in a bit,
because it is it is pretty cool how it all comes together. So kind of definition that I came up
with for what a generic singleton factory is, it allows to create multiple singletons that is not
a oxymoron, you will see, you will see why that is in a bit that behave the same way. So it's kind
of got like a same super type, which mandates how it behaves. Using generics allows to use a single
object for type parameterizations and kind of repeating where Joshua Block stated, and casting
is not required. That too, you shall see. So I've got the example here, this two I took from item 30.
But I just realized that before I do go through the example and explore the code, I didn't mention
those two, the stack overflow answer and then this blog post, but I didn't really even
expand on what it is or what they are. So I want to read out a bit of like the introduction in
this article regarding type erasure, because type erasure is what allows firstly the generic
singleton pattern, but also using generic programming in Java generally,
generic programming in Java generally. Gosh, that's funny. So what does this person say?
By the way, this article was written by Bishal Kumar Dube. So what is Bishal's state here?
Generics concept is introduced in Java language to provide tighter type checks at compile time
and to support generic programming. As I said, the way to implement generics,
the Java compiler applies type erasure to replace all type parameters in generic types
with their bounds or object. If the type parameters are unbounded,
the produce byte code, we shall go to the byte code bit to therefore contains only
ordinary classes, interfaces and methods, insert type costs if necessary to preserve
type safety. That is also something we shall explore. Generate bridge methods to preserve
polymorphism in extended generic types. So you will see that the third point here,
that polymorphism bit in this example that I'm going to show soon. So the Stack Offal
lines are kind of explained in this way. So we have this class, of course, here,
which is simply a list. Sorry, let me say class. I mean, we have the list interface and we have
that list class and it's the generic type where the type parameter we are passing is a string
and then we're just adding it and we're getting it. But in the byte code level,
it really compiles like this. It does do the casting for us. This is not required for us to do
because we're using generics and the type erasure allows this. Going to the example,
here's how the generic singleton pattern works. This instance, we have a variable called identity
function or identity fm. We have a variable, identity function. And keep in mind, object in
Java is a superclass for all other classes. Therefore, any subtype of this type can be
passed into this. So we have this private static final member variable called unary operator.
And then we have a static factory method. What happens here is that method, we can pass a
type parameters similar to how you would pass a parameter to a method. But in this case, it's a
type. So then in the client side, you'll firstly see that I'm not using any casts here. And I have
two lists I've defined. Sorry, two arrays, not lists in this case, a string array right there.
I should probably zoom in a bit more. I apologize. The string array. And then we have the numbers
array. So into the same class, I'm passing, I'm creating an instance of that class, same string,
and I'm getting that object same string, same number. And I'm passing, in this case, the type
string. And in this case, the type number. Now here's where it gets interesting. Despite the
different types, it's still using the same object. We're still, as Joshua Block states here,
doling out the same object into different types. So in this case, we can type, we can apply this,
and then print out all the strings. And in this case, print out all the numbers. But when we run
this code, you'll see here, why can't I, okay, forget about it. When we run this code, you'll see
here, the object is still the same object that it's using for both these cases, despite them
having different types. So I'm printing out the object here, same string, same number. It's still
this object, the identity function object that's passing on this single instance. So it's beautiful.
And that's what allows generic programming, because these are of different types, yet
that object is being passed through these different types to be used and abused, let's say.
So that essentially is what generic singleton factory is. It is a factory. We've got a factory here,
because it's producing or giving, we're creating an object, but no cost being used. I think that's
the biggest advantage I've seen from that pattern. And afterwards, Joshua Block states,
a final advantage of using a static factory is that a method reference can be used as a supplier.
For example, Elvis get instance, which is the method reference, he's a supplier for,
is a supplier, and Elvis is the type you pass into it, which is the example I've used here. So
let's try and understand what does it mean? What does he mean by method reference being
passed as a supplier? Firstly, from the Oracle docs, it states, what's a supplier? I want to
understand it's a functional interface supplier. Sorry, the functional interface supplier contains
one method, which is get that takes no argument and returns an object. But what's important to
understand is, this get method represents a function which does not take any arguments,
but produces a value of type T. So yes, the get method doesn't produce any arguments,
but it has a type. The type could be passed as a generic. By the way, that latter bit I
read from this article, again, in geeksforgeeks, which I'll leave a link down below in the description,
which explains what a supplier interface is written by this person. So one, two, three.
So this is a bit hard to get intuitively, even though most of us in functional programming
use a method reference, but the method reference requires a supplier. This functional interface,
supplier interface does requires a supplier and we need to pass it a type. In this case,
with the class Elvis, we could pass the type Elvis as the generic parameter as of it being of type
Elvis. I don't know. I don't know how else to explain it really. It just seems like it's something
that allows us to do functional programming. And which is why Java has introduced that interface.
Probably it was in Java, I think. And yes, the static factor method allows us to do that,
essentially, because of the get instance method that we define right there. In any case, I hope
that explanation did do some justice to what a supplier interface is. If not, please go read the
Oracle docs. Honestly, I don't really find it too interesting. So I didn't go too deeply into it.
But it just seems like something Java introduced to allow functional programming.
But back to this, this bit is on still providing the Singleton Guarantee
when serializing classes. To maintain the Singleton Guarantee, declare all instance fields
transient. So what does transient mean? That means it won't be serialized and provide a
read-resolve method. This is the bit I said I'll get to a bit later, that bit right there.
This ensures that the Singleton property or the Singleton partners followed during
serialization. However, it's not really worth going too deeply into it. But sorry, you know what?
Before I go everywhere with this, I'll finish the rest of that sentence or that paragraph.
So I'll say to maintain the Singleton Guarantee, declare all instance fields transient
and provide a read-resolve method, which he points to in item 89. I shall get to that too.
Otherwise, each time a serialized instance is deserialized, a new instance will be created
leading, in the case of our example, to spurious Elvis sightings. So firstly, that idea of
read-resolve method, there's a whole chapter in the book on serialization, serialization.
Why do I find it hard to pronounce it with serialization?
When item 89, which is why I said it's not worth spending too much time on this because
Joshua Block, in fact, says, don't use read-resolve methods. In item 89, he states,
for instance control, so that's what we're doing here. We're practicing instance control,
instance control, prefer enum types to read-resolve. So we're going to get to enum types next. Therefore,
it's not really worth going too deeply into what this read-resolve method does. But
just in general, because it always returns this single instance we defined here,
it enforces singleton once again, but this time especially during serialization. Serialization.
Can't pronounce that, boy. And according to this definition by Michael Mayers, I've left a link to
that. It's a blog post in the description too. Read-resolve is used for replacing the object
object read from the stream. What can I read today? The only use I've ever seen for this
is enforcing singleton. Oh, sorry. This was from, in fact, a Stack Overflow answer,
not a blog post. But nevertheless, I shall leave a link to all of that down below in the description.
When an object is read, replace it with the singleton instance. So when this object is read,
it's going to replace it with this instance. This ensures that nobody can create
another instance by serializing and deserializing the singleton. However, it makes no sense to go
too deeply into read-resolve because technically or theoretically, as per the sagacious advice of
Joshua Block, we shouldn't even be using this method. We should be using the third method,
technique or the third way to enforce singleton property, which is with a enum type, not an
enum type using a single enum. I don't know why I said enum type. Makes no sense. This is by far
the simplest way. It's, I think, two lines of code if I'm not mistaken. So let me open it up.
It is, in fact, yes, really, I don't even know if you can see this is more like a member variable,
but it's one line of code. This is the simplest way to enforce singleton. Look at that. Just
two lines of code, really. One, two. I don't know. I don't want to start a debate here. What's
wrong with me? And really, all we're doing is storing that instance and it's a factor that it's
enum. We get most of these things we were trying to explicitly declare in the source code by virtue
of it being an enum. So, yeah, it provides serialization for free and, by default, won't be
able to instantiate multiple times because they're static and final, effectively. In Java,
every enum is implicitly a subclass of the enum class. So it can't be used if singleton needs
to extend a superclass. Oh, yes, this is an important point. He gets this in the end of
the paragraph. I shall, I shall, the really only disadvantage of using an enum to, I wouldn't even
say disadvantage. More of something to be wary of when using an enum is this last bit, which I
shall touch on a bit, which I shall touch on in a bit. My constant struggle to talk.
The best approach, this approach may feel a bit unnatural. This is what Joshua Block states. So,
yeah, I mean, I don't know if, in my few years of programming, I haven't really used an enum for
much other than as being a container for holding constants. So it does feel a bit unnatural. But
a single element enum type is often the best way to implement a singleton. And then he states,
this is the bit I still touch on, note that you can't use this approach if your singleton must
extend a superclass other than enum. Though you can declare an enum to implement interfaces,
of course, because in Java, we can't extend multiple classes because by default, any enum
will is already extending the enum superclass. Let's say Elvis had to extend a class called human
that wouldn't be allowed because if we use enum, however, we could probably get through that
through interfaces. So not really a big deal. That was a much shorter video. It was a much
shorter item too. And that's it. That's item number three. That's so essentially the idea is
unless we have to extend a superclass, the singleton, then just use enums to
enforce singleton property. And we also did discuss initially some of the advantages of
using a singleton. On that note, I shall thank you for letting me again, go about these things
like a drunken sailor and get lost sometimes in my own musings. It is really interesting though.
It is quite interesting how, as I said many times already, how all these items are interrelated.
Can't like the Bible. The next item, item number four, which I'm hoping to cover soon, which again
is a shorter item. It's probably the shortest item in this book is enforce non instantiability
with a private constructor. We've sort of already done that. We've already sort of covered
de facto covered that item in this item because all the examples we used did have private constructors.
But it's worth, when I say there's an example, this one right here. But of course,
as Joshua Bloch has identified, it's worth going into detail as to why we need to enforce
non instantiability. Saying that once again, thanks for watching. I'll see you in the next one. Cheers.
