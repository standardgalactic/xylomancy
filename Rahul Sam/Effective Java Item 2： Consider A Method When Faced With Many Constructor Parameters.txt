Hey everyone, welcome to this second episode of the video series that I've very
Incipitly and uncreatively called textbook to code where I take software engineering and computer science principles from textbooks and
Convert them to code and expound on them and try to make sense of them in as much detail as I can manage
and the book I've picked for this well, I guess for the start of this series is
Effective Java by Joshua Block certainly the best programming book I've read so far and the books got I believe
90 yes 90 items and we're still on item 2
So I'm sure it's gonna take me a long time to get through the whole book
but that's what's exciting about this because I I feel like
One item leads to another item and that item leads to another item and that'll point to some design pattern
that'll point to some concept in Java or you know computer science in general
and I find that really interesting and
Really, I hope a lot of a lot of programming books and especially well written the way this book is written
By Joshua Block saying that though as per usual as I did do in the previous episode
I want to make a few caveats or have a like a bit of a proviso
So if you did watch the previous episode you can skip this bit
Because I'll pretty much be repeating the same thing for any new viewers
Uh, the first point of course is this is not a tutorial. So unlike many
Programming videos on youtube. I certainly don't want this to be a tutorial. I'm not a teacher
definitely not an expert
and I'm not trying to
Tell you how something is done really what I'm doing is
Collectively trying to make sense of certain concepts in this book
And trying to understand them it really in many ways is a selfish pursuit in that sense
Because I'm not trying to teach anyone. I'm just trying to make sense of it and you know along the way if you get value from it
Fantastic, that's at least what I hope frankly. I like to think of it as blindly leading the blind
Uh, but in this case really I'm not leading but I guess because you're watching this video in some sense
I am but uh, I am as blind and ignorant as you are
Uh, it's this is simply a
Exploratory disposition. That's it. Uh, and I think what I want this to be is is similar to what
We would do what I mean
We if you've done a computer science or software engineering degree in a university tutorial where you get together
There is a tutorial of course
but generally what happens is you get together with your mates with your
The other students and try to make sense of some assignment problem or some programming problem
And I think there's great learning that happens in that kind of
Collaborative collective thinking
Needless to say but I have to say it because this is the proviso offer all I will inevitably make mistakes
So please point them out. Leave them down in the comment section below
Of course for my own learning, but especially because I don't want to mislead anyone
And I think that's why in every single video even though it's going to get a bit repetitive
I am gonna have this bit where I do say, please don't think of this as a tutorial
I don't think I'm in a place to teach anyone programming at the moment
And on the note of programming, of course, this is a programming video
So, uh, it only makes sense to have all the code that I use on get up
Not only my code, but I'll also link
All the code that Joshua block has
Published on his personal get up repository for item two of effective Java
So on that note without further ado, let's get started
The second item states consider a builder method when faced with many constructor parameters
Personally, I found it much easier to understand this item than the previous one. It made a lot more sense
Probably because I have faced this problem
Day to day working in my team
Where there's mostly a utility class with a whole bunch of parameters for constructors
And it can be a real pain to manage and even using it as a client can be
Quite chaotic at times and quite a mess
so
he states
Static factories and constructors share a limitation
They do not scale well to a large number of optional parameters
So of course, I don't think I need to go into detail on what optional parameters mean
The term itself is self-explanatory
And over here though, this example kind of demonstrates that even though what we've done here is used the
telescope constructor pattern which
Joshua block says is a bad idea that it probably shouldn't be used even though
This is what traditionally programmers have used and in fact in the codebith that I'm working on right now in my current company
I believe this is what we've done. Oh
Well, I think we did this in a previous version, but we did change it up. So that's that's really good
And this is what this really does is as you can see here. I have two instances of the nutrition facts class, which is
This class here. It's got a bunch of privately defined
member variables and
This is the bit that sort of implements the telescope constructor, but I'll get to that a bit later the idea being
Both these instances Koch and Bundaberg
They've got different number of parameters have been passed into it because of course some optional. In fact, I think most optional
And depending on how you want to build it how you want to construct your object. You can define it
So now let's go to the bit where Joshua block says
Traditionally, as I did say before programmers have used the telescoping constructor pattern
In which you provide a constructor with only the required parameters
Another with a single optional parameter
a third with two optional parameters and so on
culminating in a constructor with all the optional parameters
So these two objects Koch and Bundaberg which both are instances of the nutrition facts class
The Koch object is pretty much using all the parameters
It's using this constructor here. Sorry this constructor here
And then the Bundaberg object, which is just using only three optional parameters. We've said which uses
this constructor here
Regardless, you probably can see what I'm doing now. We've passed a lot of zeros. It's unnecessary and even on the client side
Or on the client that's using this constructor has just passed zeros sometimes when for the value fat
Uh, and you know, it's not that complicated if you look at the code base, you can see that it's firstly
It's very verbose just just the constructors itself in the beginning of the class
You got God knows how many I mean here. There are only six parameters, but imagine if it's a class with 20 30
member variables or whatever you want to you want to set
when you know constructing that class
Constructing that object. Sorry
And as Joshua block says in short the telescoping constructor pattern works
Of course it does
But it is hard to write client code when there are many parameters and
Harder still to read
He also states and this is kind of funny. This is uh, I recently tweeted
That I like to call myself a programmer, but IntelliJ
writes most of my code for me
So I don't really do anything anymore
Then just using autofill and IntelliJ kind of taking care of everything else
The idea that the modern ideas are so good that this problem doesn't really apply anymore
I think because he says here if the client accidentally accidentally
Reverses two such parameters the compiler won't complain, but the program will misbehave at runtime
So what he means here is you probably can see, uh, let's take this second object
Bundaberg
Bundabug object
And what we need to pass as the first parameter is the serving size and then it'll it'll get set properly
in the class
member
And then there's servings and calories. So let's say
You said the serving size is two and servings as 360 that is wrong, but the compiler won't complain
The error will only come up at runtime
Maybe the q8 team will pick it up or some unit test. Who knows?
But
Of course with i with IntelliJ or most modern ideas that problem won't be an issue because
When the client is using that constructor it does exactly say what you're supposed to pass. So it's pretty clear and explicit
But Rick nevertheless, uh, that's one downside of it and we shouldn't always rely on ideas
The negative of course is the problem is scaling and also just passing these useless zeros into constructors
So and it's fair to say arguably, uh, the telescope constructor is an anti pattern
Where our class has multiple constructors with different signatures
Varying parameters in particular and I believe if you do just google the word
Constructor pattern, there'll be a lot of blog posts regarding why it is an anti pattern
Look at this just the the top searches are regarding alternatives to the telescope constructor pattern it being an anti pattern whatnot
Um, and even this video here saying avoid telescope telescoping constructors with build a pattern
Make sense. Uh, probably a lot of these blog posts were inspired by Joshua Bloke himself
That moves us to something probably a bit better than the telescope constructor pattern
The java beans pattern in this pattern
you call a
Parameterless constructor to create the object and then call setter methods to set each required parameter
And each optional parameter of interest. So let's see what that means
But before we get to that, I just realized I should expound on these two points. It'll just make things a bit more easier. Um, now
Java beans, what is java beans? We we hear this term everywhere if you're a java developer
All that is is a standard
It gives a class an empty constructor with getters and setters. Um,
A public sorry a public argument list argument list
Constructor and it's also serializable
Even though this is what a java beans is the java beans pattern still isn't the most apt
pattern to use
when faced with many constructors and as Joshua Bloke him
I'm going to start calling him JB. It's just easier because Joshua Bloke is a mouthful
So as JB himself states the java beans pattern has serious disadvantages
So I did read out the definition of what this pattern is before
This is really much easier to even understand conceptually than the telescoping constructor pattern
Clearly what you're doing here. So we've got another class. We've got a class called nutrition facts JB
Um, why do I call it JB?
I don't know why it's oh, of course because it's java beans
I I wanted to call it JB just to differentiate it, I guess
And we've declared or we've defined the empty public constructor here
And that allows us to create a coca-cola object
Of this from this class and simply using the setters
I've set all the values. So whatever the members are serving size
calories whatnot
And yeah, it's as simple as that. That's what it does. However, as I said before this is not a good pattern to use
When one is given a class with a lot of
constructor parameters
Firstly, of course, you know, practically speaking as you can say it's a bit verbose
It's it's it's just to create this object
You got to do all these things and use setters and set the values kind of annoying
Uh, and the second one and this is an interesting one. I'm going to first read out the paragraph and explain what JB means by this
The class does not have the option of enforcing consistency
Merely by checking the validity of the constructor parameters
Attempting to use an object when it's in an inconsistent state may cause failures that are far removed from the code containing the bug
And hence difficult to debug
A related disadvantage is that java beans pattern
precludes the possibility of making a class immutable and requires added effort on the part of the programmer to ensure threat safety
What that really means is this it's
and i'm again, I
There are all these terms some of them of these terms are a big technical
and
But i'm i'm quite sure, you know, i'm not a senior java and programmer who's been coding for years and years
Well, i've only really been coding for a couple two or three years
But i've i've still seen things like this
day to day at work
so
over here you
initially construct the
Coca-Cola object with the empty construct empty constructor
And then you say you set the value using a setup set serving whatever and then you say set servings, whatever set calories, whatever
And then let's say while
This object is in the process of being constructed. It's it's in a certain state
Someone decides to do some computation here using this object
So decides to do some computation
using
This object Coca-Cola
Now this can give us a lot of problems because the class
doesn't
Mandate a for the object to have a consistent state when it's being created
Because let's say
When this computation takes place these two values set sodium and set carbohydrate are necessary
And most of these errors will only be called runtime
It cannot be called compile time clearly it cannot be called compile time because if I just go and let's say do something here
I'm just gonna print this out. I know it's really not a computation
But it doesn't throw any errors here the id doesn't indicate that oh this this this object is in an inconsistent state
And this is a in my opinion when I did
Understand what this is. I think it can be a serious disadvantage, especially in large enterprise
Level systems, which is mostly what chava is used for, you know, in like distributed systems
And he has just to reiterate the point Jebi makes
Attempting to use an object when it's in an inconsistent state. So
Let's just assume for all intents and purposes
At this level this critical object is in an inconsistent state
We don't want it to be in that state and be used by a client
Make us failures that are far removed from the code containing the bug and hence difficult to debug
I don't make sense because they're runtime errors and we all know their runtime errors are quite difficult
to debug
And in my notes, I've stated here with a bit more brevity compared to the long-winded way I explained it
Splitting the construction to multiple parts may put the java being in an inconsistent state
So clearly the construction is being split into multiple parts and there's a high possibility
That it could be in such an inconsistent state
Which is why
Jebi proposes
Using the builder pattern
Now what is the builder pattern? So let's try to understand firstly. There's a quote that I've got here by
But the great book from from the great book design patterns by the gang of four. I haven't read that book yet
I I own a copy. I refer to it, but I'm I'm really hoping to do a similar video with that book too
Probably I'll probably get I'll probably do this but first the head first design patterns
And then I'll see if it's worth doing one of that book too. I'm just gonna do it. I'm just gonna do it
Because I want to because I'm a I'm a fan
I'm a I'm a connoisseur of great programming books. Um
So here's where the gang of four states
What the builder pattern does is separate the construction of a complex object
From its representation so that the same construction process can create different representations
Okay, what in the world does that mean? Let's take a look at another way the nutrition facts class
Was constructed but in this case
Using the builder pattern on the client side using the builder pattern on the nutrition facts class
Constructing the objects using that pattern
It's done beautifully. It helps us to circumvent some of the disadvantages that we discussed earlier with the previous patterns
But saying that though
Of course, it's a bit harder to understand as to how it works. The first thing to keep in mind is
There's an inner public static class called builder
So the separate builder class in the nutrition facts class and when we do construct this object
There's no way of constructing it without using this builder class the the inner builder class
Let's run go through this line by line. I think that's the best way to understand this when we do construct this object
We don't directly
Use the nutrition facts class. We we instead
Make the desired object using this inner builder class
And of course because it's static you could just access it as as it belongs to the nutrition facts class itself
It could access it directly. I mean so simply put the way the client
Really constructs this object is using the builder object and the builder object has some setup methods
How does that work? So let's take a look at this
it's got
nutrition facts our builder and of course
There are some parameters that are mandatory you you need them to even construct this object and those the those two are in
In this the builder classes serving size and servings
So that would be defined here
When we do the constructor for the builder class
Have these two values as being mandatory and afterwards, of course, it allows us to
Simply set
The other values as per our requirements as for the client's requirements
So in the for coca-cola, we've set the calories the calories are right here
And then we've set
Oh, there's another thing I want to add here
Do we get to that a bit later?
Oh, sorry. There's a bit here about invalid parameters. We shall get to that a bit later
So we are adding the calories and the way we're adding the sodium
carbohydrate, whatever
And those stuff are being passed on to the private construction
constructor construction Jesus the private constructor of the nutrition facts class
And it's been accessed through this builder object
Then afterwards when the the client is done using
Or the client is done constructing the coca-cola object
You simply use the build method and build the object
quite straightforward if you think about it and even
Practically or conceptually this makes a lot of no sense. And yeah, I should mention this the client calls a
Parameterless build method, which I did mention
To generate the object which is typically immutable and now I want to get to that bit that I said I'll discuss a bit later
Previously, it's this idea about having valid parameters. Here's a good example of this in the builder class
So the only rule for the builder class is to really build objects
therefore in all these methods one could do
checks for invalid parameters and throw
Illegal argument exceptions if for instance when building this class. Sorry when building this object someone passes a
Parameter of a over an argument, which is of illegal type or if it's of
If illegal quality
I'm just looking for the word. Yeah, doesn't matter
Sometimes sorry, it's been a long day my mind and my mind brains everywhere
Here's here's an example of this
so
Calories of course anything can't really have negative calories at least that's what we're told
And I think that's true. So over here. I've initially I've passed the calories to be 100 when constructing this object and I'm doing a check
On the calories method, which is here in this method
whether the value is
Well, the value should be greater than zero for me to set it into the calories
member variable
If not, I'll throw a illegal argument exception
So if I go
And do minus eight
Uh, and then if I try to run it
There we go at runtime I'll say, you know, it's negative. You can't have negative calories. What are you crazy? What are you trying to
sell one of those
Fit teas on instagram
I'm just I'm trying to make a joke and be funny, but that was just a terrible joke
pathetic
So joshu block says
To detect invalid parameters as soon as possible
Check parameter validity in the builders constructor constructor and methods. So that's what I've done here pretty much
Check invariance involving multiple parameters. So this is again. I'm checking this parameter here
Do the checks on object fields after copying parameters from the builder if a check fails
Throw an illegal argument exception whose detail message indicates which parameter is invalid
That's that's actually a good point because it even tells us specifically here where it's failing. So we know
Debugging is much easier that that that's a best way of putting it because if you do recall with the
previous two
patterns a big issue is
Even if something fails on runtime the debugging can be a lot more harder and much more deeply in the code that is
Not going to make programming easy and of course if I didn't already state before the code is a lot more neater
It looks prettier
You could use method chaining keeps the code concise and very importantly. We don't run into that problem of having
objects
in
inconsistent states like we would do with the java beans pattern
Because that isn't a lot of it here because you need to chain all the methods when constructing the object
And certainly method chaining is something we see a lot in different jdk libraries
It's most probably because they've used the builder pattern
Which is why for us using them. It's a lot more easier
And then jb states the builder pattern is well suited to class hierarchies
Use a parallel hierarchy of builders each nested in the corresponding class
Abstract classes can have abstract builders
Concrete classes can have concrete builders. This was a bit hard for me to get it
I wouldn't say it was hard for me to get but there's one certain part which I'll get to a bit later
involving generics
Which I had to really struggle to get my head around it
But once again though it does once you once it does make sense once it once it clicks
You can see the beauty of the builder pattern in it and that's the best part about it
So let's try to understand what he means by the builder pattern is well suited to class hierarchies
Firstly, I'll simply define or explain this class hierarchy I've built here
We have a simple abstract pizza class which I've defined here as you can see
And then we have two subclasses that inherits this class. We have calzone
Which extends which is a concrete class that extends the abstract pizza class
And then we have we have sorry new york pizza, which is also another concrete class which extends the
abstract pizza class and afterwards if you do go to the client you could see
How it's been implemented and again, I know this is very high level, but I'll go into the details soon
Similar pattern if you do run it, you'll see both these objects being have been created and
I'm getting the superclass. It's both got the same pizza superclass make sense similar pattern
ending with the build method
So firstly, let's take a look at the pizza class the pizza abstract class and see what's going on here
In the similar way because we're using the builder pattern, we have another inner static builder class
But you probably see it's a bit more different
We need to allow something called a simulated self type now
This was the bit that took me a bit to grok and make sense of because it involves using generics
And it's doing something called a simulated self type
What what does that mean?
Let me see if I could explain it. I would say I got it, but
I think I'm I'm still struggling to articulate it clearly
And and let me let me let me give a shot
So I didn't get what a simulated self type was from effective java. I couldn't understand it
And then I found this great blog post by
This gentleman's name is Nikolai Palok
Fantastic article. It was written in 2016 pretty much goes into everything you need to know about
The idea of Java not having a a self method or it doesn't allow us
Self and this those two keywords are a bit different. We will I'll I'll get you that too
And because Java doesn't have that we sort of have to simulate it
And that's what Joshua Block is doing in this example, but also what one would generally do to get a self type
And it's important to understand. Oh if we didn't do the simulated self type
We may have to use casting and that is not going to work
Because it's very important to understand that for the builder pattern to work with the
Method chaining, which I have where well, where's an example?
Nope
Always when you need an exercise. No, that's not the exercise. That's telescope construct. Yeah
For this method chaining to happen the proper type or the proper subtype
Have has to be passed. Uh, sorry has to be returned
And in the hierarchical, this is a bad example. I should be using the hierarchical builders one
Yes, over here in the class hierarchies, the proper subtype has to be returned
For this method chaining to work. So what a simulated self type does
is these subclasses so
In this instance, it's new york pizza and calzone
They can get an instance of their own type instead of the parent and and again
I know i'm sort of beating on a dead horse here
But it's important to understand that for this method method chaining to work
They have to get a instance
Of their own type not the parent not the abstract class pizza
New york pizza has to get an instance of new york pizza or of of type of subtype
The new york pizza and before I do a deep dive in the code
I want to read these excerpts from nicolai palogues a blog post. Uh, the reason being again, I think it's important to first
conceptually understand
What a simulated self type is what's the reason for it and its justifications, let's say so
Nicolai states a self type refers to the type on which a method is called
more formally the receiver
But java doesn't have this feature. So
In here the self type would be
Why can't I what do I keep losing that that that class or that bit of code?
Bloody annoying
Where is it?
There we go, you son of a bitch
Um, so here this in the method chaining
Always method is called more formally call the receiver
a self type so
The receiver should get new york pizza type, but java unfortunately doesn't have this particular feature of a self type
If a soft type
Is used in an inherited method
It represents a different type in each class that declares or inherits that method
Namely that specific class
No matter whether it declared or inherited the method
casually speaking it is the compile time equivalent of this dot get class or the type of this
I think
Well, I was gonna say I think that's quite straightforward, but it probably will be quite straightforward once we
Look into the code base. Let's start off with the abstract class
It kind of makes sense because the subclasses are going to inherit this. So we have this pizza constructor method here
Oh, I want to state one thing. Um
I will not go into detail on this bit
But because we will be discussing it in a future video on an item 50 to be
Uh specific, but the idea is that over here in line number 33. We are making what one would call a defensive copy
this is just to ensure that
The encapsulation of this class is in broken that that fundamental
OOP principle isn't infringed upon. We stick to our principles. So as OOP programmers
So what this does is when the native class changes immutable objects feel
A defensive copy should be made anytime it's passed into a constructor like this or out of the class
When the object of this class will be created this topics member is what's going to change
It's going to be immutable
Because in the add toppings method it's it's being changed essentially
And and that's why we create this defensive copy
again, I'm not going to go into detail firstly because
I think this is a bad example to understand it. It even took me a while. I had to go through some blog posts
But also because we will be discussing that in the future and when we do get to item 50
Which probably is going to be next year. I shall leave a link to that video in the description too
In any case, I don't want to go off on our tangent because I want to focus on the
Simulated self type. So pizza dot builder
Is a generic type that would be
Here when we do
construct the builder object
Uh, it's a generic type with a recursive type parameter. That's a confusing bit because well, it's called a
Recursive type parameter because as you can see pizza dot builder is extending the builder with its own
generic type parameter
And and I've even left a comment here saying that this the the generic type parameter here is necessary for the chaining to work
and
Same comment I've left here. It allows to
simulate the self type
And just a box says
This alone with the abstract self method that would be this
And this will be overridden by the subclasses
Because it's in fact, this is probably a bit more easy to understand because it's called self sort of makes sense
This is what gives the subclass an instance of their own type instead of the parent instead of pizza. So
Uh, new york pizza would get an instance of their own type instead of the pizza type
However in combination with this bit here the recursive
Uh, sorry the simulated
Man the recursive self parameter. This is really annoying because it's it's it's really how to get your head around it
and this
abstract self method
It allows us
For method chaining to work and there's a key point without the need for casts
You probably remember I showed an example before which was this so let's assume this extends some
Superclass called super person
And here when this does return it
It shouldn't it if you don't put the cast it will return
Uh, a type of super person not person and which is why the cast is required here. However in our case
When we're using the build a pattern because of this abstract self method, we don't have to do that
We don't have to use the casts and I shall show you now in a subclass. So let's use new york pizza where this happens firstly
We we pass the proper subtype of this class to the generic parameter
That's for sure
And then we have this bit here where the overriding takes place
Of the self method where it returns an instance of the subclass of new york pizza and not pizza
And in that way as we do use the
The method chaining and finally the build method returns the correct subclass
It will not reach it's clearly over here. It's saying return new new york pizza of this instance
So this is what allows it all to beautifully come together when we do use it
Over here with the method chain
I don't know
How well of a job I did at explaining that it is a difficult concept to grasp especially the
the recursive type parameter I
I still I'm struggling to understand that really from if I'm being honest, but
um
Maybe in the future videos I should consider
Coming up with
Married examples not just this particular example
But trying to even create because this this this some of this code I got from joshu blocks get up repository
Uh, well most of it in fact, so I should probably try and create some examples on my own
Which will make it easy for me to
Expand on
in any case, um
JB states this technique. It's sort of funny. Sometimes I refer to him as JB. Sometimes that's joshu block
What am I doing the perpetual contradictions? I'm just gonna stick to joshu block. I changed my mind jb
joshu block sounds better. It's it's it's got a beautiful name. What can I say?
um
This technique wherein a subclass method is declared to return a subtype of the return type declared in the superclass
Is known as covariant return typing?
It allows clients to use their builders without the need for casting covariant return typing
To be honest, isn't that hard to understand?
Um, and what we're really doing here is covariant covariant return typing by getting
uh
A subtype of the return type
So if you go to simply if you go here, I have two classes. I have the class. I created two classes
Oh, also, uh, thanks to this stack overflow user who helped me understand this
The person's name is the person also gets into something called contra variants
But we shall not get into that because it's not that apt to java. Uh, however, it's just an interesting engineering
uh, opsof opsof programming
concept to
understand
This user hard coded thanks to this use on stack overflow. I shall leave a
Link to the answer down below in the comment section. Sorry in the description
um, so
Here's simply what covariant
um
What was it covariant return
Typing is we have a class called author. Uh, and this author
Has this method. So it's got a private member field called name and then of of type object
And then you have another method called get author name
Simple as that and then we have another subclass. Uh, distafsky my favorite author who extends the
Superclass author. Uh, and here we're setting
Another private member variable with the name fielder distafsky
And here we are returning a subtype
because string is a
Subtype of object of the object class because think about it. This is this is covariance because
While they just return a subclass of the return type, which is again object and string as I
Describe before it still fulfills the contract of author dot get author name. This contract here
is
Fulfilled
This is what covariance is and the same concept of course applies in the hierarchical classes
With the builder pattern because this returns a subtype of
Sorry, new york pizza. Let's say that class returns a subtype
It is a subtype of
Pizza and it does fulfill that contract down the the method chaining
If that makes sense and to conclude just your block states
the minor advantage of builders over constructors is that
Builders can have multiple
Parameters because each parameter is specified in its own method make sense. Um, I think new york pizza
Oh pizza test probably isn't the best example
But a good example would be
The nutrition facts class
We can have as many constructors as we want because all these constructors get their own method and he continues alternatively
Builders can aggregate the parameters passed into multiple calls to a method in a single field
As demonstrated in the at toppings method earlier. So this at toppings method as you can see
We're passing multiple parameters
Into the at toppings method or more accurately making multiple calls and this
Builder class is aggregating it continues a single builder can be used repeatedly to build multiple objects, of course. So
Examples here pizza calzone
Different objects being constructed in different ways using the same builder class
The parameters of the builder can be tweaked between invocations of the build method to vary the objects that are created
These parameters can be changed as we require
depending on how we write
The different methods in the builder class a builder can fill in some fields automatically
Upon object creation
Such as serial number that increases each time an object is created
This is a very astute point. Uh, I think a good example of that would be similar to the idea of
You know checking what the proper arguments past time doing type checks and different
Validations on a method because these are methods a lot can be done within the builder class
So if I try to go back to the previous example
where I was checking for the
proper argument
The way we've done this check in calories. We could even have
Something which automatically adds a certain value or
Changes an object
automatically depending on the way it's called
And it could all be done simply because it's a method and of course like all great programming and engineering books
Ineffective Java Joshua bloke does discuss the trade-offs. He explicitly states the
Disadvantages of using the build a pattern for this instance
And one of them is something I already discussed. It's certainly a bit hard to understand
One has to get their head around it, especially with the simulated self typing and whatnot
and understanding how the inner
Inner class works within the bigger class
Um, and and that can be a bit more verbose and certainly
a bit harder to grasp
initially
and then he also says that
if you
Start out with obsolete constructors and static factories and then, you know, move the code base to a builder pattern
Which I think is what happens most of the time
So this second point, you know, the first point is, you know, it's a matter of practice the more you use it
I believe the more one will become
more
Attuned to using the builder pattern
but the second one is
definitely a trade-off worth considering because
Generally what would happen is we would not use a builder pattern in a large code base
And then we would want to use it as the number of parameters increases
And then making that shift can be quite hard
So if it's a greenfield project and if you're starting from scratch always better to start with the builder pattern
even if
One has, you know, a small number of parameters for a certain class
That's it. That is the second item of effective java by Joshua block
Uh, I sincerely do hope that you got some kind of value out of this
And I I really am trying to get better at making these videos and really expounding on these points
It is a bit hard because firstly, I don't think
Programming and
Computational thinking naturally comes to me. I need to really struggle with the problem a lot for it to make sense
And I think that's most people really so this isn't like false modesty or whatever. I think it's it's it's normal for most people
Uh, and I did realize for instance the part that I was going through the simulated self type
That was a bit hard to understand
But on that note, I want to thank you for watching this video
Next item is going to be and I have already started
Riding the script for it and you know
Putting putting the code base together
The item three is enforced a singleton property with a private constructor or an enum type
This item is a bit easier to understand than the previous two. I can assure you that
In any case, thank you for watching. Uh, I do appreciate it. Uh, I appreciate you allowing me to ramble and go on
It's good. Cheers. See you in the next one
