Hey everyone, welcome to yet another episode of my video series on, as I fixed this microphone,
on Joshua Bloch's Effective Java. This is a video series where I expound on the concepts that he
has delineated in this book. Without further ado, let's get started with the proviso. I'm
trying to keep these things quick because I do repeat this in every single video,
just for some due diligence, let's say. And the caveats are, this is not a tutorial,
I am not a teacher, nor an expert. I certainly am not an expert in any of this. So while I do
try my best to be as accurate as possible, obviously, I certainly will make mistakes. So please
point them out. And if it's something significant, I'll even rectify the error in the comment section
down below. I'd like to think of this as the blind, leading the blind. I am, as I always say,
as blind, or perhaps even more blind than you are. I'm, you know, really quite new to the Java world,
given that I've even though I've been programming with Java for a couple of years, it's still
very mature language and a mature community and ecosystem. So consider this to be a
exploratory disquisition. The analogy that I've been using the past couple of videos is that it's
like a university tutorial, except I'm not a tutor. We're just students kind of working through a
problem together. Of course, though, let's not pretend that it's a one way conversation because
I'm doing all the talking. Regardless, I have been corrected in past videos and I have added those
in the comment section down below. Depending on how this goes, maybe I'll even create a,
I don't know, a discord chat or a Slack, not a Slack, that's a bit too much, perhaps like a discord
chat or whatever. Okay, already this is too long. The code for this or this, given it's a
programming series, of course, it's going to be on GitHub. For item 13.2, all the code is going
to be on GitHub. Even though for this item, it's going to be two videos because it's quite a big
item, but the code in the repository will be just under one directory. Alrighty, let's get started
with item 13, which states override clone judiciously. And since we've been on chapter three, this
item itself is a part of methods common to all objects. So for starters, the very first two
sentences of the item states, the clonable interface was intended as a mixing interface
for classes to advertise that they permit cloning. Unfortunately, it fails to serve this purpose.
Its primary flaw is that it lacks a clone method and objects clone method is protected. So when
when he means and objects clone method is protected, he's talking about the object superclass in
Java. So firstly, in what I read, there was some keywords. So let's get some basic theory out of
the way. What is the cloneable interface? According to Oracle docs, a class implements the cloneable
interface to indicate to the object dot clone. So the clone method in the object superclass, as I
said, method that it is legal for that method to make a field for field copy of instances of that
class. And then Ganesh Chaudhary of GeeksforGeeks says, the Java line cloneable interface is a
marker interface. What is a marker interface? It's really simply means it's an interface that's
primarily to add metadata to a class. So as the name suggests, it's it marks the class, it indicates
to the compiler and even the programmer that this class is of a certain sort, certain type, with
this metadata. He continues, it was introduced in JDK 1.0, there's a method clone in the object
class. Cloneable interface is implemented by a class to make object dot clone method valid,
thereby making a field for field copy. Again, as the name suggests, what that simply means is
when a cloning takes place, so we have class with an with an object, and there's object A that's
cloned to let's say object B. When the cloning happens, it's a field, all the fields in that
class, string int, whatever, that'd be a field for field copy taking place when the cloning happens.
That's why it's called a field for field copy, obviously. This interface allows the implementing
class to have its objects to be cloned instead of using a new operator. So simply a cloneable
interface indicates that a class in hand supports cloning. Now, the other keyword in what I read
before from the book was the word mixing. Mixing for me is quite interesting, in fact, because I
kind of shifted from the Java world recently with my new job to the Ruby world or the Ruby and the
Rails world. And mixings are quite common, or the mix and pattern is quite common in the Ruby world,
even though I didn't even come across the word when I was programming in Java up in my job.
But in a very high level, according to Wikipedia, before we get to the mix and interface,
let's talk about what mixings are. So Wikipedia says in object-oriented programming languages,
a mixing is a class that contains methods for use by other classes without having to be
the parent class of those other classes. Sorry. Mixings are sometimes described as being included
rather than inherited. So this is a concept we're very common in Ruby. We have sort of like modules
and you could include modules and classes. So that allows whatever methods in that module to be
included in another separate class, let's say. But in the context of Java, we don't really do this kind
of including modules and whatnot. What they simply do is they allow composite interfaces,
mixings allow composite interfaces, allowing programmers to build modular and extensible
software systems, which is why here again, it said here, the cloning interface was intended as a
mix and interface for classes to advertise that they permit cloning. Okay, a bit of a demo to
understand the concept of mixin. Now, given Java doesn't have a mechanism to explicitly understand
what mixins are, like Ruby, as I said, we can't need to play around a little bit with multiple
classes to get the idea of what a mixin is. So in this demo, what we have initially at first is a
initially at first, gosh, what we have here is a an interface called mix mixin interface,
where there are two methods defined as a do something and do something else to avoid methods.
And then we have a mixin class that implements that this interface and then gives a solid
implementation of these methods. So we have a mixin class and then and we have another mixin
class. This is a bit confusing, I should have called it like class A and class B, but you get
there are two classes that implements the mixin interface and they have their own
kinds of implementations for these methods. And then we have a composite class also that implements
the mixin interface. But this class is what does the composition of the other two classes or what
those two methods can do via the mixin interface. So what that means is this composite class sort of
acts as a pseudo module in Ruby. I'm sorry to incorporate Ruby into this, because if you're
not familiar with Ruby, you have no idea what I'm talking about. But this class would be,
yeah, it's what does the, it combines the functionality from the other two classes
into this single class, because it provides different implementations of the do something
and do something else methods in mixin. And then because it provides separate implementation of
the two methods, it can delegate it to the corresponding methods of the mixin interface,
which is what I said before. But see how this works. Let's just look at the demo and see how
a client would use this composite class to allow this composition. So what this composite class
loves us is to combine the functionality of two classes, but then also simultaneously,
the individual mixing classes can also be used independently as well. So we have
mixin one, mixin two, which is firstly of the both of mixin interface type, but one is the mixin
class, the other one is another mixin class, and we have the composite classes composite one and
composite two. Over, as you can see in the constructor, oh, sorry, I didn't mention that bit. So
what allows that composition to take place is really the constructor where we have the
private final instance of the mixin interface. And then what we pass into this can be either
mixin class or another mixin class, so two different classes. And that's what we're doing
in the composition where passing mixin one and then mixin two. And then in the composite,
we can do something, do something else. And then depending on what we pass
into the constructor, the corresponding method will be invoked on the corresponding class.
So if I run this, you'll see it does firstly from mixin class, do something to something else,
and then it'll run another mixin class, do something differently, do something else
differently. That's the basic idea of what a mixin interface does. Probably a bad example,
really, because clearly, it's not explicit in Java, but at a high level, again, it allows
composite interfaces. And then of course, I mentioned the clone method, needless to say,
that's probably one of the most important methods in this item. The clone method,
of course, is a built-in method in Java that allows objects to create a copy of themselves.
A few things to keep in mind, the clone method is protected, and this potentially becomes a
problem in the future. The fact that, I mean, in the future, we'll discuss in the future of
this item, we'll discuss it. The idea that the clone method is protective can be a bit annoying.
We'll discuss that later. But just to get a formal definition, which I really liked,
Chadji PT's definition. By the way, the reason that it becomes a problem,
potential can become a potential problem is because only subclasses can use this method
because it's protected. So again, a formal definition by Chadji PT, which I thought
was a good one. By default, the clone method performs a shallow copy of the object,
which means that only the object's fields are copied, but any object references,
any object reference by those fields are not cloned. So for this line here,
but any object's reference by those fields, perhaps the quintessential example would be an array.
An array would be a problem if a class has an array declared, because then a shallow copy
wouldn't work as there'll be two objects pointing to the same memory instance of that array,
and that can create corrupted states and cause a problem. Anyway, I'll continue,
and we'll get to that later too. If you want to perform a deep copy of the object,
where all the objects reference by the fields are also cloned,
you will need to override the clone method and implement your own cloning logic,
which is why most times this, the latter bit where we do override it does take place because
most classes will most most most classes, I can't talk because most times most use cases
a shallow copy will not suffice when we're properly cloning some cloning an object.
We need a deep copy. So to understand the problem, we need to look at it in a bipartite way in the
sense that the first part is that the objects, which is the superclass, the objects clone method
is protected, as I said it here. And the second problem is the cloneable interface is only a,
what's it what we use, a marker interface, as in it doesn't have any defined clone methods.
So one solution, keep in mind potential solution, is that we could invoke reflection in Java,
we could invoke the clone method with Java reflection. Now, just your block would not
suggest that given that Java reflection can be a bit tricky, it can leave a lot of objects in
corrupt state and cause problems in application on runtime. Also, it's primarily used by framework
builders. But simply, we've discussed Java reflection in many items before, what it allows
us to program is to dynamically inspect and manipulate objects, classes, interfaces at runtime.
So using reflections as the name suggests, in runtime, when objects are created and in memory,
you could reflect within the objects or introspect and then manipulate it and play around with it.
So a simple example or a simple demo, just to again, reiterate and demonstrate what reflection does
is this my class class, I got to get that naming classes, my class class, this class implements
cloneable. We have a private infield called value, we have a setup, sorry, we have a constructor,
let me have a setter, a getter, and afterwards in the implementation or the client using it,
firstly, this will not work. So if you look here, it's going to throw an error because
the clone method is protected. So you can't just go my object dot clone, because in the superclass
of my object, the clone method is protected. So that will not work. Therefore, what we got to do
is resort to using reflection. And obviously, in reflections, always use a try catch block,
because reflections have a high potential of throwing exceptions. And then if I run it,
that took a while for me to understand because I had to go through how the reflections work
and try to make sense of it once again, because I wrote this quite a while back,
which is probably another reason as to why unless you really need it, using Java reflections is not
a good idea, because there's a lot of unexpected things that can happen, let's say. So firstly,
I'm not going to override the clone method in my class. So we're going to try and use the clone
method in the object class. Now what happens then is I'm going to leave that bit commented out, but
comment it and comment out this bit here, which is trying to access the clone method of the super
class, which you can see here, I'm getting the clone method and I'm setting it as accessible.
And then when I run this, it should technically or theoretically give an error, because it can't
access that because it's a protected method. So the only way really to do it is to override it in
the subclass and then do it like this, which involves...
Now here you don't have to use reflections even though I've just used it, but that involves
accessing it via the subclass and then doing the cloning as such, which is going to happen here.
Now of course here again, as I said, you don't need to really do reflections,
but the point being, the overall point of all of this beam, and I'm probably going to edit out a bit
of the middle because I spent a long time going through this and then googling, trying to figure
out what I did wrong, is that because this pesky cloneable interface, this piece of shit
is not providing us with an implementation for the clone method, that makes things
unnecessarily complicated, which is why Joshua Block states,
so what does a cloneable do, given that it contains no method, it determines the behavior
of objects protected clone implementation. If a class implements cloneable, objects clone method
returns a field by field copy of the object, otherwise it throws clone not supported exception
as a lawn mower is making noise again. Now by the way, as we go on with this point, that latter
bit, throwing the clone not supported exception, that also becomes a pain point with this interface,
we'll discuss it in this item, and he continues, though the specification doesn't say it,
and this is an important point, in practice, a class implementing cloneable is expected
to provide a properly functioning public clone method. In order to achieve this, this class and
all of its superclasses must obey a complex, unenforceable, thinly documented protocol.
The resulting mechanism is fragile, dangerous, and extra linguistic, it creates objects without
calling a constructor, that really is what a clone method does, if you think about it,
for all intents and purposes. So this begs the question, how to implement a well-behaved clone
method? And before we get to the implementing strategy, a few caveats. Firstly, the cloneable
interface is an atypical interface, as interfaces aren't supposed to modify the behavior of a
superclass, but are blueprint for what a given class can do for its clients. So really, when you
implement the cloneable method in a class, let's say class A, it's kind of an interface for the
object class, for the superclass, which is atypical, and that again is a problem. And then also the,
I wouldn't say it's a problem, it's kind of an anti-pattern, it's something you
particularly shouldn't follow, but also the general contract for the object's clone method is weak.
This is the general contract defined in the Oracle docs, and you can see what it does. I'm not going
to go through it too facitiously, but essentially the idea is the clone takes place, and it creates
in return a copy of the pass object, pass to that method with a new memory location. Now, it is vaguely
similar to constructed chaining, a pattern, a design pattern, which allows to create less
duplicated code. But more than me explaining it, let's take a look at what constructed chaining
entails. If I open up the class customer, it's quite a straightforward pattern. You probably
have seen it in a lot of code in the Java world. We have a class customer that extends the superclass
person, so all the customers are people, at least for now. And then in constructed chaining,
we have the customer class being constructed, that the object being created. And we'll see
us, some fields are just inherited directly from the superclass, things like first name, middle
name, last name, age. And then only this field here, the loyalty card ID is constructed in this
constructor, and that field value is set. So the way this reduces duplication of coders,
let's say if we didn't have this kind of constructed chaining, this same better code here
will have to be replicated in this constructor too. And that would be a waste of space. And so by
invoking the super keyword and then passing it into the superclass constructor, this allows a
sophisticated code. However, the problem is this kind of pseudo constructor chaining isn't enforced
in the clone method. So if you'd look at our person customer example, if you mess up the construction
here in the constructor, the compiler will throw an error. But in this example, which I have,
which is a class called food that implements cloneable, it's overriding the clone method.
And then this class bar extends the food class. So that's a subclass of food. And it also is trying
to override the clone method of food, of the superclass. But what happens there is in our
track catch block when we run it, it's going to throw an error. The reason is because the superclass,
which is food, is not, it doesn't call the super.clone. So the objects clone method rather,
it's just creating a new instance of food and passing that and that creates errors here,
because it's on a proper clone taking place. And because now this error is thrown in runtime.
So if it was in foes, we would catch this error in compile time. And that's a problem. However,
though, of course, final classes don't have to worry about this problem of it being not
enforced because they will not implement cloneable as they won't be cloned. So to put it a bit more
clearly, Joshua Block states, this mechanism is vaguely similar to constructor chaining,
except that it isn't enforced. If a classes clone method returns an instance that is not obtained
by calling super.clone, like the problem which we see here, where the superclass food is not
calling super.clone. But by calling a constructor, which the person is doing here,
the compiler won't complain. But if a subclass of that class calls super.clone, the resulting object
will have the wrong class preventing the subclass from, yeah, sorry, preventing the subclass from
clone. That's a complicated, weird way of putting it in the sentence. The resulting object will have
the wrong class preventing the subclass from clone method from working properly. That's
like a weird way that he's written the sentence. In any case, the resulting strategy, the simplest
thing at first to do is to call the super.clone method because that will return an object,
which is a fully functional replica of the original. And if all fields of the class, so
in the class you're designing, if all the fields contain primitive values or reference to an
immutable object, no further processing is needed. As social blog states, any field declared in your
class will have values identical to those of the original. If every field contains a primitive
value or a reference to an immutable object, the return object may be exactly what you need. So
you don't need to play around with it in your clone method, in your overwritten clone method,
in which case no further processing is necessary. And he also continues,
but note that immutable classes should never provide a clone method because it would merely
encourage wasteful copying. So an immutable class would be a classes where the fields are our final
and the class itself is declared with a final keyword. And a simple example of this idea is this
phone number class, where in the phone number class, we have a clone method.
It's simply invoking the super dark clone method, which is the clone method of the
object class. And of course, doing the casting so that what's returned by this method is something
of type phone number. And the reason we can do this in a straightforward manner with the casting
is because Java does support covariant return types. As he states here, it is legal and desirable to
do this because Java supports covariant return types. So what are covariant return types in
Java? Firstly, let's understand the theory behind the concept of covariance. According to Baldung,
covariance can be considered as a contract for how a subtype is accepted when only the
supertype is defined. And another definition is covariance means we can access specific elements
defined by the supertype. However, we aren't allowed to put elements into a covariant system
since the compiler would fail to determine the actual type of the generic structure. I know that's
a bit too formal and abstract, but simply what it means is a subclass can override the methods of
a superclass. So in our case, a phone number, phone number can override the method of the object
class, which is the clone method. And afterwards, when it returns, it can return something or an
object, not something, an object of type of the subclass. So it will not return. So the phone
number clone method will not return an object of type object. Instead, it'll return an object of
type phone number. If we didn't have the idea of covariance, and if Java didn't have covariant
return types, this would be the implementation necessary. We'll have to do the casting as a
client. So when the client uses the phone number class and uses the clone method that we initially
defined, we will have to do the casting as a client. And because of covariance, this is not
required. Simply that will suffice and work fine. So to further understand covariance,
so let's look at this demo. We have a class vehicle, which starts an engine, and then we have a class
car that extends vehicle. We also have a class motorcycle that extends vehicle. And these
two have their own implementations of the start engine method. Now if we run this code, what
you'll see is we're first starting the vehicle's engine, the superclass's engine, and then we're
starting the car's engine and the motorcycle's engine. So in starting this engine, the object's
return, even though we're calling the same start method and the overriding is taking place in the
subclasses, the return type is of type this, which means it can return a object of type car,
or in this case, an object of type motorcycle. And over here, no casting is necessary. For
example, over here, if we do this, this would be redundant and the compiler would say,
what are you doing, mate? It'll in fact turn error. Sorry, I wouldn't turn error. I'm just
being silly. It would show that it's redundant. It's useless. So remove redundant cast because
you don't need to do that casting. So the next point is the clone not support exception should
have been an unchecked runtime exception. Now, I think I did discuss this in the beginning of the
video, but here's the problem. So firstly, let me read from the book. The code to support our
clone is contained in a try catch block. This is because object declares its clone method to
throw clone not support exception, which is a checked exception. Because phone number implements
cloneable, we know the code to support our clone will succeed. The need for this boilerplate code
indicates that clone not support exception should have been unchecked. So the problem is because
we know a class that implements a clone method is going to implement the cloneable interface,
the checked exception won't be thrown, which makes this code here the try catch block,
superfluous redundant code. And it's unnecessary. Okay, now we're going to try and do is look at
the stack class. So a bit more high level view at how the clone method is implemented. And the
stack class is defined. Well, it was initially defined in item seven, but we've repurposed it to
fit to item 13. And this is really important because here's why really, we need to consider this
point as to how do we deal with object fields or class fields that refer to mutable objects?
Because a simple clone implementation won't work for such cases, such as why
in our classes, we need to override the clone implementation of object, especially for fields
that are mutable or fields that refer to mutable fields. Pardon me, not mutable fields are
mutable objects or data structures. And in this case, the again, the perhaps a quintessential
example would be an array. For an array, we need to recursively copy all the elements of the mutable
field like an array to solve the problem of destroying or destroy invariants, we don't have,
we don't want to have arrays in two different states where we have two objects. So we have
object A and an object B that was copied off object A, both pointed to the same array,
that could create corrupt states. And that's what we see in the stack class. So this is fine,
this integer size is fine. This is fine, especially because it's final. However, the
objects object array called elements, this in our clone method, we need to change it up a bit. So
as you can see here, we're firstly doing the normal cloning in the support of clone and then
we're specifically cloning all the elements recursively in elements and then setting it to
result. So the new object dot elements and then returning that. So what we do here is we in fact
create two array instances. So to reiterate that point, I think it's important because he's in
this part of this item, this is the take home point is that when we do the cloning, it can't just be
a dumb clone of all the fields, a field for field clone. If there are, let's say things like arrays,
which point to other immutable objects, because what's going to happen then, then is we're going
to destroy the invariance of this clone method where both objects are going to point to the same
array. And that's going to corrupt that array, where as clients use these objects, it'll either
throw not point exceptions or give nonsensical results. And this situation, as Joshua Bloch
said at the year, which I will read, will not happen in a constructor clone method in many ways
acts like a constructor, because it's really constructing a new object. Now this thing we've
defined here will not happen in a typical constructor, because we aren't copying things
across in a constructor, which is why Joshua Bloch states this situation, by the way, I shouldn't
say this situation here, because what we've done here is correct. In fact, let's say,
hypothetically, we didn't do this. Now this would destroy the invariance of this clone method. But
here this is correct. So this is not bad code. Anyways, continue. This situation could never
occur as a result of calling the sole constructor in the stack class. In effect, the clone method
functions as a constructor, you must ensure that it does no harm to the original object and that
it properly establishes invariance on the clone. So yes, if we didn't do this, what will happen is
we'll have object A and then object B cloned off object A. And then if someone messes around with
object B in the elements array, then object A will also be affected because they're both
pointing to the same array. And that's the problem we're trying to solve here. Really, if you get
this point from this whole video, elaborate video, you get this part of what I'm trying to convey
here. And then to end this part of the item, a few note of bannies. The first one is you probably
noticed we aren't doing any casting like this in this clone method. It's not required because
in fact, this is the only time really it's ideal to simply for an array when I mean the only time
it's ideal to use the clone method directly in the superclass object. Joshua Block states calling
clone or an array returns an array whose runtime and compile time types are identical to those
of the array being cloned. This is the preferred idiom to duplicate an array. In fact, in fact,
arrays are the sole compelling use of the clone facility. And the other point is,
recursively calling the clone method will not work for final fields. For example, if let's say
private final object elements, so if we go here, and if we set this to be final,
you'll see an array is going to be thrown here because you can't override the values in a final
field or overwrite on the values, the memory instance in a final field. And that's because
as tragedy pt states, in order to create a proper deep clone, you must create a new instance of
the mutable object and assign it to the field in the clone object. However, with a final field,
you cannot reassign a new value after initialization, which can lead to incorrect behavior or shared
state between the original object and its clone. And then to end this part of the video,
this is a fundamental problem like serialization in the cloneable architecture, because the clone
architecture is incompatible with normal the use of final fields referring to mutable objects,
except in cases where the mutable objects may be safely shared between an object and its clone.
In order to make a class cloneable, it may be necessary to remove final modifiers
from some fields. So that's a little caveat there. Okay, that is part one. Just want to,
I guess, kind of apologize if I didn't properly convey the this part here about the reflections,
because that was it did complicate me a little bit, because at first, the way I've written the code,
the demo, it wasn't really accurate because the idea was to reflect on the object superclass,
not to reflect on the object at hand per se. But I think it's still the important point there was
it's not recommended to use reflections and try to use the object, the superclass objects clone
method. Best thing to do is to implement the cloneable interface, and then just override it and
define your own clone method. Alrighty, that's it for part one of item 13 override clone judiciously,
judiciously. It's a hard word to pronounce. And I hope I was being judicious in expounding and
explaining the concepts in this item. But I shall continue on with the rest of this item in part two.
Saying all that, yeah, thanks for watching and I hope you got some value from it. I'll see you in the next one. Cheers.
