Hey everyone, welcome to part 4, the final part of item 10 in Joshua Bloch's effective Java.
Item 10, as if you've been folding along in the previous parts, is obey the general contract when overriding equals.
And I'm very excited. And so is the dog barking outside when I decided to record a video.
But I'm very excited because finally, man, this was a really long item.
It's taken me a whole month to get across this item.
It's kind of also because I've kind of been procrastinating.
In any case, this is really good because all the stuff that we've learned in this item, what to do, what not to do,
we're going to put it all together in this final item and create a high quality equals method.
Or as Joshua Bloch would say, it's the recipe for a high quality equals method.
So without further ado, let's get started.
There are a few points that he's laid down on what to do when it comes to designing equals methods.
The first one is quite straightforward.
It is to use the double equals operator to check if the argument is a reference to an object.
So with the argument or whatever we are passing onto the equals method,
if we use the double equals operator, we can confirm if it's a memory reference.
So if you're passing the same object, let's say, then obviously it's going to return true.
As you can see in this really quite straightforward example,
we have two strings and keep in mind objects of string of string class are immutable.
And in this case, the first if condition will return true because both this new string,
I'm sorry, as I was staring into the code there, I realized I explained that wrongly.
Firstly, the caveat is this is a anti-pattern.
You should never declare strings like this because the new keyword creates a new object in memory.
That's not required because as I said, string is immutable.
So here, when we compare string one to string two using the equals operator,
this will in fact say that they're not equal.
So this will say they're not in the same memory location.
But if you use the equals keyword, it's going to say that they have the same content
or that there's logical equality as we've discussed throughout this item.
But when it comes to deciding our own equals method,
the reason that we should first check using the equals operator if it's referring to the same object
is because if it is, we just save time, we save computation time.
Instantly, we could return true or false.
Well, not false, but we could certainly return true if it is equal to the,
if the memory reference is equal using the double equals operator.
And Joshua Block states, yeah, so if so returns true,
this is just a performance optimization, but one that is worth doing
if the comparison is potentially expensive.
So if it's not equal, there may be a lot more other checks we need to do
in order to have a good quality equals method.
But if it's the same memory reference, just return true.
I'm sorry, I know I kind of exhausted that point,
but it's important to understand why we do that check initially.
The second one is to check if it's an instance of the correct type.
And firstly, if it's not straight away return false,
because if there are going to be two different types,
then there's no logical equality to start with,
which is why Joshua Block states in the second part of putting together this recipe,
use the instance of operator to check if the argument has the correct type.
So what does that mean?
What that means is, before I read out what he stated,
in fact, maybe I should first read out.
No, no, I'll show this example.
And then before we get to the Java collections framework set example,
I'll read out what he stated.
So we've defined a type, we've defined my interface
and we have a class that implements my interface.
So now this class, my class is of type my interface.
And then in the equals method, the first thing we are checking is
we're first checking, yeah, we're doing the reference equalities
of the memory reference equality,
which is what we discussed in the first part here,
or the first section, let's say.
And if it is straight away return true,
no need to execute the rest of this code.
But if it's not an instance of my interface,
so whatever object we pass,
let me just see if that's zooming a little bit.
There we go.
Whatever object that we pass into the equals method,
if it's not an instance of that broader class
or of a type, sorry, of that broader class,
then return false.
So in that sense, we save time and only if it is,
we get on with the rest of the equals method to check
if there's logical equality.
And that's why Joshua Block states typically the correct type
is the class in which the method occurs.
But if there's an interface like you've seen here,
you can implement it.
And that's why he says use an interface
if the class implements an interface
that refines the equals contract
to permit comparisons across classes
that implement the interface.
So what we're checking here in this equals method
is not if the object we pass
is an instance of my class,
rather we're using the interface as a type,
as you can see here.
So in that way, this equals method theoretically
can be used across other classes
or at least this part of the equals method
can be used across other classes
that implement the mind to face type.
And as an example, he's used the collections framework,
the collections interface,
sorry, the collection interface,
such as set list map and map entry have this property.
So we have this interface
that extends the collection generic interface
with this generic parameter or generic type.
And what that does is when we have my set,
when we define a new set
that implements this set interface
that we've declared here.
Oops, that we've declared here.
In the equals method, as you saw from the previous example,
it's the same thing.
We're checking if it's an instance
of that set interface type.
And only if so, we get to the rest of the equals method.
If not, we straight away return false.
And then the third section of this is,
as you've seen in the myriad equals methods
that we've used throughout this item,
is to cast the argument to the correct type.
So Joshua Block states,
cast argument to the correct type
because this cast was preceded by an interface of test.
It is guaranteed to succeed.
So we're passing in the equals method
when we do this check here.
Sorry, when we do the check here,
this ensures that we can do this cast safely
without something like a class cast exception error
because we are checking if it's of the same type.
Or at least if this object is of instance of string.
And in this case, in fact,
because it's not an instance of string,
it will not do the casting.
It'll move on to do something else.
So if we pass some other object apart,
other than, let's say, what we have here.
Oh, actually, sorry.
In this case, because we've declared this to be an object,
this will go through.
I apologize.
I realize that the type of object is still,
sorry, the type of OBJ is still of type object,
which is an instance of string,
which is a supertype to the string class.
So it'll do the casting here safely.
That's what I was trying to say.
That was a bad way of explaining it.
But you get the point because we've done this test here.
The casting should work fine.
Okay, now we get to the fourth section,
the final part of this recipe.
And this really is most of what Part 4
in this video series is about
because it's really the biggest part
when it comes to designing a good high-quality equals method.
And that is that for each significant field in the class,
check if that field of the argument matches
the corresponding field of this object.
Now, before we get to the definitions defined by,
ah, man, this dog really is annoying me.
Ah, I apologize.
I try to reduce background noise when editing the video.
But it is quite distracting.
Anyway, getting back to this.
So before I read the kind of formal definition in the book,
let's quickly take a look at a demo that I put together.
So what we have here, we have here a...
I'm quite distracted today.
I apologize.
It's like a lot going on,
despite me living in a very quiet neighborhood.
So what we have here is a class that I've called class person.
And it's got a private field string,
a private field called string and of type int.
So keep in mind that's a primitive type.
Then we also have the equals method.
And then you'll first see...
So in the equals method,
as we discussed in the previous sections,
we are doing first the memory reference check
and then we're doing the instance of check.
That gets us across many things.
It first tells us that here,
that these two are in fact two different objects,
if it returns false.
And here it says,
despite them being two different objects
or having two different memory locations,
they are of the same type.
That's good.
Now we get to the comparison.
And here, really, what this means is, as you can see,
so after doing the casting,
so the object that we get,
we cast it to of type person.
Each significant field.
And that is...
That really is something we need to think of
in terms of logic,
which is why initially in this item,
we discussed concepts such as logical equality
and equivalence relations,
because this call here,
each significant field
or each field that's significant is compared.
That's a call that we as the designer
of the equals method has to make.
So obviously, when we're comparing,
let's say two people or two persons in this case,
we've made the call that the name and the age
are required for logical equality,
which is why if you look at line number 20,
we're checking to see if both name and both age are equal.
And only if it's equal do we pass through.
And you probably can see here also,
when it comes to age,
I'm using a double equals operator,
not the equals keyword,
because it's a primitive type.
It's not an object.
So, accordingly, Joshua Block states,
if the type in step two,
which is the previous one we discussed,
that is, yeah, the instance of check,
if the type in step two is an interface,
you must access the arguments fields
via interface methods.
If the type is a class,
you may be able to access the fields directly,
depending on their accessibility.
And then he says,
for primitive fields whose type is not float or double,
and we'll get into why that's the case,
use the double equals operator for comparisons,
which is what I've done here.
As you can see, I already made that point.
I apologize if I tend to kind of over-repeat points,
but I think it's important, you know,
repetition is the key to truly grogging concept.
And we continue,
for object reference fields,
call the equals method recursively.
For float fields, use the static float.compare method,
and for double fields, use the double.compare method.
So why is that?
Why do we have to...
Why is there an exception for float or double fields,
in this case?
The reason is because of auto-boxing.
However, before we get to that part,
let's first look at a quick example of what all of this is.
So here, we have a class called back count,
and we have three fields,
three significant fields, keep in mind.
We have the account number, which is a string.
We have balance, which is of type double,
and then we have a Boolean value called isActive.
So again, we're doing the checks here in the equals method.
We're doing the casting in line number 17.
Should I zoom in a bit?
Line number 17.
And then when comparing the Boolean value,
because it's a primitive type,
we're doing the equals operator.
We're saying if it's not equals, return false.
And BA is, by the way, the other object that we've got here
after the casting.
And then in the account number,
we're using the normal equals method
that is in the object superclass,
and that's fine.
But here, as we've been advised by Joshua Block,
we're using the double.compare static method
instead of using the equals method,
because, well, by the way, what this does
is it returns the true or false.
Sorry, I should put the proviso that it returns
the true or false essentially
or for all intents and purposes in our equals method,
because it actually doesn't.
It returns an int value if you look at the method.
What it checks for if it's greater or less than.
And accordingly, it'll return something.
However, if it's not equal to zero,
that means there's a difference.
Therefore, it'll return false.
But if it's as in the function of the return false,
but if it's equal to zero,
that means it's the same value
or it's the same double value.
Therefore, it'll just keep going and return true
in the equals method.
So what it looks for is a difference
in the two parameters or the two values
you passed to the double.compare function.
And then to understand a bit more why it's better using
this double.compare static method
instead of using the double equals operator
or the equals method, let's say,
it's because of auto-boxing.
Because if we do use the double equals operator
for primitive fields that are float or double,
an auto-box will take place
where the compiler will automatically convert
these primitive types to the corresponding
wrapper class types.
And that is costly.
That's very performance-heavy
or anti-performance to use a self-engineering term.
And that's why Joshua Block states,
while you could compare float and double fields
with the static methods float.equals and double.equals,
this would entail auto-boxing on every comparison
which would have poor performance.
But auto-boxing generally isn't a good idea,
especially if you're using loops,
keep away from auto-boxing
because it can be very performance-heavy
because also it just creates new objects every single time.
So an example we have here is this int value of type.
It's a primitive type.
What auto-boxing will do here is convert this int
to the wrapper class integer
and that's going to now be an object.
And any instance of that will create new objects in memory.
And the compiler does that automatically
for primitive and wrapper classes.
So that's why it's better to use compare
instead of using the equals method for float or double.
And then kind of an ancillary point,
Ushen's ancillary, it's still important.
For array fields, apply these guidelines to each element.
If every element in an array field is significant,
use one of the array.equals methods.
And as we're deciding this method,
one thing that could come into your mind
is what if the object reference contains null.
That is a very real possibility.
So we want to avoid a null point exception if that happens.
If the object reference contains null.
And to avoid that, to avoid the null point exception,
what we want to do for that is in fact
use the objects.equals method
where we compare two objects, which is in the Java utility
objects class.
So if you take a look at another small demo,
it's better looking at code than me trying to explain it.
We have another class called person.
And again, we have a name of type string,
and then we have an age of the primitive type int.
We have the constructor and then the equals method.
So simply, again, same thing.
And we're doing the casting, checking for the instance,
the double equals operation, all of that.
And then afterwards, in the comparison,
when we're comparing these significant fields,
it could be possible that one of them could have a null.
Or in this case, what we pass,
this object we pass onto the equals method.
This object.equals method will ensure
that a null point exception isn't thrown.
And that's why when it comes to comparing the name,
we are using objects.equals.
Did I say object.equals?
I meant to say objects.equals.
That's important.
And the reason for that is, is instead of me explaining it,
let me just use chatGPT to explain it better than I ever could.
The object.equals method is a utility method
provided by the Java utility objects class in Java.
It can be used to compare the equality of two objects,
taking into account that either or both objects can be null.
And that's important.
That's why the null point exception isn't thrown.
The method will return true if both objects are null.
Or if the objects are not null,
and the equals method of the first object returns true,
when called with the second object as the argument.
So the example for that is seen here.
As you can see, we are passing a null value into personP4.
And that returns false, as expected,
because we're comparing a P1 to P4.
And in that comparison,
it's clear that there is no logical equality here,
despite the age being the same.
And there's also, more importantly, I guess,
there's no null point exception being thrown.
And then we get to this concept of canonicalization,
which is the idea that in some classes,
a simple equality test won't do,
especially as Joshua Bloch states,
for classes that are immutable.
Meaning if an object of an immutable class
can't potentially change,
for logical equality, for equals method to work properly,
we still need to keep a canonical form of that field
somewhere in our class.
We need to stow it.
So firstly, what is canonicalization?
And a definition I found probably the best one I could find
is really of Wikipedia.
It's a computer science principle.
And computer science, canonicalization,
sometimes standardization or normalization,
something you hear quite often when it comes to databases,
is a process for converting data
that has more than one possible representation
into a standard, normal or canonical form.
You could probably see that itself hints that idea
that we want the data to exist in a consistent representation
when doing the equality.
And that's why we need it to exist in a canonical form.
This can be done to compare different representations
by equivalence, like the equals method,
to count the number of distinct data structures
to improve the efficiency of various algorithms
by eliminating repeated calculations
or to make it possible to impose a meaningful sorting order.
So clearly this CS principle of canonicalization
has many uses.
So we're going to look at a demo to exemplify this idea
of canonicalization on a previous class that we designed,
which was the case and sensitive string class.
So if you recall, I think in part two,
part two or three, when we were discussing symmetry,
we created this class called the case and sensitive string class.
And what we're doing here is, really,
we're storing a canonical field.
We're storing data in a canonical field,
which is in this string.
We have this private final field.
So it's going to be immutable,
called canonical s, which is a canonical string.
And then in the constructor,
when we instantiate this class,
as we normally set the value for s,
we are also setting the value for canonical s,
which converts it to a canonical form.
And what does that method do?
It simply converts everything to lower case.
So in that case, if we go to the equals method,
you could see that what we're using here
is the canonical string to check for equivalence relation.
We're not using the other value here, which is s.
And that ensures that we have consistency
across the equals method,
because we have this canonical field that we're using.
And that's why we present the data in that way,
despite we know that it can take many forms.
So of course, apart from having a good quality equals method,
as soft engineers, what we always look for
is a performance application.
So we want that to be good efficiency in the equals method.
And therefore, this block towards the end of this section
discusses a few things we can do to improve performance
apropos the equals method.
Firstly, it's important to compare the fields
that are more likely to differ,
or less expensive to compare, or ideally both.
By the way, before we get to the second point,
we're going to go through all of this in a demo.
So first, let's get the theory out of the way.
So the second point is do not compare fields
that are not a part of a object's logical state,
because we are looking for logical equality.
That's important.
And then need not compare the derived fields.
So these are the three main points
when it comes to improving performance on the equals method.
Now, before we get to the demo,
I just want to read the formal definition
or the formal elicitation of Joshua Block.
For best performance, you should first compare fields
that are more likely to differ,
less expensive to compare, or ideally both.
So that's point one.
If only I can click.
There we go.
You must not compare fields that are not part
of an object's logical state, such as lock fields
that use to synchronize operations.
You need not compare, so that's part three.
You need not compare derived fields,
which can be calculated from significant fields,
but doing so may improve the performance of the equals method.
If a derived field amounts to a summary description
of the entire object, comparing this field
will save you expense of comparing the actual data
if the comparison fails.
So let's look at a demo.
What if we have a polygon class?
Now, this first thing I want to say,
I'm not saying that this class of design
is an accurate polygon class,
especially when it comes to the calculation of the mathematics.
I kind of did a bit of Googling, used a bit of chart GPD
and put this together, pardon me.
So we have the polygon class.
Sorry, the caveat there was,
or the provisor was, don't take,
these calculations, don't use them.
They're probably wrong.
I'm not sure.
So do double check before using this class
if you want to build a polygon class.
So we have a polygon class.
We have edges, vertices as a polygon disk.
We have this, all the fields here are primitive values.
And then we have a double array called sides with array,
array cached or cached.
And then we have the constructor, of course,
where we're setting all the values
and even setting the value for a Boolean variable,
Boolean field, which checks if the array value has been cached.
And then in the calculations, the calculation itself,
we're checking for the area initially for a triangle
and a rectangle.
And again, as I said, the formula may be wrong.
So I'm not sure if this formula is correct.
And then also, if necessary,
we could use it for other polygons,
depending on the number of sides,
the formula will change.
So what the point is, the point pertaining to our item
is when we're doing the equality,
the only thing we're really,
because we're using a derived field here,
which is the area field.
The only thing we're looking for in the equality
is the area value.
We're checking if the area is the same
between the object we pass.
So the polygon object we pass,
which for all intents and purposes
will be a polygon object we pass.
And we don't, we ignore things such as the vertices,
the edges, many things,
even the obviously things like the array cache.
And if we run this method,
you'll see it works as expected
because we are looking for logical equality.
You can see here, over here,
firstly comparing a triangle to a rectangle
in a return force.
That's correct.
We're setting all the sides in the sides array.
But when we compare a triangle to a triangle,
so we have declared two triangles here,
triangle and triangle two,
it'll return true.
It's because the number of edges and vertices
are the same, so are the sides.
And that is because those values
are what gives us the area.
So it's a derived field.
And in the quality all we require
to create a high-performance equals method
is the derived field value,
in this case, the area value.
I hope that makes sense.
So just to repeat myself,
to really get the take-home point here,
it is that we don't have to compare the derived fields.
We may have misspoken and said we have to before,
but we don't.
The idea is the significant field in this class,
in the polygon class, is area.
And therefore, we know if the area values are equal
for two objects, that the vertices and the sides
and the edges and all the rest of it is going to be equal to.
And in that way, we make our equals method more performant.
Because if two polygons have unequal areas,
there's no reason to compare the edges and vertices.
And that gets us to the final caveats, let's say.
Okay, no, not yet, not yet.
I spoke too soon.
There's a bit more to say here.
So Joshua Bloch, despite me using many other classes
to exemplify this,
Joshua Bloch has his own class called the phone number class
that he's built, which I've used here too,
which is really well built.
It's a high-quality equals method here.
And he says, when you're finished writing your equals method,
ask yourself three questions.
Is it symmetric?
Is it transitive?
Is it consistent?
If those three questions are fulfilled,
that means, or if they're answered to be yes,
that means it's a high-quality equals method.
And then he kind of puts this point, of course,
your equals method must also satisfy the other two properties,
reflexivity and nonality, which we discussed in the previous part.
But these two usually take care of themselves.
And then we have the phone number class that is designed here,
where in the phone number class,
we have the area code prefix and the line num.
They're all private final short values.
What in the...
I realize he's used the non-primitive type short here
because it's a phone number that helps with saving memory.
I've really not ever used a short method ever,
short type ever.
I've always used just int.
But nah, that's good.
It shows that it's very punctilious when it comes to designing classes
and writing code.
He pays attention to the small things.
So when it comes to the phone number class,
yes, we have the constructor where we set all the values.
We do a range check in this class.
We make sure that it's within the range
using this range check method.
And afterwards, we come to the crux of the matter,
which is the equals method.
So you can see here what he's done.
He's firstly done the memory reference equality
or check for memory reference
and then check for the proper type, the type check
and then the casting, which will be fine
because we're doing the type check here.
There won't be any class, class exceptionaries.
And then he's comparing all the significant fields.
And for him, or I guess for him, even for me,
for anyone, this is a high quality equals method.
And now we get to the final caveats when designing an equals method.
So the first one is always override hash code
when overriding equals.
We're not going to get too much into that
because the next item is in fact all on the hash code method.
However, that's mostly to ensure that objects of the class
work correctly in hash based collections.
So objects can be put through a hash function
and you won't any of these classes
or any of these, yes, classes that use hash based collections
to work properly.
And that's why whenever the equals method is overrided,
we need to ensure that the hash code method is also overrided
and updated appropriately,
depending on what we do with the equals method
to make sure these collections
and other data structures in fact work well with our objects.
The next point is don't try to be too clever.
Perhaps it's good advice for life itself.
And Joshua Bloch states, don't try to be too clever
if you simply test fields for equality.
It's not hard to adhere to the equals contract.
If you are overly aggressive in searching for equivalence,
it's easy to get into trouble.
And the example he's given is when it comes to equivalence relation
or the comparison, don't take aliases,
such as symbolic links, into account.
Or the example here is the file class has symbolic links
and we shouldn't take that kind of alias into account
when doing an equality check.
And a few definitions to understand
what the relationship between an alias and a symbolic link is.
So firstly, as Baladang has put it,
a soft or symbolic link is a file pointer.
So in the file class, that behaves as a file
that is linking to if the target file gets deleted,
then the link is unusable.
So it's mostly a pointer.
And I think, in fact,
ChatGDPD had a much better explanation than even Baladang.
And I really love Baladang's blog.
In any case, what ChatGDPD states is an example of a symbolic link.
Imagine you have a folder called original
and you have a large number of files in it.
Now you want to create another copy of the folder,
which is identical to the original folder,
but in another location of your file system.
Instead of copying the entire folder and its contents,
you can create a symbolic link to the original folder
and place it in the desired location.
Now you can access the original files through the symbolic link,
which acts as an alias.
So that's the bit, that alias bit or the symbolic link we create
shouldn't be taken into consideration
when designing the equals method.
That's a field we should ignore.
And then an example of an alias is,
let's say you have an object A with some properties and methods
and you create an object B that is identical to object A.
Now you can access object A's properties and methods
through object B, which acts as an alias for object A.
So that kind of makes sense what an alias is
and this is how you define symbolic links.
So in the files method, we have file,
stock, create, symbolic link.
We have the link we create and then we have the target.
This link we create shouldn't be used
when it comes to equivalence relation in I equals method.
That should be ignored and it's not a significant field.
So the final caveat is in fact quite important.
Now the other two caveats are, I don't think at least,
that one would be prone to making those mistakes.
Whereas this, most certainly I can see myself making this mistake.
It is that you shouldn't substitute another type
for object in the equals declaration.
So as you saw in the equals method,
as defined in the object superclass,
we all, actually this is a bad example.
This is the way not to do it.
But normally what you would have here is an object.
We take in the parameter would be of type object.
But let's say we define it to be some other type.
This will create some problems because firstly,
what this does is the compiler will not inherit
the problem of the mentation of the equals method.
And since the method is strongly typed,
so now we've specifically defined what type we want.
And it can't just be the superclass object.
It'll take objects of a specific type instead of object,
which can give false positives, certainly.
And one other point there is the problem
with defining the equals method like this is
the method does not override the object.equals
because we do inherit this from the superclass object.
We do it like this.
Instead of overriding, it will overload it
because the method in the object.equals class,
the type is object.
And now we've changed it where it's going to be overloaded
and the equals method will still exist in our subclass.
So it'll sort of be like this.
It'll be this.
And then there'll be another method with object.
Java disallowed this because the signature
of these two methods are different.
They're both got the same name.
However, they take in different types of parameters.
So overloading takes place.
And this is a problem again because it can
mislead the client of our class.
Now, in my opinion, it's always a good habit
to use annotations in Java.
I think that's a good idea.
And this is a good example of why perhaps using an annotation
is good, not for the sake of the compiler, let's say,
but more for the programmer because what happens here is,
here, because we're explicitly stating,
we're going to override the equals method in the superclass.
This won't compile.
It'll give an error.
It's still broken, of course, but at least it won't compile.
So we'll pick our mistake and we'll recognize
some things.
We've done something wrong here by giving it type
my class instead of object.
And I think it's good because now we're saying,
instead of overloading, we want it to,
we're explicitly stating we want it to override
and the compiler is saying, nope, we can't do this,
which is what you'll see here.
So this is demo here.
I have a parent class with an equals method.
And if you look at the child class, this is dangerous
because we're doing overloading here unknowingly.
However, if we do put the override annotation,
it'll throw an error, let's say,
or the override can't take place,
which then we can fix by doing it the proper way,
which is what I've defined here,
where now we have a proper overriding take place
with the type of object.
So we're taking all the objects in here.
That's great.
And then, of course, that's the end of the item,
the end of the part and the end of the item.
Wow, that was a long, long item.
It was probably 10, 15 pages.
I feel really good for getting through that
and I learned so much, but, but, but,
at the end of the item, Joshua Book states,
hey, look, yes, now you know how to design
or you have the recipe for a high quality equals method.
And yeah, it's fantastic.
We learned a lot.
We went through a lot of a bit of computer science,
a bit of even logic.
However, most of the time, it's a good idea
to use the IDE or to use something
like the auto value framework,
Google's open source auto value framework
when designing equals methods,
because these frameworks were pretty much,
take care of all of these things we discussed in this item.
Look at how long the item is.
Everything from, from, from the properties
and making the equals method more performant,
all of that.
Which is why Joshua Block states,
an excellent alternative to writing
and testing these methods manually
is to use Google's open source auto value framework,
which automatically generates these methods for you,
triggered by a single annotation on the class.
And then he also says,
having IDEs generate equals and hash code methods
is generally preferable to implementing them manually
because IDEs do not make careless mistakes
and of course humans do.
That's the end of the item.
And then he states in summary,
don't override the equals method unless you have to.
In many cases, the implementation inherited from object
does exactly what you want.
If you do override equals,
make sure to compare all of the classes,
significant fields,
and to compare them in a manner that preserves
all five provisions of the equals contract.
Fantastic.
I'm so happy that I got through that,
especially because I feel like I learned a lot
when we were going through that item
because it touched on so many different concepts,
which was a really fun item to cover.
And the next one is item 11,
as I did state a bit before,
always override hash code when you override equals.
And I shall see you in the next one.
Thanks for watching.
Cheers.
