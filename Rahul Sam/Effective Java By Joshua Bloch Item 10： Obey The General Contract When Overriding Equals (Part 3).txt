Hey, everyone. Welcome to the third part of item 10 in effective Java, which states obey the
general contract when overriding equals. So we have been covering this item across multiple videos,
and this is just a flow on from part one and two. So therefore needless to state,
please do watch part one and two if any of this is to make any sense. In part two, what we discussed
was we discussed the first three properties of what we would call an equivalence relation,
and we went through them as being reflexivity, symmetry, and transitivity. And today we're
going to discuss consistency and non-nullity. But before that, Merry Christmas and Happy New Year.
I hope you have a wonderful New Year's and had a wonderful Christmas.
When you do see this though, it's probably going to be a bit later in general mid-gen,
the reason being I'm going to take some time off. I want to go to Queensland,
and that's going to be nice. Therefore, I won't get time to edit and upload this video.
But without further ado, let's get started. So today we're going to discuss consistency and
non-nullity. I do apologize if there's some background noise. There's a bit of construction
taking place outside. I really can't do anything about it, but I'll try my best to edit the audio
or what's what I'm looking for. Reduce the background noise when I'm editing the video
in the audio. That was a weird way of putting it. What I meant to say was I'll fix up the audio.
Let's start with consistency. So consistency is again a part of those equivalence relation
properties, and it's important to understand that to understand what the general contract of the
equals method is. Consistency states, for any non-null reference values x and y multiple
invocations of x equals y, so x and y could be of any type, string, integer, that doesn't matter,
but multiple invocations of x equals y must consistently return true or equal or consistently
return false, provided no information used in equals comparison is modified. That here being,
if you compare two strings, let's say x and y are of string type, which is a superclass or a subclass
of the object class, which has the equals contract. So let's say you're building a new type of string
class and you're overriding the equals contract. And then if you have two strings a and b, pardon
a and a, because a and b is different, if a equals a returns true, it should do so
consistently across the program. And if a equals b returns false, that should also follow across
the program that cannot change. But the best way to understand this is of course, by an example.
So let's take a look. And as I've been doing recently, a lot of these examples are just
me taking code that ChudgeGPT creates and repurposing them to make things a bit more clearer.
So example courtesy of OpenAI or ChudgeGPT, we have a class called person. So just to again reiterate,
what we're trying to demo here is what consistency means in pertaining to the general contract.
So if a class called person with two private fields, we have a string name and a integer h,
keep in mind, the string is a non primitive class and whereas int is an primitive type,
non primitive, non primitive type, I meant to say. And then we do have the constructor
where we set the values on the creation of the object. And here we override the equals method
that's inherited from the object superclass. So what are we doing here? It's quite straightforward
really. We're checking if it's equal. This equality is a reference equality. And just to save
computation time and to make the code more efficient, if this is true, we straight away return
true because that means it's pointing to the same memory address. So there's no question that these
two objects in that case will be equal or the comparison will be equal. If it's not an instance,
then return false because there's no use in doing the rest of the executing the rest of the code
if it's not an instance of the type of person, if this object we pass on to this method.
And then here in line number 28 is where we do the comparison,
where we are casting the value and we do it in both ways to make sure that the comparison takes
place. And then really all of that doesn't pertain to this particular property per se.
For consistency, what we expect is we have three objects, three person objects created here. So when
we compare Alice and Alice, it should always consistently return true. Whereas if we do compare
to P3, person three, which is Bob, it should consistently return false, which is exactly what
you'd see here. So true, true, false, false and wherever, well, whoever client that uses this
class and however they create objects of this class, this pattern should be followed. And that's
what consistency is. It's really quite straightforward, which is why Joshua Block states if two objects
are equal, they must return equal for all time unless one or both of them is modified. In other
words, mutable objects can be equal to different objects at different times while immutable objects
can't. When you write a class, think hard about whether it should be immutable. So we'll discuss
immutability in a bit. If you conclude that it should make sure that your equals method enforces
the restriction that equal objects remain equal and unequal objects remain unequal for all time
across the lifespan of an immutable object, that bit I added. And then he states,
whether or not a class is immutable, do not write an equals method that depends on unreliable
resources. So he's spoken about an example there. Before we get to the idea of relying on unreliable
resources, let's quickly get some theory out of the way. So what is immutability? We've got two
definitions here. And after that, we'll look at some demos. Firstly, by Oracle Docs. Okay,
the best way to think about immutability is it's an object that maintains state. It's the simplest
way to think about it as a kind of a heuristic. But more formally, an object is considered immutable
if its state cannot change after it is constructed. Maximum reliance on immutable objects is widely
accepted as a sound strategy for creating simple reliable code. So that said, that's from the
Oracle Docs. And then we have another probably a better definition really, from Biden. An immutable
object is an object whose internal state remains constant after it has been entirely created.
This means, and this is the important part, and this really pertains to even item. So when it
comes to immutability, this means that the public API of an immutable object guarantees us that it
will behave in the same way during its whole lifetime. It's that latter bit that we can connect to
what Joshua Block has stated here, where he says, again, I'm repeating this point, if you conclude
that it should make sure that your equals method enforces the restriction that equals or equal
objects remain equal and unequal objects remain unequal for all time. So when he means if you
conclude that is if you conclude that an object or a class, you're going to design it to be immutable.
So another example that I use strategy to be to create is this one here. We have this class called
an immutable class, which I created. And first thing you can see, I've created it as being public
final, which means this class cannot be subclassed. And then afterwards, all the fields are declared
private to, which means any outside entity, let's say, cannot tamper with these fields,
there's good encapsulation in this class. And in the constructed itself, it's only when the
class has been constructed, initially, the values are set afterwards, it can't be tampered with.
And while we do have getters for this class, where we get certain fields, you can see that
there aren't any setters. So you can't even set values in this class, again, maintaining
immutability. And then just an additional thing, yeah, just to make sure that it's fully immutable,
we've made a deep copy and explain what that is. So this field here, field three, it depends on
an error list. An error list is, in fact, mutable. So which is why, you know, let me just read out
what strategy PD said itself. If the class has any mutable fields, make a deep copy of those fields
in the constructor and assign the copied values to private final fields. This will ensure that the
internal state of the immutable class cannot be modified. So by making a deep copy, really,
what we're doing is because this class or this object, when it's in runtime, depends on another
resource that could be immutable, we make them independent, we decouple them so that any change
to one of the other, so the field three, field three object will not affect the internal state
of our broader object, which is the class at hand, the immutable class. So again, a bit of a formal
definition of what a deep copy is. Again, a deep copy, this isn't very much related to what we're
discussing in this item. However, of course, because we are discussing immutability, it's
important to understand what a deep copy is. But formally in Java, a deep copy is a copy of an object
that creates a new object with a new memory address and recursively copies the content
of the original object to the new object. This means that the new object is completely independent
of the original object, and any changes made to the new object do not affect the original object.
So you can see here, when we are setting the value for get field, we're returning a new
object of type area list, and we are just passing the, sorry, this isn't the getter, by the way,
we are passing the field three value into the constructor of the area list class.
So that creates a new object. And it's an exact copy of the get field or the field three.
But any change now in the new object that we give to the client
will not affect the state, internal state of our broader immutable class object.
That is what a deep copy does, and that's how a deep copy assists with immutability.
And then from the JDK itself, I should have shown this example before the previous one,
but you still get the point. If you run this code, you'll see despite in this string,
so string class is immutable, sorry, is immutable, pardon me. And in the string class,
we're setting it initially to be by or done, and we're doing this replacement and then
returning that value to this new name object. But what you'd see here is,
even though we're doing the replacement here, that doesn't affect the internal state of the name
object. So in line number 12, when we do print it, it's still going to print by or done, whereas
a new name now is going to have their replacement is going to be its own object that you created
newly. And then getting back to the idea of consistency and immutability, Joshua Block has
given an example of mistakes made in the designing of the Java language itself, historical mistakes.
So for instance, I didn't I didn't know this, I only figured this out. Oh, I only learned this
by the book that the Java.net URL in this library, the sorry, the Java.net library,
the URL class was relying on unreliable was relying, pardon me, was relying on hosts associated with
IP addresses to affect the set of the object that it creates. But however, of course, we know
that sometimes hosts names that are connected to IPs, they can change IP addresses can change
all the time. And that itself. So the fact that that class relied on that unreliable resource
was a mistake, which is why Joshua Block states the behavior of URLs equals method.
So pardon me, the equals method was relying on that unreliable resource, which was the IP address
and the host name. And therefore, he states the behavior of URLs equals method was a big mistake
and should not be emulated. Unfortunately, it cannot be changed due to compatibility
requirements to avoid this sort of problem. Equals methods should perform only deterministic
computations on memory resident objects. So yeah, as Joshua Block just highlighted throughout this
book, the language designers itself have made some of these mistakes. So when it comes to this
mistake of consistency, or the mistake of not abiding by the property of consistency,
even the people who are experts at Java have still made this mistake. And this is another
example of that. So in that, let's get to the next property, the final one, last but not least,
as they say, which is non-nullity. And non-nullity states, it seems quite straightforward, but
once we dive into it, you'll see how there are, there can be times when certain mistakes can happen.
So non-nullity states, for any non-null reference values x, x equals null must return false,
because obviously you can't compare an object to a null value. And practically what that really
means is a null point exception cannot be thrown in the equals method when the comparison takes
place. So as Joshua Block states, it says that all objects must be unequal to null, of course.
While it is hard to imagine accidentally returning true in response to the invocation of
object dot equals null, it isn't hard to imagine accidentally throwing a null point exception,
which violates a general contract or the he says the general contract prohibits this.
So then he states that some classes have attempted or tried to do an explicit null check to prevent
this null point exception from being thrown. So here's an example of what that would look like.
I'll just actually leave that there. Ignore that ever for now. If we just try and check in the equals
method when the overriding, whether the object pass is equal to null, and here we're doing a
memory reference comparison. And if it's not returned full straight away, but this isn't
required and we shall see why. So the rest of that part really is about this bit of code. So in this
class my type, what we're doing is we're checking if whatever object we pass onto the equals method,
if it's a instance of my type, and if it isn't, we straight away return a false. And only if it is
off type, my type, do we do the casting as you can see here. And this check immediately prevents
any class cast exceptions from taking place too, because even if you pass a null here, it's going
to return true, which you shall see here. So when the client uses this new my type method and passes
a null, it's going to return false as you can see. And the reason it does that is because
obviously null is enough type, my type, and then the equals method recognizes that and immediately
returns false. It's as straightforward as that really. And on the casting just to block states,
to test this argument for quality, the equals method must first cast its argument to an
appropriate type. So its accesses can be invoked, or its fields accessed, which is what we're doing
here in the casting. And then we're returning true if what we do cast by that object is equal to
this, it has logical equality to this object in this class. And of course, this is just on
9 of 11, a very plain comparison. But the rest of the equals method, a lot more could take place.
And we could do a lot more work to ensure there's logical equality. And that's it. That's what
non-nullity is. There's not a lot to it, except to putting in that extra check. And this check,
regardless of the context of whether we're passing a null to this method or not, would still be done.
Therefore, it kind of solves our problem. But it's important to understand the property of
non-nullity in principle when designing an equals method for our classes. That's it. And we're not
going to move on to the rest of the item, because part four is the final part. Almost damaged my
book there. And in part four, really, what we discuss is putting it all together. After we've
discussed all these properties, after we've discussed what equivalence relation is and
everything we've discussed in this item so far, putting it all together and how to really design
a good quality equals method that respects and abides by the general contract and these properties
that we've been delineating and trying to understand. Saying that, thank you for watching. I hope you
found value in this video. I shall continue on with part four when I'm back from Queensland after
my short break. And part four, as I said, is putting it all together. It's the grand finale
where we put this all together and design a superlative, high-quality equals method. So,
hopefully, I'll see you in the next part. That's it. I'll see you in the next one. Cheers.
