Hey everyone, welcome to yet another episode of my video series on just your blocks effective Java now like every other
Content creator youtuber, whatever you may call it. We are no fans of
lone moors leaf blowers any of that and unfortunately
Despite living in a very quiet neighborhood
There's someone
Long alone, so I apologize if the background noise is gonna ruin the quality of this video
But in the editing process, I'll try to, you know, filter it out and kind of make it a bit more listenable
In any case getting to this today, we're gonna cover a pretty simple item to be honest
It's item 12 which is always override to string
So if you have been folding alone in item 11, we did always override hash code when you override equals and
Essentially, I've been going through all the items in Joshua blocks book
But as be sure before we get to the item itself, I want to get through the proviso
So without further ado, let's get started. This is not a tutorial. I am not a teacher or an expert
So whatever I say in this video, please do your own research. Ask
Shad GPD for God's sake
Because Shad GPD is probably gonna give a better explanation than I do. I
Feel like a lot of these tutorials are eventually gonna be
Redundant or obsolete really the AI does a much better job in explaining these concepts than myself at least can ever do
nonetheless, I'm
Really doing these videos more for myself than the general public rather selfishly because in some sense explaining things that it loves one to
Learn things much better and it kind of settles more in your mind
Sorry, I'm talking too much. So yeah, that said, this is not a tutorial not a tea. I'm not a teacher nor an expert
Please do your own research
I've always is an allergy. This is similar to the blind leading the blind
I'm as equally or perhaps even more blind as you are when it comes to the concepts of
Concepts highlighted in this book, but also computer science in general
This is a
Exploratory disposition. That's simply what it is. I'm exploring something and while I'm exploring these concepts. I
In think a lot essentially I will inevitably make mistakes
So please do be kind enough to point them out more for the sake of the other viewers than myself
but for myself too because I don't want to
Spread any false information and all the code given that this is a programming tutorial series
Not a tutorial. I just said it's not a tutorial given that this is a programming video series
All the code will be available on get out. Okay, enough of that. Let's get started. So as
I said item number 12 is always overriding to string
It's not an overtly complicated item. The concepts are quite straightforward. Nonetheless, it's important to
Grock what Joshua Block has
delineated in this item to
Write better code essentially because the two string method is obviously common to the object class and
Every class that you'll write will have a two string method by default
So to get the basics out of the way what the two string method does is that it simply gives a string
Representation of your object whatever it may be and which is why it is the object superclass
Which is the superclass of every other class in Java has the two string method
And if you look at the two string method what you'll see is that it gives a it returns the class name
Followed by the unsigned
Hexadecimal representation of the hash code. So this is what the two string method by default does
but
unfortunately
For most use cases or essentially all use cases
This doesn't suffice the reason being the general contracts on reading out the book the general contract
For two string states that the return string should be a concise
But informative representation that is easy for a person to read now what this returns. So essentially
I'll show you an example soon
But the important thing this could be concise
But the important thing is that it should be easy to read and it should be something meaningful
So if you take a look at this phone number class, which is what Joshua Block has given in his demo by default if we don't
overwrite the two string method and
Here in line number 59 if I've created an object of phone number an object called Jenny and given it the area code the
prefix and the line number and if I print this
object, you'll see what you get is
The name of the class with its package location and then an unsigned the hexadecimal pretty much this for a user
for a human being is
Not meaningful enough especially given that this class is supposed to represent a phone number in a given format
So all we can do is we can override the two string method and if we do override it
You'll see here. We're setting it to a particular format
using the
Significant fields of this class, which are these three fields
And then once after overriding it. Oops, that's the wrong one after overriding it if we rerun this code
You'll see what's returned now is something a bit more meaningful
It's in fact an actual phone number with the given given values
So that's why it's advised always to override the two string method because majority of classes
We need to represent them in a meaningful way
So Joshua Block states the two string contract goes on to say
It is recommended that all subclasses override this method
Good advice indeed. Now, of course if we're a programmer and not particularly a tune to using breakpoints and whatnot even though
Recently, I didn't personally do this for a long time, but recently one of the senior engineers in my company
He's really taught me the the art and style of using breakpoints and code and how you can debug on runtime
But when I was a a noob a pleb, I used to just pretty much
log everything and then debug
While logging that's probably not the best we do debug code, but I do know I think a lot a lot of programmers, especially
plebs, I'm using that term rather physically, but even
Forgive me for being sadonic
But the point being if you're an inexperienced or even if you're an experienced programmer, don't really matter if you do
log your code log objects log different
Properties and pull out our logs in your code for debugging
You need what you log to be to give you meaningful information and that's really important. So the problem though is
It could be a component with reference to a given object may include that includes a string representation in a log error message
Which would ease which would be easy to debug with the meaningful to string
So what I've written here is essentially it could probably be a class that refers to the object of your class
and if the two-string method is meaningless then
The client of that component is going to be disserviced especially when it comes to debugging
So a good example here would be if you take a look at this simple class that I created called my component
Which as you can see is referring to the phone number class when the my component class is
Constructed in the constructor. It's
Instantiating a new phone number object. Let me actually do like that. It's better. And then if I run this
And I'm intentionally throwing an exception here. So let's say that was some kind of error and in the error log
Once the exception is caught
It's logging a meaningful
string representation of the my component dot phone number object
Now of course if once again if he didn't override the two-string method and if he had it by default as the hexadecimal
which it is it
would in this case make debugging a lot harder because now you're not really sure what this cloud
I mean, you kind of do know what the class does
But it's better to always have a string representation, which is why just your book states providing a good two-string
Implementation makes your class much more pleasant to use and makes systems using the class easy to debug
The two-string method is automatically invoked when an object is passed to print LN print F
The string concatenation operator or assert or is printed by a debugger
Even if you never call two-string on an object others may so what it means by the others may is of course
in this case the my component class used the two-string method, so it's good to be
Charitable and think about others in that sense and it continues
programmers will still generate
Diagnostic messages in this fashion whether or not you override two-string, but the messages would be
Useful and unless you do yes, it's a kind of same thing is repeated there
also another sort of answer the point I guess is that he said
Collections in fact make good use of the two-string method. So if you look at this demo once again, I have a hash map
I mean once again, I mean once again
I have a hash map that uses the phone number class
So the the key is of type string and the value is of type phone number and we're adding this
Key called Jack my favorite philosopher and a new object of phone number. So if I do print this
What you'll see is in this case. This is a mistake actually
So it says here Jack and sprinting the object and this is kind of meaningless, but if we do
override this two-string method and
reprint that and then print the elements in that collection in
This case you can see there's only one element, but it's in the Jack and you get Jack's phone number
this is not his phone number, but if it is I would have called him and
Immediately asked him for an interview to nerd out on philosophy, but this is not his phone number. Unfortunately
Okay
Let's keep going so he states here
Oh, he continues when practical the two-string method should return all of the interesting information
Contained in the object as shown in the phone number example
Then on this next point where we discuss objects not conductive to string representation
He states it is impractical if the object is large
So these are objects that is a bit harder to represent as a string. Why is this giving a typo to a there we go
Sorry, he continues is impractical if the object is large or if it contains state
That is not conductive to string representation and then it continues before we get to the demo
under these circumstances, so if this is if the object is
Not conductive to a string representation under these circumstances two string should return a summary of the class
Ideally the string should be self-explanatory. So let's take a look at this demo
Over here, we have a class called phone directory
This class is if you look at the two-string method of this class, which I'll show it in a moment
It is a summary of this class. So what do I mean by that?
This class has two fields two private fields
It's got string name and a list of phone entry type called phone phone entries and in the constructor
It it'll set the values for this these two fields and if you look at phone entry
That's a class of its own in fact, which is a in a class called phone entry
So that simply takes a full name and the phone number that class really doesn't do that much and then in the
Phone directory class. We have a list of phone entry as I did already say
And if you look at the two string method what this two string method does is it returns the phone directory with the name
That's so the name of the whoever the person is and then
All it does is it returns phone entries dot size. So it doesn't really return
every single element in the phone and entry list now if you look at how a client might use the
phone directory class
We have three objects here, we have phone entry one two and three then we also have a phone entry list
So into the phone entry list, we've added by the way phone entry
One two and three these these three objects of the type phone entry and then the list is of course of type for entry two
And then sorry and in the list we add these phone entries and
Afterwards into the directory, which is of type phone directory
Obviously we add a name in this case that existentialists and we add their names character guide me to start
Into the phone entry list because sorry the phone entry list where we added these objects to I added into this not added
But that this phone directory class is instantiated with that list. Gosh, I'm butchering this simple thing
I'm sorry. It's been a long couple of days. My brain. It's gone a bit mush
So if we do run this what you'll see is
Yes, it's printing phone entry as it should
With the with the full name and the phone number
But if you look at the phone directory class
What it's really doing is it's saying existentialists and saying, okay, this there are three existentialists in this phone directory
And that's kind of the point here. So
It's not always necessary to represent every single thing in a class
Especially if there are lists involved and other components involved in the class
What's important is as Joshua Block states the string should be self-explanatory
This here this two string method that that we've overridden in the phone directory class
This is still something meaningful and comparison to let's say a hexadecimal for a client of the phone directory class
So it's still of value again. The key term here is meaningful
The reason it's important for it to be meaningful is again if it comes to debugging here
If there's an associate failure or there's a test failure, it'll say expected this but was this now for a
user or a programmer
This looks the same so he or she doesn't know where the hell the error is is probably because in the
String representation of this class some significant field something that would give meaning to this object has been missed out
Therefore the user is kind of blindsided and have to figure it out on their own
So it's probably always good to over communicate and over represent what an object is in a string
So of course something you may have noticed in the phone number class is when we were representing the phone number
You could see here. We did give it a certain format
We did represent it in a certain format and that begs the question
How do we specify the format of the return value in documentation or put it in Joshua Block's words?
One important decision you'll have to make when implementing a two string method is whether to specify the format of the return value in the
Documentation so according to him. It's important to document the format for value classes such as phone number or matrix
Now what are value classes? So before we get to the demo better tear you out of the way
So according to one definition I found by UC Berkeley at a fundamental level
So I'm defining value classes here at a fundamental level value classes define objects
Which once created never changed their value a variable of a value type may only be changed by
Designing to that variable when we wish to only modify some portion of value class one attribute
Let's say we're compelled to reassign the whole object. So something rather static and I mean that conceptually not in the Java sense like that
Probably it's okay to document that because it's not going to change. It's going to be in variable
And also another definition. I would say a clear one in fact by Chad GPT with a value class
This helps create a standardized human readable representation of the object that can be used for input output and persistent human readable data
Objects. So if you look at this new variant of the phone number class
It is for all intents and purposes immutable. The reason is the class is final or the fields are final
Therefore it is going to be static. It'll not change
It is not mutable and if you look at the two string method in this case in the documentation
We have specified what format of the string representation would be and it's we've even given an example
And then if we go look at a client that only used the phone number class and run this code
By the way, you can see here an object of phone numbers created
The the two string method what it returns the representation
It maps or it corresponds to what's being specified in the documentation on the two string method itself
So for a class like this, which is a value class, it's okay to document the format
It's okay to document the format as Joshua block states
So just to keep reading what is what it stated here to put it a bit more formally
The advantage of specifying the format is that it serves as a standard ambiguous human readable representation of the object
This representation can be used for input and output and
Impassistant human readable data objects such as CSV files if you specify the format
It's usually a good idea to provide a matching static factory or constructor
So programmers can easily translate back and forth between the object and its string representation
So I forgot to show that part. That's a two string method here where in this case
Sorry, not the two string word that I kind of confused there the former string method where it's doing the opposite
It's instead of converting the object to a string. It's taking a string and converting that to an object
So you could give for example this phone number class a
string of
Prop of with the proper format and then that'll convert it to a phone number object now
We can take a look at how that works. So if you look at this
Bitter code here where the clients using the from string method this phone number string
Which is printed here in line number 82, which you'll see is
This is passed to the from string method that takes a string and then that converts that or passes it to a type of phone number
Now what's interesting here is if you do pass in something of a wrong format like just some mess like that
This is gonna throw an error
There you go, it'll throw an invalid format
invalid phone number error
Or an illegal argument exception
That's good because we won't if you want to convert this string to a phone number object
We want it to be of a certain type of a certain format and that's what this
Fromstring method does so the two string and the from string kind of interpolates
Interpolates, sorry interoperates. I was thinking of interpolates
In any case, it seems self-evident that the disadvantage of specifying the format is that it makes the code static again
Conceptually speaking because now when you have a format you can't make the from string method or the two string method that dynamic
Once you document it and you say that this is how this object has to be represented
But that's a trade-off a programmer has to make as Joshua block states
programmers will write code to pass the representation to
Generate it and to embed it into persistent data if you change the representation in a future release
You break their code and data and they will yowl
By choosing not to specify a format you preserve the flexibility to add information or improve the format in a subsequent release
Yowl is a funny word and in fact a lot of programmers tend to do that
but one way to hopefully not make programmers yowl as much is
Whether or not you decide to specify the format you should clearly document your intention
So it's always important to over communicate why you're doing what you're doing in your two string method
Which you'll see again in the example of Joshua block has provided
He's clearly documented what this two string method does and why he's doing so I propose format
of course another important point to make this code more usable is
Provide programmatic access to the information contained in the value returned by two string. So what does that mean?
It simply means
having really good
Gatters in your class so that the programmer won't have to pass through the string or the pass through the string return from the two string method
To use those values
As clients having such code where you don't provide good programmatic access to all the information all the fields in your class
Will create error-prone code if you've been coding for a while you'd know that something that's
Absolutely painful is passing strings and trying to derive certain values from a string
Especially given that it's highly dynamic and the code could change in the future or the format could change too
therefore
Using code or writing code that passes strings can create as I said
Highly volatile and error-prone code. So the simple way to solve that of course is as Joshua block states provide programmatic access
All these values can be returned or are returned in the two string method. However
For the individual values, it's important to have get getters
And if you look over here the client can then easily just use get error code get prefix get line number
Instead of passing through this this this string here returned by the two string method
And in fact Joshua block has put it the best way possible by failing to provide accesses
You turn the string format into a de facto API
Even if you've specified that it's subject to change because if the program has no way of getting these values with a getter
Then he or she will have to resort to using the two string method despite it being subject to change
Also when writing two string methods there are of course like all programming and perhaps all of life certain exceptions
There's no requirement to write or override the two string method of the
Object class in Java for static utility classes because you simply wouldn't be using the two string method because you don't create objects with a static class
For enum types because Java's one is perfect enough. It
represents all the values in an enum
Perfectly as to how it's implemented in Java
But however, you should still write them for abstract classes because simply put concrete classes are gonna use abstract classes
And they may use the two string method in the abstract class
So if you look at this abstract class called shape
I have overwritten the two string method and then we have some other concrete classes called class a square
That are over that are extending the abstract class and then if you run it
Whoops
You'll see that it's using the two string method inherited from the parent abstract class and then it's
Printing out the area for the circle and square
So this is the reason that it's important still to write two string methods for abstract classes
As he says here you should however write two string method in any abstract class whose subclasses share a common string
Representation for example the two string methods on most collection
Implementations are inherited from the abstract collections class. That's correct. And then of course like the previous methods
He does state that it's probably a good idea then writing this two string method on your own to use some kind of library or framework
That's already available in the open source community. So for example, he says here Google's open source auto-value facility
This cast in item 10
Will generate a two string method for you as will most IDEs
These methods are great for telling you the contents of each field, but aren't specialized to the meaning of the class
Interestingly when I read that I realized oh, actually maybe now you could just
Copy a code and put it in charge of PD and it'll obviously
Create a meaningful two string method it can do things that are way more advanced than that something as simple as this
It'll easily do so. Yeah, you essentially don't have ever really have a lot of oh
Spend a lot of time and mental energy writing two string methods anymore
You could just use the tools available out there. Anyway to finish it off just a book states to recap
Overwrite objects to string implementation in every instantiable class you write
Unless a superclass has already done so it makes classes much more pleasant to use and aids in debugging
The two string method should return a concise useful description of the object in an aesthetically pleasing format
That's it. Quite a simple straightforward item
Nonetheless, I wanted to go through it because it does help in writing good Java and well
Obstacle into code. Thank you for watching. I hope you got some value from that video. I'll see you in the next one. Cheers
