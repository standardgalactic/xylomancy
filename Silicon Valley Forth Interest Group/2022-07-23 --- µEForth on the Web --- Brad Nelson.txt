In the interest of time.
So,
Brett introduce yourself and on with the show.
All righty.
Is that show up for folks.
I'm seeing nothing.
No, no dissent. All right.
Today, I'm going to talk about micro e fourth on the web.
I'm actually going to adjust.
I'm not sure that I can see my slides or better yet.
Hide that entire.
All right.
So, micro e fourth is related to ESP 32 fourth, which you've heard me
talk a bunch about.
It's a version of it's a, they're really one in the same built from
the same source base ESP 32 fourth is the variant that targets ESP 32
and we branded it that way to make it clear to folks, but
it's an e fourth with a minimal amount of non fourth code in it,
which is a weird thing to say for a fourth that's created in C.
It tries to have minimal redundancy so that you don't end up having to
describe an op code once in its code and another time in some table
somewhere, it tries to make it possible to add one line of code to add an
op code to the system.
The kernel is compiled from inline fourth text.
So it start up it does the sort of inefficient thing of booting up the
system from fourth text, but it does this in service of the goal of
having as little non fourth as possible in the system.
And there's support for Windows Linux ESP 32 and finally after a long
delay the web originally when I had started working on this particular
fourth kernel, I had intended to have web support and a number of things
got in the way, not least of which is that I think that trying to do all
those things in one code base may not have been the best choice, but
I'll talk about that as we go through it.
Why the web?
The web is portable and powerful.
It offers a rich set of APIs that let you do all sorts of things from
access, the graphics of your device to local files, if there are
APIs for local files, there are APIs for even serial access now.
So you can do quite a lot on the web.
It's also possible on the web to go fast.
The days of JavaScript as sort of the only path to do a thing on the web
are over and due to things like WebAssembly, you can now in all
the major browsers run very performant code.
There was a precursor to WebAssembly called Asm.js, which I've made some use
of in this application which I'll talk about and has the virtue that in Chrome
at least when you have Asm.js it actually will get converted underneath
to WebAssembly.
I know this because I happen to have been the one that implemented the
version that lives in V8 now.
And it's similar but not exactly the same at least as I understand it in
Firefox and some of the other browsers.
The other great thing about the web is that it's easy to show people things.
I can hand out a URL and folks can go there and this relates to the second
point which is that people don't have to trust me.
If you download the version of Micro E4 for Windows, unfortunately you will
probably get some security alerts from running it and this is because I have
not signed the binaries on Windows and the antivirus systems that are out
there look at the small headers on a piece of fourth code and think that
this looks kind of questionable and the combination of a lack of a
signature and all of that means that it will warn you about running it.
And unfortunately this is a problem that versions of Win32 fourth face as
well.
In comparison the web I can just show you a URL and actually at the end of
this presentation I'll encourage you all to check out what I put up.
So the overall approach in Micro E4 is that I try to make each op code be
something that I can define in just a one or two lines of C code and the
goal is to have a reasonable list of op codes.
Originally I kind of focused on the minimal set similar to classic E4 but
especially if you look at the current version there's a number of additional
op codes that have been added.
I've added as many as I have partially because on ESP32 this has the
advantage that op codes implemented in C end up taking less of the RAM of the
system.
They can end up in flash memory and so more memory becomes available for the
running application.
After you define those op codes you're able to use a very small set of system
variables that sees in a structure and those same variables are
accessible from forth.
And then the key idea is that there are five core op codes that are non-trivial
that don't fit in one or two lines that are implemented in larger C functions.
These are op codes that could be built from the other op codes because the
other op codes are sort of fully general.
But they're done in high level C code because they allow the fun trick that
with those five you have enough of the fourth system in place that you can
boot the rest of the system from there on out with forth.
And so they're carefully chosen to be sort of the crucial building blocks to
have a full fourth system.
And they also sidestep another problem which is that if you have to assemble
loops you very quickly get into the problem that you now need an assembler
to bootstrap that part of your system.
So they both serve the purpose of being crucial to executing fourth code but
also they avoid needing to have any kind of mechanism for assembly.
And then the rest of the system is in fourth.
So there are some design choices that are in micro e-fourth that are not
fundamental to that model.
It happens to be indirect threaded just because that's what I did at the time.
Partially this is because it being a fourth implemented in C it needs some
type of op code that's explicitly stored and I found it more convenient to have
them live in a cell.
I didn't want them to be direct threaded and live in line.
There isn't really, there isn't a real architecture underneath when you're
targeting C you're targeting the sort of the C virtual machine and so it made
sense to me to do an indirect threaded fourth.
Also it makes words like C and does a little bit simpler.
One other thing is that a truly direct threaded fourth would have challenges
especially if I wanted to interoperate with machine code being done in C
being an indirect threaded fourth in the Linux version and in the ESP32 version
can use computer go-tos available in those compilers even though that isn't
actually a standard C feature it's present in the vast majority of C
compilers and that avoids there being any in the assembly language.
It's possible other models might go faster especially on the web.
I've wondered if it's the right model but that is what it is for now.
It uses unlimited stacks.
This is a place where I deviate from some of Dr. Ting's choices.
This is a mixed bag.
I did this because it was what was present in the originally fourth model.
One thing that it lacks especially on ESP32 that I sometimes regret especially
when the thing crashes is that by allowing the stack to be anywhere in memory
you can easily run them up with the stack.
Dr. Ting used a fun trick of using only a bite-sized pointer for the stacks
and having them wrap around which avoids the stack getting off the rails.
I support 32-bit floating point values and this is primarily
because this was a feature that ESP32 as I don't do 64-bit floats
because ESP32 doesn't have them in hardware.
Also it's with an eye to eventually I plan to get back to my deep learning
in fourth talk and hope to make use of micro E4 for that.
It tends to use avoid counted strings just because it happened to fall out that way.
So how does the system build up?
We'll go through the C version because as you'll see in a moment
the web version is actually converted from that version.
There's a small set of registers that you have to decide and let's talk about
what each of them are for.
There's an instruction pointer, there's a return stack pointer,
there's a data stack pointer and then I keep the top of stack in a register,
it uses all through a layer of abstraction.
There's a work register that as Next operates,
it first loads the address pointed to by the instruction pointer
into the work register and so that can be useful
for gluing things together for example and does.
There's a floating stack pointer
and then I ended up needing a single template float value.
I define and see a bunch of convenience operations that implement
some of the core stack manipulation.
These end up being reused in the opcodes rather than sort of have less readable C code there.
Some of the variable length ones are more useful for ESP32 forth
where some of the bindings for calling into libraries
make these useful.
They're not actually that useful in the kernel.
And then the outer structure of the thing is really built around the idea
that you want to run your forth
and then you might actually need to yield back to the system.
On ESP32, you need to yield back to the system
because some of the libraries assume that you will return control back to the thing that called in.
And on the web, this is even more important because the web has a sort of an event loop
that if you don't return to a number of things, get gummed up.
And so for that reason, it's important to have the forth be structured such that you can have a yield word
that parks the interpreter and yields back out to the system.
When you enter is sitting on the return stack, you unpark things which work sort of like this
where you pull out the instruction pointer, the stack pointer, the floating pointer, the stack pointer
and then unbox the top of the stack.
And then if you need to yield or when you do eventually need to yield, you park everything
so that you only have to hold on to that single return stack value to find your place back.
To be able to define the op codes in a single line, I use a C trick called an X macro.
This lets you define a list of a list inside of a series of macro calls and to encode a table of information.
You can then reuse portions of the list in multiple different places.
So the way this works is that I can define an op code all on one line by describing the string that is its name and forth.
I have to give it a C name because it's useful to be able to have it for defining lists of op code constants and things like that.
I wish I didn't have to do this because it's actually redundant, but I have not found a way around that.
And then there is a, and then there's the code in C that implements the op code.
And then I can use that a list of op codes described in that way.
For example, if platform op code lists were described that way, I can populate an enumerated type, holding out just the op code name and prefixing it with a name if I need to.
Or later in this is this code is actually from the Windows version.
When I want to switch and dispatch in the in the core of the interpreter, I can just describe my next operation, and then have all the op codes be played out and I end up not needing to list them each in each of these places because I have that shared list.
And then for convenience, I'm able to define a set of alternate short names that let me define just the name and the code for a word.
The reason for this distinction is that some words are valid.
And so to make things a little more pithy, I'll use this why label to define words like and that happen to be valid C identifiers, but for words like C at where it would not be a valid C identifier, I have to make up some C name for it.
And then I have the code in one line.
If I defined a dupe as a macro, it causes problems and so I end up having to treat dupe, especially, but it's very, very handy to have a dupe macro if I were really clever I suppose I'd come up with a different name for the dupe macro and used in this way.
But anyways, in that way I'm able to describe all of the op codes that I need to define the core of the fourth.
And I do have some other variations. If you go looking at the source code for micro before there's a little additional complexity I'm skipping over because of vocabularies I ended up originally it was just these x and y macros.
But when I, and I implemented vocabularies purely in high level for as I got, got along in ESP 32 fourth it became useful to have more of the vocabulary mechanism live in the C code and so there's.
I transitioned some of that into the C code because it was convenient to very sorry rather it more efficient for ESP 33 fourth more of it ends up in flash memory.
Anyways, once you've defined your op codes.
All you need to do forth is, is, is this core loop you your quit is just a forever loop that evaluates a single word.
And now, of course, the challenge is how do you define that evaluate one operation so here are those five magic words I was talking about.
They have a dependency each of them on some of the system variables, and so that on the right or the system variables on the left of the, the five magic words the first of these is a word to parse a number.
It takes a string and attempts to parse it into a legitimate number for that it needs to know the base.
This is, as you'll see in a moment relatively straightforward to do in high level C code, and avoids having to describe that using using for thought.
This parses and finds boundaries to the next word and updates the, the end pointer and so on reading from the translation input block.
Creation of a word is a little bit more complex than one line line just because you have to hook things into place and build up the dictionary structure.
And then finding a word similarly, because it involves string comparisons and so on. It's, it's nice to have that as a high level word, and then those four words are used in to implement the value at one, based on the current state.
If a word is not found, they call into back into a deferred word that's stored in, in not found, and that initially is drop, but later on turns into throw, which, which lets me avoid needing to have throw there, and the system is booting.
So I'm not going to show each of them but I'll show the parse word and the parse word relies on this little separate function which could be folded in but a word for matching.
It's deciding if two characters are a match, and then it walks down and finds the boundary to for the next word.
Once you have those five and that evaluation loop which please check out details in the source space, you can then boot from a string.
You can end up you can set the trend that the the tip to point to a gigantic C string that contains all of your fourth bootstrapping code and everything else gets it's built up from there the first thing that gets defined as comments because initially comments
are supported and you need comments to be able to use comments and the rest of the code.
And I won't be labored that but it's it's it's it's a fascinating sort of ordering in which you can you can do things to bring the world up. Well, how do we bring this to the web.
Well, the simple answer is I convert this to as in jazz now there there is a set of tooling that exists to do this a great tool by a person I actually know, named Alonza Kai, called inscription.
This is a file of tools and involves LLVM and is is a lot of stuff, especially for my my small program and so I tried something different I hand converted the five core words to to as in jazz because they're just sort of special enough that.
But there's only, you know, they're only similar to what you saw with with parser they're basically each a screen full.
They come up with a set of automation to convert the op codes and we'll talk about that in a sec. So, as I'm jazz I should talk about it for a second. It's definitely the best hack I've ever seen.
It's the idea of embedding C code in JavaScript, which seems counterintuitive and it's does this by representing see semantics in inside of JavaScript.
Inside of chrome at least this gets converted to WebAssembly which is yet another format which I won't talk about today, which then gets converted actually into into real assembly and runs it with, you know, near native speeds.
The cleverness of the hack of asmjs is that JavaScript represents values with data types that are not strong but rather, rather weak and so they are able to.
They have a variable it can hold a string or can hold an integer can hold a floating point value. In fact, actually numbers in JavaScript are always double precision floating point values whether you sort of want them to be or not.
And in it with the, the trick of asmjs is that you use a sort of redundant syntax where you incessantly or things with zero for example to indicate that something is a 32 bit integer, or you use this operation f round which rounds to the precision of a 32 bit
floating point value to indicate that something is 32 bit floating point value and so in this way, you're able to override the semantics of JavaScript such that you're making it clear throughout your code that that everything that a given variable is a is a 32 bit floating
point value, for example, so it looks wasteful, but to a JavaScript interpreter that knows how to decode it, it can be converted into efficient code.
It is largely been superseded by WebAssembly but for the purpose of generating a thing by hand it's a little bit easier to generate by hand because it's human readable text and doesn't require additional tooling so that's what I ended up doing.
So here's that same parse code, re expressed in asmjs, the memory accesses are relative to some arrays that are contained the entire memory map, and a similar thing was done to each of these.
The rest of the system is blue and I noticed there's a question in the chat so I'll maybe take that. Oh, he's got a reference never mind.
So the system could in C could be built up with includes, but I actually do it with a combination of make files and some scripts for gluing it together and the reason that I do this is that for the ESP 32 version of my career for it.
I have it in one gigantic, I know file, and I didn't want the sort of side effects that you get from using the C preprocessor to include a file. And so I structured using these scripts that ends up being useful because I can then use those same scripts to do some
replacement patterns to try to convert all of the op codes. And so I do something. I do something like this I go through and have a series of replacements and some of these these are actually all string replacements but a few of them are regular expressions, where I replace C code with
the equivalent as mjs JavaScript code. And the motivation here is that I hope to be able to avoid needing to update as mjs code when I change the C code. Unfortunately, as I've re learned the lesson it's a classic lesson that a sort of a badly implemented compiler
substitution is not a good idea. 140 lines of replacements end up being required to handle all the op codes I have. And the base op codes are there's 150 lines of them so it's not much of a win there are some additional op codes that are added to support the
efficiency of bringing more of the system inside so it is a net win in total, but not by much of a margin and so probably this is something I should revisit probably would be worth just maintaining to two separate descriptions of the op codes.
I better do a proper compiler or use or use in scripting.
Talking to the outside so on the web of course I have one more problem I've got my great interpreter it runs but now how do I talk to the outside world. Well, I have a list of I have only a single op code that I use for this, I called it call confusingly and call calls into JavaScript, passing in the fourth stack as a parameter, which
lets JavaScript decide how to interpret this. And then I start out with a table of JavaScript objects that contain what I'll term system calls. And so the first of these is a thing called set eval, which takes a three, three values it takes the
starting pointer of a string in the fourth memory space, a length of that string, and then the index of a slot in this objects array in JavaScript, that I want to populate with the result of evalling that piece of JavaScript.
So this lets me take a piece of JavaScript code in a string and forth, hand it over to to JavaScript, evaluate it and store it in this array. And when I make a call, I call into a particular index my system call number in this table and so this lets me from fourth, define
and pass strings into JavaScript to define the remaining off codes. And so, for example, this is the implementation of key question mark where I have a JavaScript function that interacts with sort of the outside world and JavaScript APIs to to cope with trying to check the input buffer if
there's a key. I have this little shortcut here for read line to modes of operation which I won't talk about at length but there's a way to run a JavaScript interpreter at the command line and I also support that.
So I'm able to create this this system call binding all in fourth code and and hook things up.
And that's that I've done that for sort of terminal input and output and even a little bit of graphics as we'll see in a moment, and to use the interpreter. It's all in one giant JavaScript file.
So if you want to embed the interpreter somewhere you can specify a div tag with a particular ID and it will inject the interpreter there if it doesn't find that tag it will just happily embedded at the bottom of the page.
There are some caveats star slash mod as you'll see I'll show you in a second is a lie I have not implemented it properly. It's on my list of things to fix but I haven't done it yet.
I've got that sec. The asmjs heap size is fixed I think I picked maybe 16 megabytes of memories a little large but it's a can value which is not ideal. I use WebAssembly WebAssembly does supported dynamic key.
The terminal is too slow and it's just because I haven't had time to optimize it I'm using the JavaScript that I'm using to update it is less than ideal. And I lied actually.
The floating point support there's actually a sixth core opcode that's required that the conversion to from a string to a floating point value. It's not strictly required if you were if you wanted to strip out the floating point support but it is required.
It is used in the current system.
Star slash mod is is implemented with this piece of JavaScript code right now.
And this is not right because what it's doing is it's, you know, star slash mod right should take a times be and then divide by C and return the, the division results and the modular result.
It's supposed to extend it to double word size, but unfortunately there is, although there is a, there is actually a brand new 64 bit, actually arbitrary precision type in JavaScript.
I'm not confident in the browser support to make use of it here I'll actually have to check up on that before I fix this problem so for now, I'm converting everything to 64 bit floating point and doing the division and so you can end up with some in precision.
So, the right way to fix this is either to use that arbitrary precision type, or I will probably need to eventually, or an alternative is you can you can sort of do the bit shifts and tricks to do divide correctly.
There are many happy things of this implementation one is that I was able to quickly throw in a little bit of graphics not quite as much.
I hope to be able to run the heart game I demoed many times back but I'm not quite there yet, but I got some of the pieces. And the other great thing is that this implementation is likely to be reasonably fast and be able to do some interesting
graphics because the memory space is something that you can pass over to WebGL and do fun things. So with that I'm going to switch over and do a quick demo.
Maybe you can find this if you go to the easiest way to get there is just e4th.appspot.com. And if you click to the right on web, it will bring up the web version of the system.
And it has the same underlying mechanisms as on the other platforms. I'll do vlist list at the dictionary here.
So all the plumbing is there so if I if I do, if I define a word. Let's say I do test, and I'll do for I print next turn, I can print things out. I can do see on that word, and it will attempt to decompile it.
And the same is true of all the words in the system that are defined in higher level words so for example I've got this word fill 32 which is part of the system and you can decode and see the inner op goods for it.
As I mentioned there's there's a little bit of support for graphics. I took a little inspiration from from the Apple to Apple to and have a word set that GR will bring you into a mode where there's graphics above and you continue to have the terminal down below.
You can set the color. Let's say we do a red, red is in the, the value color, and then I can draw a box. The coordinate system by default starts at 1000 by 1000.
You can use the words to redefine it which I'll endeavor to document on the website at some point soon. But you can, for example, draw a box.
And there's, you can, you can disable the visibility of the show text, you can hide the text and get to sort of a full graphic screen.
You can get the scrolling on the side there to go away. Actually here. Well, that page. I'm going to re enable.
See what I'm typing.
One show.
And you can go back to text mode with just the word text.
Likely there will be more right now box is the only word that draws anything.
This this fourth has vocabularies and the works like, like the others.
If you go into the internals vocabulary you can see some of the stuffing so for example, there's that s float word that we were talking about earlier.
You can examine all sort of all of the inside so if you examine, you can even see the insides of C. And if you want to see, see the insides of the words that are in there, you can go examine them.
We can very briefly look at the, if you go into the JavaScript console you can see the source code you can see the source code by the way on GitHub as well but to give you an idea the webpage here contains very little to bootstrap things.
It's actually all plumbing for the menu at the top, but to actually embed it is just these two lines at the bottom. The interpreter itself lives down here.
And as you see it, it starts out with a few constants and then the very first thing is actually just this gigantic fourth string, which contains the, all of the bootstrapping code some of this of course looks like JavaScript because it's JavaScript
that is actually embedded in this multi line string that I've defined in fourth to be passed over so sort of mixing JavaScript and, and forth, and then way down here you get to the point where you actually see the insides and the.
This is the result of having compiled the C, and then converted and so there is a or sorry compiled in C extracted the set of op codes. And so things are a little bit more splayed out than they are in the C version.
And there's a few helper words that are one line macros that are multi line in fourth but you'll see that, you know, you've got words like create here, and there is there are some, there's here's parse, here's convert which is that s convert and so on.
And then, most of the bottom of this is actually just a table to build up the set of words, and, and then some initialization code, and you know and here's the here's the op codes splayed out in asmjs in a gigantic switch state.
In any event that there it is.
Check it out I'll be trying to bring it up to parody and support things like color and the terminal and stuff like that.
In future version of revisions. Are there any questions.
Very cool.
Check it out.
There I was operating in zombie mode.
The past three or four days unable to get the agenda posted.
When, fortuitously,
a talk appeared in the queue as if by magic.
Indirect credit code profiler.
So, how long did you estimate your talk to the last.
I think last time it took me half an hour.
I expect to be a little bit faster this time.
Okay, if you can get the ball across the plate in 20 minutes that will work out nicely.
What we're going to do is bump the doctor takes stuff you all have access to it on our YouTube channel. Does anybody not know where the YouTube channel that cares where the YouTube channel is.
All right, that's good. Good reaction.
Okay, so on with the show.
