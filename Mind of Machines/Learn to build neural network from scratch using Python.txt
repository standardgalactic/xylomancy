Welcome to Minds of Machine.
Today we are diving into fascinating world of neural networks where we will construct
a basic structure of neural networks using Python and then we will go to even complex
structures of with three layers of neural network using numpad.
So by laying the foundation for deeper learnings, we are focusing on the core architectures.
So let's get started.
So first part we will build a single structure of neural network in order to understand the
basic of neural network.
First we define the input for the neural network.
In our case we define the number format it can be anything like an image or a long text.
As you can see we have defined an input in which it is in the form of array 1, 2, 3 and
2.5.
There are four values which we are passing to a neural network.
Then we are defining the weight for each neurons.
In a computation sense weights are numerical parameters that define how much influence
one neuron has on another.
Each connection between neurons in the network is assigned a weight.
A primary use of the weight is in the learning process.
When a neural network is trained on a data set, it will gradually adjust these based
on the input data it receives and the error in the prediction.
This process often done through algorithms like back propagation or using optimization
technique like gradient descent is how the network learns.
So in our case we will define three weights.
Weight 1 which has like four nodes, weight 2 which has four values because the shape
of the input and the weight should be equal otherwise we will get an error and then weight
3.
So there are three weights.
Next we are going to define the bases for each neuron.
So bases are additional parameters in neural network model alongside weights in a mathematical
sense if you consider neurons output as a function of its input the base is additional
added constant on an offset to the output of the neurons activation function.
For example if the dish tastes too bland the chef might add a pinch of salt.
Similarly if neural networks prediction are constantly off in certain direction adding
or adjusting the bias can help shift its prediction closer to the accurate value.
So as we have defined three weights here in similar case we will define three biases.
Bias 1 as 2, bias 2 as 3 and bias 3 as 0.5.
Now we will define the core function of each neuron for that we will loop each input and
multiply with each weight and sum with bias.
So as you can see this is a basic one node how of a neural network which works which
helps us to give the prediction.
So we are defining a function called as calculate output in which we are passing three input
parameters as inputs weight and biases and then we are declaring the output as 0 which
will be the actual result of how whenever an input is given how the neuron will predict
the answer.
Since there are like four inputs which we have given so we are looping it through the
length of the input and then now output is equals to input multiplied by weight and then
once we get the output against each weight it will finally add it with the bias.
So this is the actual output you get from one node of the neuron.
And this way we loop it for all the inputs so that will give you a single value.
Now we have to calculate the output for each neuron as I mentioned before.
So we will call the calculate output function which is first output against weight 1 then
the input output 2 against weight 2 which is the second node of the neuron and weight
output 3 is the output of the third node of the neural network.
So in this way this is just we are creating a single layer or coding a single layer of
the neural network and here aggregating the output is basically putting all three outputs
in one single array and then we see the result of by printing it by printing the output.
As print layer output and declaring the output variable.
Now we will run our code as python 3 neural network dot py which is my file name and you
can see the layer output as 4.8 1.21 and 2.3.85.
Now in this image you can see the input you can consider as the numbers which we are given
and this layer at those nodes like the weight 1, weight 2, weight 3.
In this image there are 4 weights but in code I have defined only 3 weights so this input
is multiplied against every weight and then it is actually summed by the buyers and then
it finally gives you the way answer.
So this outputs are basically in the form of numbers because computers usually understand
the numbers but the input can be an image or a text or any form of data and this neurons
will apply those formulas on those data and give us the prediction that it can be hard
dog or this kind of dog or that kind of dog.
So here the input is the dog which we are passing through the neural network and it
gives us two prediction based on the formula or the core function which we have used in
a code.
Now let's create in the second part to build a structure of neural networks using numpy.
So in that we just did by a single layer in the next one we might will create multiple
layers of neural networks using numpy because it gives you faster performance when you use
for follow the performance fault so that is basically used for our understanding but using
numpy gives you better results.
So first we are importing the numpy a library if it is not there then try to download in
your terminal otherwise it will throw an error.
Then we define the class as neural networks layer.
Then we define an initialization function in which we define the weights and biases
for each layer.
Self dot weight is equals to weight in this way we define the weight.
Next one is initializing the biases for the layer which is the same way as weight is declared
as these two are the important parameters of the neural network.
Now we will define the forward function which is basically the actual calculation which
each node does inside this function we just take the inputs.
So here we are basically using the compute dot product of weight and input which means
and then adding the bias so which is the main function of each node which neuron does so
and the dot product is one of the function which numpy gives which makes our performance
faster so instead of using the basic functionality which is given we are using numpy's np dot
dot which automatically does is the multiplies the weight and input and then adds the biases
finally and will return the output.
So here we have declared the main function of our neural network.
Next we will define the inputs to our neural network layer.
First we are defining the same input we are example which we have used in the previous
one 1 2 3 2.5 then we define the weights and biases for the layer.
We declare the weight for the first neuron as 0.2, 0.8, 0.5, 1.0 and then we declare the
same for second neuron as I showed in the previous one how we did.
But here we will declare it in the form of matrix which might be called as vectors.
Now we define the basis for each neuron so as we have 3 neurons we will have 3 bases
as 2 3 and 0.5.
Since we have declared the class so now we will create instances of the neural network.
So in this we will instantiate the layer with specified weights and biases.
So we will just pass the weights and biases and call the neural network with the values
basically initializing the values of weights and biases which we declared.
Now we will pass the inputs to the forward function or it will use the weights and biases
which we have passed through the layer function.
Now we will calculate the output of the layers for the given input.
And now we will print the output as layer output and you can see by finally running
python3neuralnetwork.py we can see the output.
So in this way numpy gives you a better performance and is better for performance and faster execution
of calculation.
For loops are usually not considered while creating a complex neural network because
it will hamper the performance and if you compare the time taken by numpy is way lesser
than compared to for loops.
So in this tutorial I have shown you how you can create a single layer of neural network
using just basic for loops or numpy.
Usually numpy is suggested to use for larger layers with single layers it won't affect
the performance but with multi layers it's better to use numpy.
So this is the end of the tutorial.
Thanks for watching.
Stay curious and keep exploring with Minds of Machine.
