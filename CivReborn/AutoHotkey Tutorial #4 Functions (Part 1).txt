Hey, how's it going? This is Helbent and welcome to tutorial number 4 from my AutoHotKey tutorial series.
In this one we're going to be looking at functions and how we use them.
First we'll start off by saying that what a function is.
So basically a function is going to be a mini program within our program.
The way this becomes useful is let's say we have a block of 10 commands.
And we're going to be using these same 10 commands or the same bit of code over and over again throughout the course of our program.
Now we could write in our program those 10 lines every time we need it.
And if it's 100 times we can write it into our program 100 times.
But what we're going to end up with is a script or a program that's going to be 10 miles long.
And it's going to be impossible for us to actually read our program.
So instead what we can do is we can create a function that's going to contain those 10 bits of code.
And every time we actually need to use those instead of writing the 10 lines out,
we can just call to that function and have it execute and then go back into our main program again.
So that's the main use for our functions.
Another way that functions are useful is with conserving memory.
So your computer, even if it has terabytes of RAM, it is a finite amount.
And eventually there will come a point where you don't have any memory available anymore.
So by using functions what we can do is we'll end up using local variables which take up an address of memory
or take up some of the memory of your computer.
We can use local variables that once they're done being used,
it'll actually free up that memory so something else can use it.
So let's say if we have one variable that we know that we have to have.
We have to use this variable throughout the whole run of our program
or a series of variables that we know that we have to use throughout the running of our program.
They're automatically, we know that they need, permanently they need that memory.
But we might need to manipulate those variables in ways that the manipulations that we do to it,
so let's say we can multiply it with other things.
So let's say pi for example.
So in a function we can assign a variable, a local variable, the value of pi,
pass in our variable to that, multiply our variable with pi,
and then leave the function and the value, the space and memory that the variable that's holding the value of pi,
it can be freed up for something else to take its place until it's time for us to use that pi variable again.
It'll get re-initialized, it'll take up that memory again until it's done being used
and then it'll free it up again, right?
So that's one of the main reasons also why we need functions.
So let's jump into it.
In order to do this tutorial I suggest you have a fair knowledge of variables
or at least some working knowledge of variables.
So the first thing we're going to do is we're going to create a function.
Now creating a function is very much like creating a label or creating a variable.
So when we name it we want it to be something that makes sense and can't have any spaces in its name.
So we can use tons and tons of, we can use lots of words in its name
and in fact that's what I'm going to do.
I'm just going to call my function my first function.
Now this is a case where it's not a very good name for a function.
For our purposes it works okay but for the most part you don't want to name it something like this
unless this really is, it makes sense for some reason.
So you want to name it something that makes sense so that way when you're going through your program
or when you have to make calls to it and I'll show you that in a minute how to call it up
you don't have to go searching for the name.
So if you have a name that really makes sense and that you're able to remember it
every single time you have to make a call to it
you don't have to go digging around looking it up because making calls to functions
it does get a little bit repetitive and it gets a little bit tricky
if you don't know what the name of it is.
So you'll have to go a hundred lines down in your code
find out what the name of the function is and then call it up.
But like I said for our purposes this is fine and when I'm doing these tutorials
I don't want to spend the time trying to come up think about these kind of things
so it's kind of a case of do as I'm saying that what you should do
rather than do what I'm doing.
So do what I say not what I do.
Okay so now that we have a name of our function we have an open and close parentheses
and then we're going to drop down and create an open and close French brace.
Now so this is our function and anything that we want it to do
we'll put inside of here and it can be literally hundreds of lines of code
it could be thousands of lines of code or it could be two lines of code
it could be one line of code it could be no code at all.
Now because it's easy the easiest way for me to show you what is going on
with these kind of programs all I'm going to do is I'm going to use a message box.
Now chances are when you're creating your functions
obviously a message box isn't going to do
but for the teaching of this it's easiest for me to show you with a message box
so you can actually see where in our program what's going on in our program.
So I'm just going to create a message box and it's going to say
I am in the function.
Okay so we have our function and if we were to actually run our program right now
it's not actually going to do anything.
And order for this function to actually work in our main program
or our main script what we need to actually do is call it
and the way we call it is we just use its name with the open and close parentheses
and there's more to it but we'll get into that in a few minutes
but just basically we're going to use its name
and open and close and then that's it.
So let's say we have a whole bunch of code up here
we have a bunch of lines that are doing different things
and then we need our function, we call our function
and then below that we can go back to doing our normal program.
Now how this works is as soon as it encounters this
it's going to jump inside of the properties or inside of our function
and start executing the lines of code that is in it.
Once it gets to a return or an exit or this close print
French brace then it's going to go back into our main program
and continue on until it encounters an exit or a return.
Okay so here we go we have our first function
we've created it, we've made a call to it, we save our program
and we run it and there we go.
We have executed our first function.
Now let's look at, I'm going to expand on this just a little bit
I'm going to create a message box here.
Message box.
Okay so as soon as our script starts it's going to pop up a message box
that says that we're in the main program.
Then I'm going to pass it to the function, it's going to execute that
and then I'm going to create another message box that says
and
you know I'm going to do one more function so to save time I'm just going to copy this
paste it in
and I'm going to alter a few things
and in this case what I'm going to do is I'm actually going to
rather than putting my second function rather than calling it
up here rather than doing that what I'm actually going to do is show you
that you can make calls to other functions within functions.
So once it goes into the first function it's going to pop up the message box
and then it's going to go make a call to the second function
it's going to go and execute the properties of the second function
and then finally it's going to go back into our main program.
Alright I'm going to go ahead and save it.
Okay so here we go it says it is in the main program.
Next it's going to jump into our first function and give us our message box.
So it's now in the first function
and now it's in the second function
and now it's back in the main program.
So as you can see you can make calls to other functions within functions.
Okay I hope that's clear and we will move on.
So I'm just going to comment out actually you know what
I haven't been saving my tutorial so I'm going to get rid of this.
Okay next what we have is passing variables into a function.
So like I said one of the main reasons why you're going to be using a function
is to actually do operations in it on variables so in this case
we're going to create a variable and like I said I'm not very good at naming
things while I'm doing these tutorials so I just usually pick the first thing
that pops to my head and I run with it rather than sitting here
for a minute or two trying to think of something because I end up
instead of thinking of what I should be thinking about I think about other things.
Now I need to create a function
and in this case I'm just going to call it
function one just to save a little bit of time.
Okay now when I had gone over the
variable tutorial I had told you about scope and how things are local
or global.
This is a case where
we're going to have two local variables here basically and
so if I was to use
this name inside of this function it would actually
be two different variables even though they share
the same name what they're doing is they're pointing to
a place in the memory so let's say that this computer screen is my
computer's memory this variable name might point
to this spot up here for those
actually here so it might point to this location in my memory
and say that the value that's stored there is hell bent.
Right so at this location
in memory it says that name points to this location
and it says it equals hell bent. If I was to use name in here though
it might point to another location and say that it means
something else so even though I'm using the same variable
I can use name in here and here they point to different
places that hold different values even if they held
the same value even if this location held hell bent as well
they're still pointing to two different locations because even though they have the same name
they're not the same variable.
Now usually it's a good idea not to name them the same thing
but you could if you needed to.
The first thing we're going to do is we're going to say that this function requires
a variable to be passed into it and we're just going to call that variable
x and then what we're going to do inside of our
function is we're just going to pop up a message box because once again
it's the easiest way for you to see what's going on.
But like I said before it could be hundreds
of lines of code, it could have passes to other functions and those
functions could pass to other functions and so on and so forth.
Next what we need
is we need to have a call to that function
so
1 and then we're going to pass
the value, we're going to pass our variable name into it.
Okay
let me see.
Okay I think we're good.
So here's how we pass a value into a function.
When we create our function we say that we were expecting a variable to be passed
into it and then when we make our call to it we place
a variable that we are going to be passing to it.
Okay
so here we go, we've displayed the value of x
and to go back a bit to show you what I was talking about
let's assume that we weren't passing any variables
into it. If I was to
go and try to print out the value of name
because this is not, because this function, everything in this function
can't actually see the contents of that
variable, this is not going to have any value
because this is actually a different variable that doesn't have any value
and we can demonstrate that right there.
So as we can see name has no value because it doesn't know
what that is. These are two different variables.
Okay so like I said that is
how we pass a value
into a function.
We can pass as many values as we want. So we have name right now
and what I will do quickly is I'll create
a couple new variables.
Okay
and all we have to do is put
a comma and then the next variable we're going to be passing
until we get to our last variable
and likewise we have to do with this. So let's do
this. Okay so it doesn't matter what these names are because
they're not really related to that and we'll just pop up
their values. So
x, y, z
and s. Okay so this is how we pass
multiple values into a function
and there we go.
Okay
easy stuff moving on.
You know what I'm going to
okay. Next is returning a value
from a function
and yeah I got enough time for this.
I'm right at that border point where this video is going to get a little
bit long but if I put this off to the next video then the next video is going to
be really long. Okay returning a value. So it's
basically the same way that we do the passing. So let's just
create some variables.
And then
we'll create our function
and we're going to be passing two variables to it so we know that.
And we will use
y and we'll
do a mathematical operation. But first let's look at how
we get our return. So now that we know that we want
something back what we're going to do is we're going to say
that the variable that we want to store
the return value. So we're going to do a mathematical operation in here
and we're going to say up here that the value that we get from that
is going to get stored into a variable. So just like how we do this
here or we declare our variables like that we're going to declare that
c equals
whatever we get back the return value from our function.
And we're going to pass it
a and b.
So c is going to equal whatever we get returned back from when we pass
these values into our function. Now what we're going to do is
we're going to say in our function, now we can do a lot of different things in here.
It doesn't have to be only what we're going to be doing right now.
There's different ways that we could do it. We could have our math done
in a whole different way. But because
we only have one line that we need in here that's all we're going to do.
But in your program it might not be so
easy as just returning an x plus a y or
so on and so forth. But this is
we're going right to the punch. This is what we were expecting
it to do. So we're going to say return and then
what do we want? We want x. Do we want x times y?
Do we want x minus y?
Do we want x plus y?
Do we want x plus y times pi to the
square root of whatever?
There's multiple things that we can do in here. This is just a very simple example
and you can play around with this to see what
you can do with it. So here we go. We've passed
we've made the call to our function and we're going to get a return value
and we're going to assign that to the variable c.
And I guess we need a message box to actually
display that.
Message box and we're just going to print out our c.
Okay, so
there we go. We've passed one and two
into our function and then we've added them together and we output three.
Likewise, we can change that to
multiply and I guess we're going to get two this time.
Okay.
We can also do, like I said, we can also do other
things.
Let me get some bed mass
in here.
Okay.
Okay.
Okay.
And there we go.
Okay, so
that's it for this part. Come back and we'll finish. We'll go to
passing by reference and
test how you can use this for testing and a bunch of other little
tricks that'll make your programming experience much easier,
much less problems.
