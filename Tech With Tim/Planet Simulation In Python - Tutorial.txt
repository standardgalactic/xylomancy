Hello, everybody, and welcome to another YouTube video. In this video, I am going to
be showing you how to make a planet simulation using Python. Now, the goal of this is going
to be to simulate the orbits of different planets around the sun. We're going to use
a real astronomical value. So the real mass of the sun, the real distance from earth to
the sun, all of that type of stuff. And we're going to apply the force of gravity between
all of the different planets. So we actually get an accurate elliptical orbit. Now here
it does look like the orbit is circular. It is not. You can see I'm actually writing
the distance of the planet to the sun on each planet. So it's changing as we go around
the orbit. Well, this is really cool. We're kind of mixing a bit of physics with Python
and looking at a cool simulation. Now, I will mention that this tutorial is not designed
for complete beginners. You should have some knowledge of Python. However, if you don't
know anything about physics, don't worry, I will teach you the different physics we
need to know to actually, I guess, perform this simulation. It's not very complicated.
I myself am not a physics major or a physics guy, and I was able to figure it out pretty
quickly. Anyways, with that said, let's go ahead and get into the code after a quick
word from our sponsor. Thanks to backtrace for sponsoring this video. Backtrace provides
application monitoring as well as error and crash reporting for games. We've all been
there excited to launch a brand new video game just to be tormented by crashes, bugs
and an overall bad user experience. Backtrace wants to help limit that by providing a platform
that gives game developers the best error and crash reporting with the most complete
and helpful information. Backtrace works with any platform, any engine and at any scale
and provides 24 seven monitoring so you can retain more players and get better ratings.
Helps you fix issues fast by providing accurate call stacks, regression detection, querying
and analytics and integration with Microsoft teams, Discord, Slack and more. You can get
started with backtrace today and manage up to 25,000 monthly errors with one month retention
and 10 gigabytes of storage completely for free. Check it out from the link in the description.
And thanks again to backtrace for sponsoring this video. All right, so let's go ahead
and get started. Now, I will mention that right here, I'm not simulating every single
planet. You can easily adjust the simulation to add as many planets as you would like.
You can even put something like stars or satellites, whatever you can put any of that here because
of the way we're going to set this up. However, the planets I'm simulating right now are just
the four closest to the sun. So we have earth, Mars, Venus and Mercury. We're just doing
that so that we get a nice visual and we can see everything nice and large. If you were
to simulate the planets that are much further away from the sun, then you're going to see
all of these plants kind of smushed really close to the sun. And then the huge orbits
around the sun from the larger planets, if that makes sense. And the planets that are
much further away. So this is just a nice visualization. Again, you can adjust this
however you like, and I'll show you how to do that. So with that said, let's dive into
this. I'm going to close this and just open up a new window here and we'll start writing
some code. Now, the first thing we do actually need to do is install Pi game. So if you don't
already have a Pi game installed, then just open up your terminal or command prompt, depending
on your operating system and type in the following command, PIP install Pi game. That
doesn't work for you. Try PIP three install Pi game. If that doesn't work for you, try
Python hyphen M and then PIP install Pi game. If that doesn't work, try Python three hyphen
M PIP install Pi game. And if none of those commands work, I have two videos that I'll
put on the screen that show you how to fix your PIP commit. Anyways, I'm going to assume
that you have Pi game installed. This is just a 2D graphics library that we're going to
use for the simulation. If you don't know Pi game, don't worry, we're going to use very
limited features from it. And I'll talk about how all of them work. So the first thing I'm
going to do here is just import Pi game. And then I'm going to say Pi game dot a knit just
to initialize the module. I'm also going to import the math module because we're going
to have to use that in this code. Okay. So continuing, since I'm using Pi game, the first
thing I want to do is set up my Pi game window. Now to do this, we need to pick a width and
height in pixels for our window. So I'm going to say the width comma the height in all
capitals, because this is a constant is going to be 800 800 can make this whatever width
and height you want, but I recommend you make it square. And then we're going to set up
a window. So I'm going to say when is equal to Pi game dot display dot set underscore
mode. Now this is just going to take in the coordinates for the size of our window. So
we're going to pass as a tuple here, the width and the height. This is going to give us what's
known as a Pi game surface. We're going to call it the window because it's the main window
that we're going to draw onto. And we need to have access to this surface to be able
to put something on the screen and actually see something moving around. Now what I'm
also going to do is just set a caption for this window. So Pi game dot display dot set
underscore caption. Now the caption is just going to be kind of the title of the window.
I'll show you what it looks like in one second. And for this, we'll just do planet simulation.
Okay. Perfect. So now that we have this, what I want to do is create something known as
the Pi game event loop. Now this is essentially an infinite loop that's going to run the entire
time that the simulation is going. Whenever you're working with some type of game, you
need some type of loop that's constantly running. They can keep track of the different events
that are occurring. In this case, the only event is going to be moving the different
planets, but we need to have some type of loops that the window doesn't just open and
instantly close. We need something keeping the program running. So I'm going to make
a function here and I'm going to call this main and inside of here, I'm going to make
a variable. I'm going to say run is equal to true. Then we're going to say, well, run
like this, and this loop will run while this variable run is true. Now inside of here,
I'm going to get the different events that are occurring in Pi game. So I'm going to
say for event in Pi game dot event dot get. Now this is going to give us a list of all
of the different events that occur. So key presses, mouse movements, whatever. Now when
you're coding a more complex game, you're going to handle those different events. However,
the only event that we want to handle is when the user presses the X button to close
the window. Now that event is the following. I'm going to say if event dot type is equal
to Pi game dot quit in all capitals, then all we're going to do is say run is equal
to false. And then outside of our wall loop, we're going to say Pi game dot quit. So this
is literally all we need for the event loop, at least for right now. What's going to happen
is we're going to continually run. We're going to get all of the events. If one of the events
that occurred was we hit the X button in the window, then we are going to close the
window by making run equal to false. Since that's going to exit our loop, we're going
to quit Pi game and then we'll be done. Perfect. So all we need to do here is just call this
main function. And now that we do this, we should see a Pi game window pop up and then
we can close it and get out of the program safely. So let's try this. And there we go.
We get planet simulation. This is the caption I was talking about. You can see it kind of
right here beside the little Pi game logo. Then if I click the X button, we're going
to close and we are all good. Okay. We have set up our event loop. Nice. So now that we
have done that, I just want to show you how we can draw something onto the screen and
kind of update the screen. So let's do that. So at the top of this loop here, I'm actually
going to set up something called a clock. Now a clock is essentially going to make it
so that the frame rate of our game won't go past a certain value. I'll talk about why
we need this, but the idea here is that if we don't implement some type of clock, so
some way to synchronize our game, essentially, you're going to, going to run the simulation
at the speed of your computer. Now, some people want that to happen. They want it to run
super fast. If you're on a super fast computer and then super slow, if you're on a super
slow one, but ideally for me, I don't care about what type of processor you have. I
just want you to run the simulation at the same speed. So it looks normal. Hopefully
that makes a bit of sense, but we can kind of regulate the frame rate and how many times
our game is refreshing. So the way we do that is we say clock is equal to Pi game dot time
dot clock. And then we go here and we say clock dot tick. And then we put in the number
of times that we want this to update per second. Now, this does not mean you're always going
to update at in this case, 60 frames per second. However, this is the maximum that you will
be able to update at. So we're saying clock dot tick 60. That means we're going to update
this loop or run this loop a maximum of 60 times per second to ensure our game's not
going too fast. Okay. So now we have our clock. And as I was saying, we want to draw something
on the screen. So to draw something, I'm going to use my window right here. And I'm
going to say win dot fill. And then I need to pass an RGB color here. That's going to
be the color that I want to fill the entire window with on the screen. So I'm just going
to define a color. Let's just go with white for now. And white will be equal to 255, 255,
255. Okay. So that's our RGB value for white. And then I'm going to pass white inside of
here. And we should see in a second that we're going to get the screen actually updating.
Now it's going to have a white background rather than a black. However, I will show
you if I currently run the code, we actually don't get any white on the screen. And the
reason we don't get any white on the screen is because we're not updating the display.
So what I need to do is say pie game dot display dot update, not clear. And what this does
is actually take all of the drawing actions that we've done since the last update and
then kind of paste them and draws them onto the screen. So what I'm doing is every loop,
I'm going to fill the background with white, and then I'm going to update the display.
Okay. So now if I run this, you're going to see that we get a white back. Now we don't
actually want a white background. I want a black one. So I'm going to get rid of this.
I just wanted to show you how we fill the screen. Okay. So let's comment these out for
right now. Perfect. So now that we've done this, let's start implementing a plan because
obviously we want to put some planets on the screen. And to do this, I'm going to make
a class. So I'm going to say class planet. And inside of here, I'm going to define an
initialization. I'm going to say define a knit. I'm going to say self, we need an X and
a Y. Now the X and the Y is going to be the position that we want this planet to be on
the screen. We also are going to need a radius. We're going to need a color. And then let
me just check if we want to take anything else. We're also going to need a mass for
the planets. Okay. So these are kind of the initialization values that we have. So I'm
going to say self dot X is equal to X. Self dot Y is equal to Y. Self dot radius is equal
to radius. Obviously we're going to have circular planets. Self dot color is equal to color.
We might want to make our planets more detailed and have multiple colors, but for now we're
just going to go with a single color. And then the mass is going to be the mass in kilograms
of this planet. We're going to have to use that mass to calculate the attraction between
the different planets than generate the actual circular orbit, which we'll get to when we
start talking about the physics. Now there's a few other things that we want our planets
to have. They're going to have to have an X velocity as well as a Y velocity. So I'm
going to say self dot underscore X. Well is equal to zero and self dot Y. Well is equal
to zero. Now I'll explain how all of these concepts work in a second, but the idea is
we're going to be moving our planet in a circle. And in order to move in a circle, we have
a velocity in multiple directions. So we're going to have it in the X direction, which
is the horizontal direction, and then in the Y direction. And by moving in two directions
at the same time, we're able to generate a circle and have kind of, I don't want to
call it, uh, centrifugal force or some, some typical motion, but something along those
lines, right? We're actually moving in a circle around an object at a constant speed. Okay.
Uh, hopefully this is making sense so far. Another thing that I want to do here is I
want you to have something that says self dot sun is equal to false. Now this is going
to tell us if the planet is the sun. The reason we want that is because we're going
to draw the orbit of the planet moving around and I don't want to draw the orbit for the
sun. So I need to know if it's a son to either draw it or to not draw it. And then I'm going
to have the self dot distance to sun. I'm just going to make this equal to zero right
now. And we're going to update this value for every single planet that we have so that
we know what it's distances and we can then draw that on the screen. And then the last
thing that I want is self dot orbit is equal to an empty list. We're going to use this
to keep track of all of the points that this planet has traveled along so we can draw a
circular orbit representing well, the orbit of the planet. Okay. Uh, again, all this will
start to make sense as we get into more of these concepts. I'm just kind of setting up
all of the initialization values. Now a few other things that I want to do here, uh, is
just write out a few constants that we're going to use for our simulation. Now the first
constant we're going to do as a class variable in the planet class, and this is going to
be AU. Now AU is astronomical units, and this is approximately equal to the distance
of the earth to the sun. Now I want to use AU because it's going to simplify the math
that we need to do to calculate the distance between the current planet and the sun and
allow us to initialize our planets at the correct AU from the sun. So they're kind of
the correct distance away. Hopefully that makes a bit of sense, but one AU is equal
to, and I just have to copy this from my other screen, 1.49.6 to the exponent six, which
is what this E six stands for, and then multiplied by a thousand. And I don't actually need these
in parentheses. So I don't know why I had it there. Okay. So what this is saying is
we are 149,000. Uh, I guess this is sorry, 149 million and then 600,000 kilometers. That's
what this stands for right here, but we want this to be in meters. So I'm going to multiply
it by a thousand to get the distance from the sun in meters. Uh, one AU that that's what
this is. Hopefully that makes sense. Again, one AU is the distance from the earth, the
sun approximately. And here we're converting this from kilometers to meters by multiplying
it by a thousand. Okay. Now we also want the gravitational constant. Now this is not negative
9.8. That's the, uh, acceleration of gravity. I actually, yeah, I think it's the acceleration
of gravity. I might be messing that up, but it's something to do with gravity, but the
gravitational constant is used in finding the force of attraction between objects, which
is what we want to do. And G is different than the regular gravity one is a 6.67 and
actually is 4.28, either the negative 11. Okay. That's great. My autocomplete is working
very well there. Nice. Now the last two things we want here is a scale. Since we're actually
going to be simulating the real values here for the orbits, we can't draw them at the
position that we have them at. I know that's probably a confusing line, but the idea is
if our planet is moving at, you know, something kilometers per second, seven kilometers per
second, 29 kilometers per second, I can't draw my planet at a million kilometers in
my pie game window. I need to draw it in a kind of appropriate scale, right? So I'm
going to have to figure out what one meter represents in terms of pixels in my pie game
scale here, because I'm only working with 800 pixels high and 800 pixels wide. Hopefully
this is making it a little bit of sense. What I'm going to do here is say 250 divided
by AU is the scale. Now this scale essentially says that one astronomical unit is going
to be about a hundred pixels in my pie game program. You can look at the math to figure
out how that works. But for now, I'll leave a comment. We're going to say one AU is equal
to 100 pixels. Okay. That's kind of the scale that we're going with here. So we can draw
things to scale in the window. And then the last thing I want is the time step. And this
is going to represent how much of time I want to represent in my simulation or that I want
to simulate is being a lapse. So the idea here is every time I update the frame, I'm
going to pass a certain time step and say, okay, I want to look at one hour of this planet's
movement at a time or one day of this planet's movement at a time, because I don't want to
look at one second. It's going to take a really, really long time to simulate. Instead of
want to look at a larger time step. So what I'm going to do is say 3,600, which is the
number of seconds in a, what is this, in an hour? Yeah. I think this number of seconds
in an hour. And then I'm going to multiply this by 24. And that's going to give me one
day. Okay. So this is representing one day. I think that's correct. Yeah. Okay. I'm pretty
certain that is correct. This would be the number of seconds in an hour, right? If you
go 60 times 60, I think that gives you 3,600 and then multiply that by 24. And that is
the time step that we're going to be doing the simulation on. So kind of one day at
a time, we'll be updating the planet. All right. Hopefully I'm not confusing you guys
too much. I do understand this is a lot. We got to go through a bunch of physics and stuff
here to make this work, but there you go. That is a planet. Now, the next thing I want
to do is implement a draw method. Now this draw method is going to draw the planet on
the screen. So what I'm going to do is say self, and I'm going to take a window that
I need to draw this planet on. So the X and Y for my planet, as well as the X velocity
and the Y velocity for my planet is going to be in meters. So the number of meters that
I am away from the sun, that's what X and Y is going to represent. So I need to take
those values and then draw them to scale, right? Because I again, I can't draw like
something million kilometers or million meters away. I need to draw it in an accurate scale
in pie. So this is where the scale is going to come in. I'm going to say that my X is
equal to, and then this is going to be the self.x multiplied by my scale. Okay. So it's
going to be self.scale and self.scale is going to be a really, really tiny number that will
now take this number and bring it to scale. And I'm going to say Y is equal to self.y.
And I'm going to multiply that by self.scale. Okay. Nice. Now, one other thing I need to
do is make sure that I'm drawing all of this in the center of my screen, because I haven't
mentioned yet when we're talking about pie game, zero, zero is actually the top left
hand corner. So let me just quickly open the window here, right here where my mouse is.
So top left hand corner, this is zero, zero. If I go all the way to the right, this would
be 800 zero. If I go all the way to the bottom right hand corner, this would be 800 800.
So rather than having zero, zero in the middle, which you might be used to, it's the top left.
So I don't want to draw my stuff in the top left. I want to draw it in the center. So
that means I need to take every single value I have. I need to offset it by the center
of the screen so that we draw stuff in the middle. Hopefully that makes a tiny bit of
sense. But the way we do this is we say plus, and then this is going to be width over two.
And then this is going to be plus, and then this is going to be height over two. And those
values are right here. Okay. So the width and the height, we could just write 400, but
I'm going to do width and height. So that if we change the width and the height, this
is going to update automatically. Okay. So now we have our X and Y and now I can actually
draw this onto the screen. So I'm going to say a pie game dot draw dot circle. And I'm
going to pass the window, which is where we want to draw the circle. I'm going to pass
the color that I want to draw the circle in. So this is going to be self dot color. I'm
going to pass the position that I want to draw it in, which is going to be X, Y. That's
the center of the circle. And then lastly, I'm going to pass the radius. So self dot
radius. Okay. So now we're actually going to draw the circle on the screen when we call
this draw method. Okay. Hopefully this is all making a bit of sense. And let's now go
and actually draw a few planets and initialize some of their constants. So the first planet
we probably want to draw is the sun. Uh, can you call the sun a planet? I guess it's
a star. Again, not a big physics guy, but the first thing we want to draw is the sun.
Okay. So I'm going to say sun is equal to planet. And we're going to pass a zero, zero
for its X, Y. Okay. So zero, zero right here for the radius of the sun. We can kind of
pick whatever value we want here. We're just going to be kind of randomly picking the radius
is based on the relative mass of the planets. So we want the sun to be the biggest. And
what I have in my other program here is 30 for the radius. So we'll go with that. And
for the color, I want this to be yellow. So just to make this a bit easier to read, I'm
going to define yellow up here and yellow. Actually, how do you even make yellow? Let's
look at this yellow is going to be 255, 255 and zero. Okay. So that's the RGB value for
yellow. Obviously that's the color we want the sun. So let's now put the color as yellow.
And then the last thing we need to pass is the mass and the mass. I need to look at my
cheat sheet here, because unfortunately I don't have this memorized is going to be the
following. Let me paste this in 1.98892 times 10 to the exponent 30. And in case you're
wondering, this is in kilograms. Again, we're going to use the accurate masses on astronomical
units and stuff for all of these planets. Okay. So that is the sun. And for the sun,
we're just going to say sun dot sun is equal to true. Because remember, we have this property
here that says sun, and we're going to make this true so that we don't draw the distance
to the sun from the sun, and we don't draw the orbit for the sun, which we don't need.
Okay. So now that we have this, let's just see if we can draw this on the screen. So
let's go planets is equal to, and let's make a list of all of the planets because we're
going to add a few more. And then inside of our loop here, we're going to say for planet
in planets, and we're going to say planet dot draw. And we're going to pass the window
that we want to draw it on, which is win in all capitals. Okay. Nice. And we also need
to make sure that we're updating this place. So let's steal this here and let's put it
down there. Okay. Nice. So we're saying for planet and planet plan dot draw pie game dot
display dot update. Let's see if this works. Fingers crossed. Let's run the code. Okay.
There we go. We get a sun in the middle of the screen. Very nice. That is exactly what
we want. All right. Now the next thing we want to do is draw a few more planets, right?
So let's create earth, mercury, all of those. Okay. So we're going to start with earth.
I'm going to say earth is equal to planet. Now the earth is actually going to be negative
one multiplied by planets with an all capital dot a U. This is going to be the distance
from the sun. So we're going to put that as the X coordinate. And for the Y coordinate,
we're just going to make it zero for right now. The color of the earth is going to be
blue. We'll write that RGB variable in a second. And then the mass of the earth, uh, actually
sorry, we need the radius as well. Uh, let's put the radius first. What was the radius
of the earth? I had 60 in here as the radius. And then the mass of the earth is this number.
Let me copy it in 5.9742 times 10 to the exponent 24. Okay. That's the mass of the earth. Now
I will actually mention here before I continue that there isn't a great article. I'm going
to open it up so I can show it to you guys. Uh, let me get it on my Google Chrome here,
that I'm actually inspired by making this program that has all these values already. So this is
the article, leave it in the description, but it essentially implements the same thing we're
going to implement here in turtle. Now I didn't want to do it in turtle because pie game is a
lot better and it's a lot faster. Uh, but if you look here, all the values that I'm using are
just coming from here, right? So like the earth mass, uh, the earth distance, negative one times
a U, the sun mass, just want to give credit to this article. I'll leave it in the description.
Anyways, enough of that. Uh, we have the distance to the sun, which is this,
we have zero 16 blue. This is the mass. And I think that's all we need for the earth right now.
Let's now put earth inside of here and see if when we draw it, we get it in an accurate position.
Okay. So let's run this and we get blue is not defined. Okay. I forgot to do that. Let's
define the color blue. Blue is going to be equal to, and then I want kind of a nice light blue.
So I just picked one of these before it's going to be 100 149 237. This is the RGB value for
kind of a lighter blue. If you just want it to be regular blue, then you could go zero, zero,
and then 255 and I give you a nice dark blue. Okay. So let's run this now and see if this works.
And there we go. We get the, uh, the earth, which is, you know, one AU away from the sun.
Hopefully that makes sense, but this is how the scales working. We put it at negative one AU,
which means we're going to the left. If we put at one AU, we would have gone to the right.
Doesn't really matter where we started. And there we go. Okay. So now we have the earth.
The next planet that I want to do, let's look here is going to be Mars. So let's say Mars
is equal to a planet. Now the distance for Mars is going to be this. Let me just copy it in.
It's going to be negative 1.524 times planet.au. Again, we're going to put its Y coordinate at zero.
The radius of Mars, it's much smaller than earth. We're going to go with 12.
It's going to be red, which I'll define in a second. And then the mass of Mars is a little
bit less than earth as well. So that's going to be 6.39 times 10 to the exponent 23.
Now for red, we need to define this. Now again, I want to kind of a nice looking red.
So I picked a custom RGB value here and this value is going to be 188, 39 and 50.
Okay. And now we have Mars. So now that we have Mars, we're going to put Mars inside of here.
And we should now draw Mars at the appropriate scale. So let's look at this
and we see the Mars over here. So notice that Mars is kind of right by the border.
I'm fine with that. But if you wanted to move everything in closer than what you would do
is reduce this number right here. So rather than doing 250, you would do something like 200.
And you're going to notice this is going to move us in a little bit closer. So that's kind of how
you can mess with things. Just make the number here smaller. If you want everything to get closer
to the sun. Okay. So we'll go 250 AU for now. All right. So now we have Mars. Let's do our other
planets. So the other planets we have is Mercury. This is going to be equal to planet this distance.
This is the closest one to the sun. My understanding is at least this is going to be zero. We're going
to have to make this smaller. So we're going to go zero. The color is going to be dark gray,
which we'll implement in a second. And then the mass, let me just copy this in
is going to be 0.330 times 10 to the exponent 24. If we wanted to be consistent, we could go 3.30
times 10 to the exponent 23. That gives us the same thing. Okay. So let's implement dark gray now.
So let's go up two colors. Dark gray is equal to and then what did I have dark gray at? Let me
just look here. This is going to be 80 71. No, 78 and 81. Getting a mess with these colors. If
you want, I'm just picking some custom ones that look a little bit nicer. Okay. So now we have
Mercury. So let's put Mercury in here and we can just go right on to Venus, which I believe is next
planet. So we're going to say Venus is equal to planets. Its distance is going to be 0.723
times planet.au. In case you're wondering, planet.au is referencing this right here,
just because it's inside of the planet class. Okay. So planet.au, we're going to have zero.
This is a little bit larger. So we're going to have a 14. The color of this will just be a regular
white. And then the mass is going to be this. Let me copy it in 4.8685 times 10 to the exponent
of 24. Okay. Let me zoom in so you guys can read that a little bit better. Let's now put
Venus in the list and let me go ahead and run this and see if we're getting all of our plants.
Okay. Nice. So there we go. And I've just put the plants on different sides. Again,
you can kind of put them wherever you want. Doesn't really matter. We could put them all
on the same side and have them move at the same time. I'm just staggering them a bit.
Maybe some of you will have issue with that based on your physics knowledge.
But this is what we're going to do for right now. Okay. There we go. We have all of our plants.
So now that we have all of our planets, the next thing we need to do is start moving them.
Now, moving them is complicated. But again, as I mentioned, we're going to be moving them by
their X velocity and their Y velocity, but we need to determine what those velocities are.
And those velocities are determined by the force of attraction. So essentially the force of gravity
between the different planets. All right. So I'm going to start explaining the math that's going
to go on here to actually move the planets around the sun. And before I can do that, I just want
to give you a general understanding of gravity and how planets actually orbit around the sun,
in case you're unfamiliar. So the reason why when we jump up, we fall down. And when we throw a ball
up, it comes down is because of gravity. Now, we all know gravity, but gravity is relative
to different objects. Okay. So all objects are actually attracting one another. And the force
of attraction that they have on one another is based on the mass of those objects. Now,
this only really becomes relevant when you have very, very massive objects like planets.
So when we're talking about something like earth, this a massive body, right? Is something like,
you know, six to six multiplied by 10 to the exponent, 24 kilograms or whatever the number is.
It's a very, very massive body. So relative to our mass, which is maybe 60 kilograms, 70 kilograms,
80 kilograms, whatever it is, it's way, way larger. So it actually exerts a massive force on
us that pulls us downwards towards the earth. Now, what actually determines the strength of
this force is the distance from us to the center of the earth. Hence why when you go up in space,
you have zero gravity because you're much further away from the earth. Now, all objects, again,
exert forces on each other. And those forces depend on the two masses of the objects,
as well as the distance of the objects. But if you're just naively looking at this equation
here, which is actually the force of attraction, you'll see that the distance between the center
of the two objects is the most important when it comes to what type of the force, what type of
force you're going to get, because it's R squared. So the further away you go, exponentially, the
less gravity you're going to have, the closer you get exponentially, the more gravity you're
going to get. Now, again, I'm not a physics major, so take everything with a grain of salt here.
That's the basic understanding of gravity. Now, when we're talking about planets, we're talking
about multiple massive objects that are moving around each other. So when we talk about an object
like earth here, right, the earth is moving at a constant velocity. Well, not necessarily constant,
but it's moving at a relatively constant velocity around the sun. Now, what forces it to move around
the sun is gravity. So the earth is already on a trajectory moving in the X direction. Okay. So
it has some speed going in the X direction. And then there is a force pulling it towards the sun.
That force is gravity or the attraction between the earth and the sun. Now, the reason why there's
an attraction is because the sun is much, much larger than the earth. If the earth was larger
than the sun, then the sun would be orbiting around it. Great example. If you think of the moon,
right, the moon is much smaller than the earth is very close to the earth. And so it orbits
around the earth. Okay. Hopefully this is making a little bit of sense. But the idea is that you
have some force and that force essentially is causing the earth to move around the sun. And
the reason why the earth doesn't just shoot directly towards the sun, like we shoot directly
down on earth when we jump up is because it already has momentum moving in another direction.
And so there's multiple forces affecting it, causing it to go in an orbit. Again, very simplified
explanation of what's going on. But hopefully that makes a bit of sense. Now, the reason I'm saying
this is because we have multiple planets that are orbiting around the earth, right? Maybe we have
another planet. I know I probably shouldn't have drawn it in blue. But the point is there's a distance
between these two planets, and they also have a force of attraction on each other. And that's why
you're going to have different orbits and different speeds based on the location of other
planets and kind of their orbital trajectory. So if you have two planets here as well as a planet
here, well, this guy's still orbiting around the sun because the sun is much larger than him,
but he's going to be orbiting slower than the earth is because he's not as close. However,
the earth is going to be attracting or having some force of attraction on this planet. And this
planet is going to have some force of attraction on the earth. And so you need to take that into
account when you're actually calculating the different orbits of the planets. All right. I
know this is a lot. Very, very math and physics has heavy here. But the idea is every single object
exhibits some force on each other. And we need to calculate what all of those forces are when we
are actually determining the orbit so that we are going to be orbiting appropriate to where the
other planets are. So we can't just calculate the force to the sun. We need to also calculate the
force of the other planets. And that's going to give us a somewhat elliptical orbit as well.
Okay. Hopefully this makes a little bit of sense. Now let's talk about how we actually do this. So
as I kind of already hinted at, if you look to the left of my screen, you can see that I have
the equation here for the force of attraction between two objects. Now, this force is the
straight line force between two objects. So let me just move the earth a bit here so I can explain
kind of what I mean by that and why we need to do a little bit of trigonometry. So let's say we
have the earth over here. This will say is the force of gravity or the force of attraction
between the two objects. Now to calculate this is fairly simple. We just need to first calculate
the distance between the two objects, which we can do. We then need to know the masses,
which we already know, and the gravitational constant, which we know as well. So let's say we
know the force. Well, if we know the force, the issue is it's giving us the straight line force.
We want to break this force into two components so that we are able to move the earth in an
X direction as well as a Y direction. So we need to kind of understand this, that it's giving us
the straight line force. We need to break that force into X and Y components so we can actually
move the earth around the sun in both the X and the Y direction. Now, this is the same way that
we're going to calculate the distance. It's very easy for us to actually find the distance because
we're looking for. Let me just redraw all of this, this right here. So this is going to be R. We don't
know what R is, but we know what the Y distances and the X distance distances between these two
points because for both these points, we have an X and a Y, right? So we have like X two and Y two.
So if we know both of those points, we can calculate the difference in X and the difference in Y
and then to figure out what R is relative to our right triangle here. What equation do we use? Well,
Pythagorean theorem. I know I completely butchered that that name, but it's going to be X squared
plus Y squared. Take the root of that and that's going to give us R. Okay. So we are able to calculate
R. Then obviously we can take the square. So once we do that, we calculate the distance,
then we're going to calculate the force and then we need to go in the opposite direction from the
force back to the X and Y components. Okay. So let's redraw this. So now let's say we know the
force. Okay. And again, we need to split this into X and Y. So we need to have, I guess,
F X and F Y. Now the way that we do this is we need to calculate the angle here,
theta, because if we have any two aspects of a triangle, so if we have one side length and
an angle and it's a right angle triangle, we can calculate any other angle or any other side length,
right? That's just a property of a right triangle. So we know F and we should know this angle. And the
reason we know this angle is because we know X and we know Y. So the way we calculate this angle
is we take the arc tangent, so the tan inverse of Y over X. Now to derive why this is going to
give us the angle theta, let's look at the equation of tan of theta is equal to, and then this is
going to be the opposite over the adjacent. Now I like to remember this as Toa. Okay. But this is
the equation, you know, this is a property of a right triangle. So if I have tan theta is equal
to the opposite over the adjacent, and we're talking about this right here, the opposite side
length is Y, the adjacent side length is X. And so we can kind of sub those values in, right? And
we get Y and X. If we want to isolate for theta, we need to take the inverse tangent. So that's
what we do. We take tan inverse of Y over X. That gives us theta. Okay. So now that we know theta,
we can now use theta to calculate what the F force component is or the X force component is
as well as the Y force component. So to do that, we need to use some other properties. So we have
a property, it is so, oops, let me write this property. So katoa, this is the way that I always
remember these, but we can say that the sine of theta is equal to the opposite over the hypotenuse.
And since we're looking for the opposite, which is F Y, we can say sine of the angle theta, which
we know is equal to the F of Y over H. H is F. We know F and we're able to find what F of Y is
by just isolating for F of Y. So multiplying F by sine theta. And then same thing. If we want to
find what F X is, we can say F X is equal to, this is going to be the cos of theta multiplied by F
that will give us the F X component. And then once we know the X and Y velocity, we can very
easily move this around the sun. All right. Math lesson is now over. Hopefully I didn't confuse
you too badly. Again, I'm trying to squeeze in what is probably taught an entire year of grade
12 physics in about 10 minutes, but that is the math that we need to understand to be able to move
these objects around. Can't really make it much simpler than that. If you don't understand basic
trigonometry, then I'm sure this was a lot, but you can kind of just trust the properties that I
showed you here and I will show you how to implement them in code. If you don't understand,
totally fine. You can still follow along and you will have a working simulation. With that said,
let's go back to the code. All right. So I'm back in the code and it is time to do some math
inside of code. Now, I know we just did a lot of math, but now we're doing it in code. Hopefully
that gave you an explanation of what I'm going to write here. So I'm on my planet class and I'm
going to write a method that will calculate the force of attraction between another object
and the current object. Okay. So I'm going to say define attraction like that. I'm going to take
in self and I'm going to take in another object. Now the other is going to be another planet. Okay.
So the first thing I'm going to do is say that my other underscore X other underscore Y is equal
to other dot X and other dot Y. Okay. Now the first thing we need to do here is we need to
calculate the distance between the current object and the other object. So let's do that.
We're going to say the distance in X is equal to, and this is going to be the other X
minus the self dot X. Okay. And then the distance in Y is going to be equal to the other Y
minus the self dot Y. Now it doesn't matter if you take the self dot X and subtract it from
other dot X. It doesn't matter what way you do it. It's going to give us the, uh, the magnitude,
which is what we, which is what we want. Sorry, because once we take the square of
both these values, we're going to get a positive value, no matter what. So I have the distance X
and the distance Y. Now I'm going to say distance is equal to, and this is going to be the math dot
sqrt of the distance X to the exponent to plus the distance Y to the exponent to. Okay. Let me
just check and make sure I haven't messed this up yet. Looks good. We have found the distance. Okay.
Now the first thing I'm going to do is I'm going to say if the other dot sun, then I'm going to say
the self dot distance to sun is equal to distance. Now the reason I'm doing this is because if the
other object that we're calculating the force of attraction with is the sun, I just calculated the
distance to the sun. And I just want to update the distance to sun property here so that I can use
that when I actually want to draw the distance to the sun on top of the planet. Again, we're just
checking is the other object, the sun. If it is, okay, we know the distance. So let's just plug that
in and save that value inside of the class. That way we're not recalculating it later on. We already
have the value. Okay. So now that we've done that, we need to calculate the force of attraction.
So we're going to say the force. Yeah, I think it's force is going to be equal to self.g. We're
going to multiply this by our self dot mass, multiplied by the other dot mass. And then we're
going to divide this by the distance to the exponent two. And why did I write it like that?
It's going to be distance to the exponent two. And I think that's good. Okay. Now we don't need to
do any parentheses because these have the same order of operations and exponent to the exponent
two is going to happen first anyways. Okay. So this is how we calculate the force. Now remember,
this is the straight line force. We need to break this force down into the X and to the Y
component, which is why we had to do all of that trigonometry. So now we need to calculate the
angle theta. So we're going to say theta is equal to, and then this is going to be the math dot
arc tangent of, and it's actually going to be here at the distance Y over the distance X. Now,
the reason I'm doing a 10 to is because this is a special function in Python that's going to take
the Y over the X and then give us the angle associated with it. So make sure you use a 10
to from the math library. If you just use a 10, that's not going to work. You need a 10 to. Okay.
So math dot a 10 distance X, distance Y. Now we know the angle theta. Now that we know the
angle theta, we can calculate the X velocity and the Y velocity. So we're going to say, or sorry,
not the X velocity, we're going to calculate the X force and the Y force. So we're going to say the
force X is equal to, this is going to be math dot cosine of theta multiplied by the force.
Okay. And then the force underscore Y is going to be equal to the math dot sign of the theta
multiplied by the force. Okay. And then we're going to return from here, the force X and the
force Y. Okay. Let's break down what we did here. I understand this is probably a little bit confusing
still. We first calculate the distance between the two objects. There we go. We have distance.
Great. Then what we're going to do is determine if the other object is the sun. If it is, we're
just going to store that distance in a property here because we want to know what that value is.
Now after that, we want to calculate the force of attraction. So this is the force of attraction
here. It's F equals M, lowercase M over R squared multiplied by the gravitational constant G.
Okay. So that's what we're doing. So self dot G times mass multiplied by other mass over distance
squared. Okay. Then we want to break this distance down into the two components. So the
are sorry, the force into the X force and the Y force. So we first need to calculate the angle.
So we say the math, the arc tangent, two of the distance, Y over distance X gives us the
angle that we want. Then we're going to say the force X is equal to the math dot cosine of theta
multiplied by force and the force Y is equal to the math dot sine theta multiplied by the force.
Now remember here that all of these distances and all of these forces are real distances and
forces. These are actually the distances and the forces that you would see. I mean, it's an
approximation in the real solar system. So I'm not using really small pixel values in Pygame.
I'm using massive, you know, meter per squared, a kilogram squared values, whatever the units are
of these forces, I'm actually using the correct numbers like the large two scale numbers. I just
want to make that clear here, because like if we were to print out what X were and print out
what the force were, you would see really, really massive numbers because that's actually what
they are in the real world because we're trying to do a simulation here. Okay. Anyway, so we have
attraction. Now that we have the force of attraction, what we need to do is actually update the
position of each planet based on the force of attraction between every single other planet,
because we can't just do it from the sun. We need to look at all the other planets as I was discussing
kind of in the whiteboard section. So what I'm going to do is make a method here. I'm going to say
update position, and this is going to take in self and planets. Okay. So what we're going to do is
loop through all of the planets. We're going to calculate the force of attraction between
the current planet and all of the other planets. We're then going to calculate what the velocity
needs to be for these planets. Then we're going to move them by that velocity. So we're going to say
the total force in the X direction is equal to the total force in the Y direction, which is
currently equal to zero. And we're going to sum all of the forces together from all of the planets.
So we're going to say for planet in planets, we're going to pass a list of plans here. That's
what we're taking in. We're going to say if self is equal to planet, then continue because we don't
want to calculate the force with ourself. In fact, that would just give us a zero division error
because the distance between ourself and ourself is zero, right? So we can't
do this division with the arc tangent or sorry, with the distance squared, that would give us
an issue. Anyways, continuing. Now, what we're going to do is say that the force X force Y is
equal to, and this is going to be the self dot attraction to this plant. Okay. So again, for
every single planet, we're going to calculate the force X and the force Y that's exerting on this
planet. We're going to say self dot attraction is equal to planet. That's what's doing the
calculation here. That gives us the FX and FY. Now we're just going to, uh, sum these two variables
or add to these two variables. So self that X FX plus equals FX and total FY plus equals FY.
Okay. So now that we know what the total forces that's being exerted on us and the X and the Y
direction, we need to use these forces to actually calculate what the velocity of the
planet's going to be. All right. So the way we calculate the velocity here is we're going to
say that the self dot X underscore Vell is equal to the total FX divided by the self dot mass
multiplied by the self dots. And then this is going to be time step. Now, I'm going to explain
how this works, but this is using kind of the famous equation F equals MA. Okay. So we have
this equation F equals MA and this stands for the total force is equal to the mass divided by
the acceleration. Now you can use this to solve for the acceleration, which is what we're doing
here. So we're saying the acceleration is equal to F over M. So I'm taking my total FX and my total
mass, right? I'm dividing those to get the acceleration. Now the thing is I'm going to be
adding to this. I'm saying self that X Vell plus equals. So the way this works is I'm increasing
my velocity by my acceleration multiplied by the time step. Now there's another equation that has
to do with time and acceleration to equal velocity and all those kinds of things. Anyways, the point
is though, since we're simulating this over a period of time, we're going to take the time step,
which is right here, which is one day where we're going to multiply that by whatever the
acceleration is. And then we're going to take that value and add that to the current velocity.
Now, why this is going to give us a perfect elliptical is because as soon as we start going
to the left or to the right of the planet and the distances and the angles change, our force
is going to be either negative or positive saying that we're going kind of right or we're going
left or we're going up or we're going down. So by doing a total summation of all of these forces,
what ends up happening is we go in a complete circle because by the time we get to a certain
point in the orbit, the velocity is going to be changing and either getting more positive or
more negative, moving us to the left or to the right. Hopefully that makes a tiny bit of sense,
but the point is we're going to constantly add this and you'll notice that we're not going to
go faster. We're just going to change in directions because what's going to happen is X velocity
is going to be decreasing while the Y velocity is increasing when we're at a certain point in the
circle. And then that's going to continually change and change directions as we move around.
So you'll see when we start running this, but that's how this works. Now, we do the exact same
thing with the Y. So plus equals the total F Y over the self dot mass and then multiplied
by the self dot time step. OK, so now that we have that, what we need to do is just increment
the X and the Y because this is just the velocity. So from acceleration, you get velocity from
velocity, you get displacement or distance, which is what we're now going to do. So we're going to
say self dot X and then this is going to be plus equals self dot X underscore Vell. And then we need
to multiply this by the time step as well. And then we're going to say self dots Y plus equals.
This needs to be self dot Y Vell multiplied by self dot time step. And then let's fix this
to be self dot X. Well, OK, and then lastly here, we can actually say the self dot orbit
and then dot append. And I'm going to append just a tuple here, which is going to be self dot X,
self dot Y. And yeah, I think that's actually good for the orbit. OK, so let me break this down
one more time. What we're doing is we're getting the total forces exerted on this planet from
all other planets that are not itself. We are then going to figure out what the X and the Y
velocity is using the equations I described. Then we are going to update the X and Y position by
using the velocity. We need to multiply by the time step to make sure we're moving in the accurate
amount of time here. OK. And then we have self that orbit dot append, and we're appending the X
and Y position that we're currently at so that now we can draw the orbit for this planet, which
I'm going to do in a second. OK, so there we go. We actually have all of the hard stuff done. Now
we just need to call the update position method here on all of our planets, and you'll see that
they'll start moving around the screen. So I'm going to go to right before planet dot draw,
and I'm going to say planet dot, and then this is going to be update position. And I'm just going
to pass to it planets. OK. And that's actually all we need to start moving the planet. And let's
just run this now and see if it works. OK, so let's see. And we can see that our planets are
moving, but we're getting a bit of an issue. And I'm going to explain why that happens. So first
of all, the reason why we were seeing our planets like thousands of times on the screen is because
we need to refresh the screen by kind of redrawing a background on top of it before we draw everything
again. So what's happening right now is we're continually drawing the planets. We're not drawing
anything on top of the old planets. And so we keep seeing the old planets. So all I need to do here
is say wind up fill. And I'm just going to put inside of here. Zero, zero, zero, which is just
the color black. And now if I run this, you're going to see that the planets just zoom towards
the sun. Now, the reason they're zooming towards the sun is because they don't have a velocity in
the Y or sorry, in the X is the X. No, it's in the Y direction. So currently, right? If again,
if I run this, you see that they just zoom right towards the sun and then keep going. The reason
they're doing that is because we don't have another velocity. And that's what would happen
if they weren't already moving in another direction. So we need to apply an existing velocity
in the Y direction to these planets so that they will be moving around the sun so that the force
attracted them to the sun causes this kind of centripetal motion or the circular motion around
the plant. I know this is like there's a lot of physics. I wasn't actually considering how
many physics I would need to explain here. But the idea is for all of these planets,
they need some starting velocity in the Y direction. Otherwise, the only force being
applied is directly X because of kind of where the planets are placed and the fact that we're
just going straight down towards the sun. That's the only force being applied currently
because we don't have another velocity. So let's apply the other velocities. I'm just going to
copy them in from my other screen. So this is the Earth velocity. I'll pause so we can read
them all in a second. This is the Mars velocity. This is the Mercury velocity. And then this is
the Venus velocity. Okay. So the Earth Y velocity is 29.783. This is kilometers per second multiplied
by 1000, which gives us meters per second because that's what we're using. Excuse me. The Mars
velocity 24.077 multiplied by 1000. Again, this is meters per second. So kilometers, then we convert
it to meters, 47.4 for Mercury, and then negative 35.02 times 1000 for Venus. Now you'll notice
that for some of these, we have positive and negative or not positive, not negative, right?
Like we have a negative planet AU moving us to the left, and then we have a positive Y velocity.
Then for this one, right? We have a negative and positive. And then here we have a positive,
and this actually needs to be negative to make sure that it's going to be moving in the correct
direction. So if you have one that's positive, the other one needs to be negative so that they're
all moving in the same direction vice versa. Hopefully that makes sense, but you'll see here
when this starts running. Okay. So let me actually just run this now and we should see that they
orbit. So let's have a look. Okay. So there we go. Now we have an orbit. Obviously, it doesn't look
as cool. We're not drawing the orbits, but notice that they're all moving in the same direction.
And obviously the ones that are closer to the sun are moving faster. Perfect. So the simulation
seems to be working. Okay. So let's now draw the orbits around. And the way that we're going to
do that is we're going to use all of the points that we're storing in this orbit list, because
every time that we call this, we're going to add a point to the orbit list. And we're going to draw
them. So what I'm going to do is add something here and say four point in self that orbit.
And I actually want to draw this. Yeah, I'll draw this before I draw the circle.
I'm going to say XY equals point. And then I'm going to say X is equal to X multiplied by
self dot scale. And then this is going to be plus width over two. And I'm going to say Y is equal
to Y multiplied by self dot scale, plus height over two. And then we are going to
actually store these in an updated points list. We're going to set updated points to equal this
updated points dot append point. And then we're going to draw all these points as a line. So
we're going to say pie game dot draw dot line. And is it lines? Let me just have a look here to
see actually exactly what we need to do to do. So this is actually going to be lines. Sorry,
we're going to pass win. We're going to pass self dot color. We're going to pass false, which means
this is not an enclosed line. So we're not going to draw an ending line, essentially. And then
we're going to pass the updated points and we'll pass a thickness of two. Okay, let me explain
what I did. I understand I kind of just went through this without any explanation. So what I'm
doing is I'm getting a list of updated points, which are going to be all of the X, Y coordinates to
scale, right? Cause I need to get them to scale. Otherwise I can't draw these properly. So I take
them, I do what I need to do to get them to scale exactly what I did right here. And then I update,
I make a new list here, updated points and append, sorry, not the point, the new X, Y that I made
right here. Okay, then I'm going to draw lines. Now, what this does is it takes a list of points,
which is right here, and it essentially just draws a bunch of a bunch of lines between the
different points, and it doesn't enclose them because I passed false. Now, this is the thickness
that I want to draw the lines, which is going to be two pixels. Now, one thing I do need to do is
just put an if statement here and say, if the Len of self dot points is less than two, actually
less than or equal to two, because I believe we need at least three points, then I don't want to
do any of this. So we're going to say actually the opposite. We're going to say if, yeah, if the
line of points is greater than two, so meaning that it is at least three, then we'll do this.
It's just confusing myself there. We need at least three points. So if the line of points greater
than two, do all of this. Otherwise don't do it. That should give us the orbit. So let's see now,
if we're going to get kind of the orbital ring around, let's run this and planet object has no
actually points. Ah, sorry, it's not points. It is orbit. And I think I did this right. Self
that orbit. Yes. Okay. Self that. Nice. All right. Let's see. There we go. Now we get the
orbits being drawn as the planets are moving around. Very nice. So I mean, you can run the
simulation as long as you like and see everything working. Now what I want to do is implement the
distance to the sun just to show you that this is not a perfect circle. It is actually elliptical.
I know it looks like a perfect circle, but since the scale is so, I guess small here that we're
drawing this out, you can't really see the ellipticalness of the orbits. Okay. So now what I
want to do is also draw that distance on top. So to do that, I need to initialize a font in Pygame.
So I'm just going to say font is equal to Pygame dot font dot sys font like that.
And I'm going to pass inside of here, comic sans as my font. And for the font size, we'll
just go with something like 16. So this is the font you want. And this is the size. That's how
you initialize the font. And then what I need to do if I want to draw the distance is I need to say,
first of all, if not self dot sun and forgot working in Python. So let's use the actual not
because I don't want to draw the distance between the sun and the sun, which is always going to be
zero. So I'm going to say if not self dot sun, then we'll say distance underscore text is equal
to font dot render. This is how you actually create a text object that you can draw. I'm going to
say font dot render. I'm going to do an F string. And this is simply going to be the self dot
distance to the sun. And then this is going to be in meters. So what I can do is I can divide
this value by 1000 if I want to get kilometers to make it a little bit smaller. So let's do that
divide by 1000 in kilometers. I'm also just going to round this just so that we don't get a massive
number here. So let's just round this to one decimal point, put that in kilometers. And then
we want anti aliasing one, which is the next argument. And then the last argument, I believe
is the color that I want to draw this in, which we can just make. I guess it shouldn't be self
dot color. We'll do white. Okay, perfect. So that is now the text object created. Again, you have
to use a font object to create a text object, which then you can render on the screen. Now I
want to draw it on the screen. So I'm going to say win dot bullet. I'm going to pass the
distance text. And then the position that I want to draw this at is a little bit complicated.
And also guys, sorry, I just realized I made a little bit of a mistake here.
Actually, no, maybe this is okay. The way it is when I define X, Y inside the for loop,
this might be interfering with this, although it didn't seem like it was.
So I guess we can just proceed, but I don't like having these names shadow each other. Okay,
we'll just proceed for now, but that's kind of what I was realizing and why I pause there.
Anyways, what I'm going to do is draw this at X, Y, and we're referencing this X, Y here,
which is going to be the center of the circle. Now the issue is, if I draw this at the center of
the circle, since I start drawing the text from the top left hand corner, you'll see actually,
let me just run the code and you'll see what happens here when I do this. So you'll notice that
the actual, the text is kind of at the bottom right of the center. Now that looks really ugly.
Obviously don't want that to be there. So what I'm going to do instead is I'm going to make it so
it's drawn directly in the center. Now do that. I need to take the X and need to subtract this
from the distance underscore text dot get underscore width divided by two. So if I take the width of
the text and divide that by two and then subtract that from the X that shifts me to the left,
some exactly in the middle. And then same thing with the Y. So Y is distance text dot get underscore
height over two. Okay. Nice. Hopefully that is all clear. Now I'm just going to take all of this
and we're going to put this below when we're drawing the circle so that it gets drawn on top
and we don't have any overlap or we don't have the circle kind of overlapping the text. Okay.
So let's close that. You guys can pause the video if you want to have a look at this.
Let's run the code though and let's see what we get. Nice. Okay. So now we actually have
the text being drawn on top and for some of the planets, given it is a bit hard to see,
but that is all working. Nice. So with that said, I think I'm going to end this tutorial here.
This was a lot of stuff to go through. I hope you guys appreciated this and all of the math
and explanations. If you did, please make sure you leave a like. Obviously you can extend this as
much as you would like. You can mess around with the scale. You can mess around with the speed.
You can change the time step. This is a really, really flexible program and all of the hard
physics and math is done. So if you want to add more planets, you can really easily do that.
This a realistic simulation, something I haven't done on the channel before and that I hope you
guys appreciate. All right. With that said, I am going to end the video again. Please like the
video, subscribe to the channel and I will see you in another one.
