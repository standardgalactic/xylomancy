If you're watching this video and you write code in Python, then chances are you're familiar
with what a unique language it is, and you utilize some of the awesome features that
Python provides. Now, this is great and Python is an awesome language, but because it is
pretty unique and it's not like a lot of the traditional programming languages, there's
a lot of ways that you can make mistakes in Python without really realizing it. Python
is, as I said, a unique and kind of quirky language. It allows you to do a ton of stuff
and it's very flexible, but with that flexibility, it allows you to make a bunch of mistakes
that are really hard to catch if you haven't watched a video like this. So with that said,
let's get into this video and I'm going to walk you through some mistakes that you're
probably making in Python and that you can easily fix by going through these tips. So
the first mistake that I'm sure many of you are making is that you haven't checked out
my programming course yet called programming expert. I'll leave it in the description.
This is a unique course that teaches Python, specifically some more advanced features of
Python. And we recently added go to it as a second language. So don't make that mistake.
Check that out from the link in the description. But in all seriousness here, the first mistake
that you're probably making is something called name shadowing. Now name shadowing occurs
when you name your variable parameter function, really anything you're defining a name for
a built in function, some built in name or something in the current scope that's already
defined. So for example, here, if we have this function called get database record, we have
a parameter here called ID. Now this is a shadowed name. And the reason this is shadowed
is because you're naming this a built in function. So in Python, we actually have a built in
function here called ID. Many people don't know about this function. And so they'll do
something like this, where they write a function and then they name this parameter, they give
a parameter name of ID. Now you'll notice here, when I write ID, I'm getting the syntax
highlighting as if it was a function, because that's what Python knows to do. But this is
not going to be treated as a function. It's going to be treated as the parameter. So that
is the intended behavior when we're looking at a function like this, but it can be really
confusing if you're familiar with the built in functions. And you have kind of a long
function or a long class or something like that. When you're reading shadowed names.
So really you want to avoid name shadowing as much as you can. And one of the only ways
to do that in Python is just to ensure that you're not naming your parameters, functions,
et cetera, a built in name. So something like ID, maybe something like max. That's a really
common one, something like min. You want to avoid those names because again, they're built
in functions. And if you do name something that in the current scope, so in this function,
you can no longer use this as the function. So if I try to do something like ID here,
let's just call this function. So get database record. Let's pass in one. Notice it says
the int object is not callable because I've overridden the ID function by shadowing its
name. Now, this can occur when you have nested functions as well, uh, in all, and in all
kinds of other scenarios. Another really common thing here is when you shadow a name from
the global scope. So for example, if I make my parameter here named database, uh, or I
accept maybe like ID and database like that. Again, if you have a longer function, it can
be confusing when I'm reading this code. If I'm referring to the database parameter,
if I spelt that correctly, or the database variable in the global scope. So obviously
this isn't always avoidable. The main thing here is just don't name your parameters or
variables, a built in name like max min ID, not only because it's confusing, but because
you also now make it so you can no longer use those functions inside of wherever you've
given that name. So another mistake that you are likely unintentionally making in Python
is using a mutable object as the default value for an optional parameter. Now, I know that's
a mouthful, but if you look here at this function, it's called mutable parameter. And
we have an optional parameter. We know it's optional because we have it assigned to a
default value. If you don't pass it, it gets the default value. And the default value is
a mutable object, which is a list. Now, let me show you why this is bad by running the
code. So when I run the code, we actually get an unexpected output. If you're from another
programming language where we get one, two, one, two, one, two, and then one, two, one,
two, one, two. Now, the reason this occurs is because this is mutable. That means we
can actually mutate it. We can change it in place. So when I do something like LST dot
append one and LST dot append two, I'm actually mutating this list right here, which is the
same list that's going to be the default value for the next call to this function. So you
can see on every consecutive call, we're actually adding elements to this same list. This list
does not get recreated every single time the function is called. It gets created one time
when we define the function. That's the way that the, uh, the default value works here.
So if you want to avoid this and you do want to actually have a, uh, mutable value or a
mutable object as your default parameter, you should do something like this instead
and then manually check inside of the function. If this is none. So I'm going to say if LST
is none, then I will say LST is equal to and make that a list. So now if I run this, notice
we don't get that error anymore because I'm recreating a new list object, every function
call as opposed to using the same one. It's only created one time when my, uh, program
is actually kind of initialized and the function is read by the interpreter. Hopefully that
makes a bit of sense. Try not to make this issue or try not to make this mistake. This
also happens if you use dictionaries, if you set in any other mutable object. So the next
mistake I have here is a more general one. This could apply to any programming language.
And this is modifying an iterable object while you're iterating through it. So in this case,
I have something that's iterable, which is a list just means I can loop through it, right?
Using a for loop in this case. And I have four I comma value in enumerate list. So it's
going to give me the value as well as the index of each element. And I'm saying if the
index is divisible by two, then I'm going to pop this index from my list. Now, if you're
looking at this here, uh, and you just kind of take all the indices and apply this to
it. We should be popping one. We should be popping three because that's index two. We
should be popping five. That's index four, popping seven, and then popping nine. However,
when I run this, notice that I get kind of a weird result. I get two, three, five, six,
eight, nine kind of strange why I'm getting that. But the reason is because I'm modifying
this iterable object while I'm looping through it. So if I have a look here and I print out
I value, and actually let's not print out value. Let's print out I and LST. And let's
have a look at it at every iteration. We see I zero and then one, two, three, four, five
all the way up until six. And what happens is we don't actually end up iterating through
every unique element in the list because we're popping it as we go. And the enumerate function
works a little bit differently than the range function in Python. And to show you this,
uh, let's do another example. So let's change this now to say for I, and this is going to
be in range. And then this will be the land of LST. So you would imagine we just get the
exact same result here. But when I run this, notice now we get pop index out of range.
Well, the issue here is that we're reducing the length of the list while we're iterating
through it. And the range function has kind of a constant range that we're going to be
iterating through. So as soon as I define that I'm going to iterate through the range
of zero to nine, that doesn't change the whole time I'm going through this for loop. So even
if I modify the length of the list, this hasn't changed because I put a constant value here.
Whereas when we have the enumerate, this will actually change based on the length of the
list. And again, that's why you get that weird result. So that's what I wanted to share
with you. Don't do this. It causes a lot of headaches. Only do this. If you really understand
what you're doing, if you want to make a modification to a list while you're iterating through it,
usually what I like to do is store the modifications I want to make somewhere else, iterate through
the list entirely one time and then run a for loop and just make those specific iterations
that I want to. Hopefully that makes a bit of sense, but that is mistake number three.
So the next mistake I have to share with you is one that is super tricky to figure out
if you've never seen this before. And this is called name clashing. Now this happens
when you name your Python file, which we're going to refer to as a module here, the name
of a built in module in Python or a third party module that you've installed using something
like PIP. So looking at this example here, I have a little script where I import pie
game. Pie game is a third party Python module. I installed this on my system and this lets
me build 2d games. You guys have probably seen this on my channel before. Anyways, I
have pie game. Now when I run this, I get an error and it says this is most likely due
to a circular import, but this is only happening in this file. If I throw this in another file,
this code will work completely fine. So what's going on here? Well, the issue is I've named
my Python module pie game. So I've named it the thing that I'm trying to import. So what
happens is when I try to import pie game, I'm trying to import the module that I'm currently
working in myself. And then I get this error and it's saying it doesn't have the attribute.
So to show you how you would fix this, you would rename the file. So let's call this
pie game one now. And when I run this code, notice we no longer get that error and actually
pops up a little pie game screen. Obviously it goes away because I haven't coded anything
else out. So be careful about that. Do not name your Python modules, your Python files,
a built in module or a module that you're going to be importing or using in your program.
So moving on, the next mistake I have for you is using a naked accept. Now here I have
a try accept block and this exception or this accept block is going to accept any exception.
So if anything happens in here, that's an error that crashes the program, we're going
to go in here and print. I crashed. Now that's great. It's useful that we have this feature.
The issue is this accepts anything, which means I don't know why I crashed when I'm
reading this code and I see this message being printed out. Now this is really bad practice
because it makes it really hard to debug your code. And you just really shouldn't do this.
You should handle each individual exception as opposed to just any general exception kind
of for obvious reasons. But in this case, I have two things inside of here that could
fail, right? This could fail, trying to open a file in read mode, because if the file doesn't
exist, we'll get an exception and then dividing one by zero. Well, zero division, that's an
error, no matter what. So two things that could fail. And when I run the code here, all I
get is I crashed. So I don't know if it was because I was unable to open the file or because
I divided by zero. And now if I delete the file that currently exists, so Tim dot txt,
I have that there and I run this again, I get I crashed. So of course, the solution here
is to accept a specific exception and multiple of them if you want to. So you kind of just
need to know what the names of these are. You can look them up. You also can just crash
your program and see what the exception is. But for now, let's accept the zero division
error. So the zero division error is simply called zero division error. You should also
get some syntax highlighting for it. And now I can say I tried to divide by zero dot dot
dot. Okay. Now let's just comment this line out. Let's run this. And then we get I tried
to divide by zero. If I uncomment that and make my new file. So let's save this as Tim
dot txt. You guys put tests inside of there, save and run. Uh, notice that I get, I tried
to divide by zero, uh, because I'm accepting the zero division error. This obviously did
not have an exception. All right. Now, though, if we want to handle both of these exceptions,
we can write multiple except blocks. So I can do accept and then I can accept. I think
this is the file not found error and I can print out. I could not find the file dot dot
dot. So now if I delete the file again, let's delete that. Let's run this. Then I get I
could not find the file. One last thing I will throw in here before I leave. Uh, you
also can have as E or as something. Now, when I do that, it will actually give me access
to the air in the scope. So I can do something like print E. Let's just comment this out
now, and then you can actually view what the exception string message is. So keep that
in mind. That sometimes can be useful, but please, when you're writing your accept blocks,
accept a specific exception. It will help you later on. So moving on to my next mistake
and this one is using the wrong data structure. Now this is common and you could do this in
any programming language, but this is very important in Python because there's a lot
of operations that you can perform on a data structure that are very inefficient and that
if you were to use a different data structure, you'd have a much more efficient algorithm.
If you're unfamiliar with time complexity, don't worry. That's kind of what I'm referring
to here. Really, what we're talking about is how fast can you perform an operation and
which data structure or built in type is going to be the best for what it is that you're
doing. So in Python, we have really three core data structures. You should understand
and that's going to be a list set in dictionary. We have string as well, but I won't put that
in here. Anyways, the point is if we're looking at something like a list, a list is used when
you care about a ordered collection of elements. So if the order and the frequency of elements
that you have is important, then you use a list. There's not really another way to get
around that. If you want to store something ordered and you care about the frequency,
you use a list moving on. We have a set. Now a set is used when you do not care about the
frequency or the order of elements. You only care about the presence of elements. So you
care if something is in the set or if it's not in the set. Now, these two structures have
drastically different time complexities in a list. If I wanted to determine if something's
inside of it, that's what's known as a big O of end time operation. And that essentially
means that I have to look through at most every element in the list. And there could
be millions of elements to determine if something is there. Whereas with a set, it's actually
pretty much an instant or constant time operation for me to determine if an element is in there.
So if there's 10 million elements or a hundred elements, it's going to take relatively the
same amount of time for me to determine if an element's in the set. So it's very fast
for doing lookups, right? And then you have a dictionary. This is kind of a hybrid. What
this allows you to do is store key value pairs. But similarly to a set, this allows you to
have constant time lookup and access to an element. So I can access an element out of
key pretty much instantly. And I can check if an element is in the dictionary. Those
are the three different data structures. And you want to use them appropriately because
of what I'm about to show you. So I have a list here, for example, and I'll get to these
in one second, by the way. And with this list, I can perform all kinds of operations on
it. Some are going to be much more efficient than others though. For example, if I want
to remove the very last element, I can do dot pop. And that just removes last element.
And this is a constant time operation happens very quickly. Time doesn't change depending
on the size of the list. However, if I want to remove the first element, this is a big
O of end time operation. And this could take a very long amount of time, depending on how
long the list is. So in this situation, if you know, you need to have an order collection
of elements and you want to be say, popping something from the middle of the list or the
beginning of the list or something along those lines, you should use one of the two data
structures I have up here. And sorry, that's from collections. So Python has a built in
module. It's called collections. And inside of it, it has something called a deck and
a queue. I believe it also has a heap. It has a ton of other data structures that you
can use. Now a deck or a DQ, however you say this is a double ended queue and a queue is
essentially a first in first out data structure. It acts kind of like a queue that you'd have
when you're on the phone, like waiting on hold or something like that. But a double
ended queue, essentially all you need to know about the double ended queue is it allows
you to remove something from the beginning and the end of it in constant time. So if
you know, you want to pop something from say the beginning of a list, instead of using
a list, just use a queue. It has very similar properties to the list, but it allows you
to actually remove elements from the front and from the back of it in constant time.
I'm not going to do a whole tutorial on these. I actually think I have some on my channel
way, way back. Just wanted to mention though, that there is these built in data structures.
They are much more efficient for specific operations and just be careful which one
you're using based on what it is that you actually want to do. So moving on here to
my final mistake, and this one is using the global keyword and global variables. Now,
if you watch this channel, you should be familiar with why you should not do that.
I have an entire video that I posted talking about why not to do this, but I will quickly
summarize it here. So this program, very simple. I have a global variable called global var.
I have two functions bar and foo. In the first function, I say global global var. That means
that I am going to access or whenever I access this name, I'm going to treat it as the global
variable. So when I print global var, I'm going to print this when I say global var is equal
to X. I'm going to print this. In fact, let me just say print. And let's go with global
var down here. Anyways, you get the point. That's what's happened. Then I have foo and
inside of here, I print global var. I define global var equal to X. And then I print global
var. Now, first of all, just see a guess of what you think the output of this program
is going to be. Pause the video if you need to. I'm about to run the code. And then I'll
talk about kind of the weird stuff that we're getting. So when I run this, you see that
we get 10, 20, and then we get an exception. Now let's talk about this. So what's happening
is I'm calling bar. The bar function actually executes fine. And what it does is it prints
out 10 and 20. So I'm printing the value of the global variable. I'm then changing global
var to be equal to X, which I pass in here as 20. And then I'm printing it again. And
of course I'm getting 20 because I've changed this in the global scope. However, when I
then go and call foo, what happens here is I get this exception. It says unbounded local
error, uh, our local variable global var reference before assignment. Now that is on this line
right here. So line, uh, 10. And the reason I'm getting this is because I have actually
defined a local variable, global var, uh, inside of this function. And it's kind of
weird how Python does this, but essentially, since this is defined down here, when I try
to print global var, even though I have a global variable with that name, it's not
going to reference that. It's going to reference the one in the local scope. And since it's
not yet defined, I get an exception. I know kind of weird. One of the reasons, again,
you don't really want to be using global variables is because if you try to write a local version
of that inside of the function, you're going to get these weird errors when you try to
access that value above in the function. Now, if I were to do this, this would work fine.
I wouldn't get any issues with that. However, again, since I'm doing this before I am defining
this variable, I get that error. So hopefully it makes a bit of sense as to why that is
occurring again. Really, it's because I have a local version of my global variable. Whenever
I have that in a function, that's what I'm going to be accessing when I use that name.
So when I try to access it here, it's not yet defined. Well, that causes an exception.
Anyways, that was my final mistake for you guys. I wanted to keep this video nice and
short and just quickly give you a few things to help you improve your Python coding. If
you enjoyed, make sure you leave a like, subscribe to the channel, and I hope to see you in
another YouTube video.
