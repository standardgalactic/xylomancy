My father was a chip designer. I remember barging into his office as a kid and seeing
the tables and walls covered in intricate diagrams and drawings. I watched him work
in fascination as he painstakingly drew lines I did not understand.
These days nobody draws circuits anymore by hand. In this video we're going to dive
into a critical software tool for chip designers. Electronic Design Automation, or EDA. Without
this unheralded software, many of today's most advanced chips cannot be made.
But first, I want to ask you to subscribe to the Asianometry newsletter. The newsletter
is a good companion to the videos. I know that there's a lot of videos, so that's
why I'll write the newsletters. Check them out for the full scripts as well as additional
commentary after the fact. I might also have some additional newsletters in the future
with thoughts and ideas on things in the wider tech world. You can find the link to the newsletter
in the video description below, or you can just go to Asianometry.com. As of right now,
you can expect a new newsletter every Thursday at 1am Taiwan time. Much thanks.
Before we can understand how EDA software helps the chip designer, we need to know the
chip design process flow. How does a company like Apple or NVIDIA design their custom
chips? The process and the names might differ from company to company, but a generic flow
might look something like this. First, the product designers and system engineers at
a high level envision a product. They might not know too much about circuit design, but
they do know what their customers want, and so they come up with a set of integrated circuit
requirements based on the customer's needs. Next, the chip's requirements enter logic
design, also called circuit design. These people translate abstract requirements into
circuits with the logic capable of meeting those requirements. Think of it like a UX
designer who crafts how a software feature might look, act, and feel together with a
product manager. A chip has many circuits on it and those circuits do different things.
I'll briefly touch on two such circuits. Logic circuits, or gates, act sort of like
a decision box. It receives inputs, puts them together, and comes out with an output. Is A
equal to B? D is true only if E and F are also true, stuff like that. Just one logic
circuit by itself can seem pretty simple, but in groups they can do amazing things,
like zombies. The second type circuit is called a memory circuit. It is capable of remembering
whether a value was true or false, kind of like a light switch that is on or off. Once
the logic designer has completed their work, they end up with groupings of logic and memory
circuits connected together with wires. This grouping is referred to as a net list. After
the logic design process, the design gets handed over to the physical designers. The work they
do involves the literal physical layout of the logic circuits, memory circuits, and the wiring
between them on the chip. When you have thousands or even millions of such circuits, this can get
difficult. Once it goes through all of that, the chip design is verified and tested for errors
before being sent to a foundry like TSMC or Samsung Foundry. EDA software is heavily involved in
every one of these stages. Even a company like TSMC or Samsung uses EDA software to check a newly
arrived design to make sure it is compatible with all of their design rules. Such testing or design
rule checking is an especially big deal. An error here can cost millions of dollars if it slips
into the fabrication stage. At the early stages of chip design, basically into the 1970s,
chip designs were done by hand. The designer would draw a design on paper. This paper design would
then be transferred to a photo mask made of a material called rubylyth. The photo mask can then
be used to produce the chip design's patterns on the substrate. This is done by projecting light
through the mask onto the material and so on. But as chips got increasingly more complex with
more transistors and connections, simple software tools were developed in-house by the big companies
to aid in the design process. These tools would become the EDA software tools used today.
The first software programs automated the placement of a very small number of blocks and wires on a
circuit board. Not a chip, but a circuit board. Routing makes sense for these early programs
because the task gets tedious. It also needed to be constantly done over and over again as board
components moved around. At the beginning, these big mainframe programs ran simple breath-first
search algorithms across the grid. Breath-first meaning that they explore all the possibilities
at a single level first before diving deeper to the next level. This was rather slow, so these
programs quickly moved on to other algorithms in later versions of the software. As a number of
components within an integrated circuit started to exceed that on a circuit board, EDA software usage
moved to the silicon realm. Bringing EDA to silicon helped solve daunting challenges in chip making.
A chip is built in layers. Now you have to wire connections in 3D, taking into consideration
layer-to-layer connections called vias. It adds astounding amounts of complexity and presents
huge opportunities for errors and would lead to a chip design problem. Moore's law, an observation
not a real law, set the pace for the semiconductor industry to produce chips with ever-increasing
numbers of transistors. Assuming the industry follows Moore, that translates to roughly a
historical 58% annual rise in the number of transistors that fabs are capable of fabbing.
Being capable of fabbing that many transistors is one thing, but designing the actual transistors to
be fabbed is another matter. Design can only go along so fast because human knowledge and skills
cannot scale up as fast as tools in capital. And if you disagree with that statement then I recommend
you check out the mythical man month or other works on project and software management.
At the same time consumers want that next hot chip in their hands right now.
What results is a gap in productivity between design and manufacturing capabilities.
A company like AMD might need a few years to come out with a 5nm chip even if TSMC had the
capacity for them to use. Imagine if mega customers Apple and Huawei weren't around,
would TSMC even bother to put out a 5nm process node so quickly?
Better EDA tools are the only practical way that chip design teams can keep up and close the
productivity gap. Commercial automatic physical design systems began emerging in the 1980s.
They came as a result of not just improved computing power but also powerful new display
technologies. The first EDA software literally just drew things on paper like a printer. The
advent of reasonably priced storage tube class CRT screens made the industry much more accessible
to industry designers. The industry also pioneered and adopted new approaches to chip design that
unlocked more of the EDA industry's automation powers. Engineers and universities advocated for
a more space efficient design style on pencil and paper called Programmable Logic Arrays.
But EDA software for this style did not scale very well. You had to do a lottery drawing
whenever components changed. And conceptually people had to handle the design at both a high
and low level of abstraction. This made design difficult. It is kind of like having to architect
a house while crafting the bricks at the same time. The semiconductor industry on the other hand
developed a standard cell style. Here designers choose from a library of standardized groups of
gates called cells and decide how they are wired together. This allowed the design process to
split into the separate logical and layout functions I mentioned earlier. It abstracted away
the bottom level stuff and let people focus on their own areas. And because the cells are standardized
EDA software can consistently create electrically and physically correct designs all the time.
Several people criticized the style for being less area efficient. Some early standard cells
had half of their area being taken up by routing. But because its EDA works so much better for
designers workflow it became the industry standard. Think of it like with programming. You can write,
test and debug a program much faster if you did not have to sit and wait several minutes for your
code to compile every time you made a change to it. Such a programming language is likely to gain
traction even if it isn't as efficient as other alternatives. An EDA industry sprouted to service
various parts of the chip design process. Over time those software firms consolidated has task
got harder and required integration across various stages of the design cycle. Their proprietary
libraries would end up being the de facto standard across the entire industry. The two leading companies
in this space are Cadence and Synopsys. Both are based in the United States and are publicly traded.
Cadence has a 34 billion dollar market capitalization and Synopsys 36 billion.
The two companies are the creation of a long series of acquisitions. They have been involved in
the industry for a long time and have struck alliances with large players like TSMC and
Samsung Foundry to help solve problems in transitioning a chip from the design to the real
world. They just make things so much easier. For fabulous entrants looking to enter into the
semiconductor world they likely have to go through these EDA vendors and get their software to get
started. Your company might have to pay millions of dollars to acquire a whole bundle of software
tools, a common trick in the SaaS world. Beyond just the EDA tools the companies own a lot of IP
as well. They make money licensing out useful IP blocks for standard functions in a chip like
IO. Kind of like how in Canva, the online graphics design tool that I use to make my videos, you
have to pay one dollar for this little emoji or flower of clip art that you want to use in your
design. Sure I can go find something else or even make my own but why bother? This works the best
and is the most convenient. As a result both companies have very good gross margins and strong
cash flows. Software subscriptions and IP license businesses are like that. And so they can spend
a whole lot on R&D to further extend their current advantages. So I would say that their
positions are pretty rock solid. Their stock valuations already reflect all of this in case
you're wondering, this stuff ain't cheap. I would not go out and start buying these company
stocks anytime soon. There are a few companies out there challenging the two major incumbents.
Google apparently made their own EDA tool to design a recent YouTube chip, that's really
interesting. There are a few Chinese alternatives like Empyrean and Sellecksoft that recently
have gotten increased attention due to the US-China trade war and not to mention open source EDA
tools for things like risk 5. Such efforts as of now remain undeveloped and lag the market leaders.
For EDA enabled chip design exciting new developments remain on the horizon.
Programmers are applying machine learning to EDA software and that is showing some promising new
results. For example machine learning can help EDA tools find an optimal route for the wires
between the chip circuits. It can help simulate what sorts of patterns a photomass design will
project during the lithography phase. And outside of the machine learning, vendors are still
experimenting with new techniques to best adapt to this new industry trend of systems on chip or
SOC designs. Without EDA software the cost of creating new chip designs would soar even faster
than they already are. They are a critical part in the industry and today's amazing chips would
not exist without them. Alright everyone thanks for watching that's it for tonight. If you want
more content you can like and subscribe to the channel I would appreciate it if you did and
remember to hit up the email newsletter and sign up. Want to send me an email? Drop me a line
at john at Asianometry.com. I love getting letters from viewers. Until next time I'll see you guys later.
