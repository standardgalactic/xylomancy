What's going on, everyone?
Today we're talking about regular expressions.
I know some people watching this video
are thinking, engineer man,
every time I try to do regular expressions,
it just melts my brain.
And I'm gonna prove to you today
that it's a lot easier than it looks.
You just have to be explained it correctly.
In this video, I'm gonna teach you
just enough to be dangerous.
And I think you'll find after this video,
you're gonna walk away being able to do a little regex.
So that'll be great.
Let's just jump in.
Well, first, what is regex?
Regex is basically just text-based syntax
that allows you to define a pattern.
And with that pattern, you can use it to, say, find text,
or you could also use it to find and replace text.
Before we start matching text,
I just want to describe this interface that I'm using.
So this is a tool put out by debugex.com,
and there's a link in the description for that.
And basically what it is is the second box here
is the text that we would like to match.
So for instance, I can put engineer man.
And then this box is the actual regex that we'll write.
And then everything up here is going to be
a visual representation of the regular expression.
And that'll be great,
because I'll be able to show you exactly how a pattern
is processed by the regex engine.
What if I told you the most basic regex
is just a bunch of characters?
Would you believe me?
How about this?
When I write engineer man, it says matches.
So basically what this says is,
this regex will match, for instance,
any string which starts with the capital E
is followed by an N is followed by a G
and so on all the way to the end.
So of course, there's only one string like that
and it's engineer man.
So imagine we wanted to match one name or another.
Say we wanted to make a regex that matches
either engineer man or superman.
So what we could do is use the pipe symbol
and write superman.
So now this regex matches either engineer man or superman.
And to read this visualization,
this basically says you start here
and the regex will either match engineer man
or it'll match superman.
You can see now if I delete the N,
now it doesn't match.
I can write anything here, dog, cat, something man,
and it doesn't match.
But if I write superman, now suddenly it matches.
Now I can make this a little simpler
because both of these names have the word man in it.
I really only have to match the first word
and then I can just say, well, man occurs in both.
So if I wanted to simplify this,
I'm gonna use what's called a group
and that's by putting parentheses around a set of things.
So when I do this, I've made a group out of those two words.
So now what this says is this will match,
this regex will match any text that is either engineer
or super, but then also man at the end.
Okay, so let's match something else
and we'll use some different syntax.
So now we're gonna build a regex
which matches one, two, three, four.
Now, of course, we could just put one, two, three, four
and that would match, but that's no fun.
So we'll do that another way.
Now you may have noticed that when I put say one, two,
you'll notice that it still says matches
and you might be wondering why that is.
Does 12 match one, two, three, four?
Well, no, it doesn't.
It doesn't match the whole thing.
However, it does match a portion of it.
You gotta remember that the pattern looks anywhere in text.
So because there is a one, two in one, two, three, four,
that means that there is a match.
There is a syntax for you to use
to make it match the whole thing
and that's gonna be the carrot and the dollar sign.
So basically the carrot matches the beginning of the line
and you could see it still says matches
because one, two is at the beginning of the line.
However, when I put the dollar sign at the end,
now it does not match.
And that's because what this is saying now is
this regex matches any time it is the beginning of the line.
There's a one, a two, and the end of the line.
So because there's a three and the four,
this pattern does not match.
You'll notice if I put three, four after the one, two,
now suddenly it matches.
Because it's easier to explain this
when we match entire things,
I'm gonna leave the carrot and the dollar sign
for the remainder of our matching.
So I'm gonna change this a little bit.
I'm just gonna make it any,
what we're gonna do is we're gonna make a regex
that matches any five random numbers.
So eight, four, seven, six, five.
So to do this, we're gonna introduce new syntax
and that syntax is going to be the square brackets.
What square brackets are for is it allows you to put
characters or a range of characters inside there
and it'll match any one character.
So for instance, I could say one, two, three, four, five,
six, seven, eight, nine, zero.
If I want it to match any one of those digits.
However, recall that I said it can do a range
of characters as well.
So I don't have to write all these out.
I could have just done zero to nine.
You notice it says does not match.
That's because this regex currently,
it basically says this will match any string
that is beginning of the line, one of zero to nine.
So one, one digit, just one.
And then the end of the line.
So we have five digits, so that doesn't work.
So the next piece of syntax is the curly brace
and that's the quantifier.
And you can put that after the square brackets.
So I put curly braces and in here I can do a number,
a number comma or a number comma another number.
And basically if you put a number,
that says match exactly whatever you put in the curly brace.
If you put a comma, it means match that number or more.
So in this case, this is saying match five digits.
If I do five comma, it's match five or more digits.
If I do five comma eight, it's saying match five, six,
seven or eight digits.
And you can see up here, we can read what this is saying.
This is saying match any string that is the beginning
of the line, one of zero to nine, five times.
So this loops around five times.
So it could be zero, zero, zero, zero, zero.
It could be one, two, three, four, five.
Any five digits, doesn't matter if it's repeating
in order, it doesn't matter.
And then it looks for the end of the line.
So in this case, we have that, we have five digits.
If I take away one digit, now it doesn't match.
If I add another digit, now it doesn't match.
So what if you just wanted to match a string of digits
that are just of any length, one, two, 50, 100, whatever.
Well, you can do that.
I will introduce a new symbol here.
So rather than curly braids, five curly braids,
you can simply use a plus.
Now what that plus says is match one or more
of that character.
So that's why up here in the visual,
you can see that it matches the beginning of the line,
one of zero to nine, and then it just keeps looping.
It can loop as long as it wants, can loop to 500.
I can put any number of digits here
and it'll just continue matching forever.
So in these character classes,
which is this square bracket, zero to nine square bracket,
I can also match the opposite of that.
So if I put a carrot in the very beginning,
what I'm now matching is the opposite
of what I have in there.
And you can see again in our visual,
it says this regex will match the beginning of the line,
none of zero to nine, one or more times,
and then the end of the line.
So here I can't have numbers.
I can have letters.
Letters are all good, symbols are all good,
but as soon as I add a number, suddenly it doesn't match.
So let's put what we've learned in practice
and let's match a phone number, for instance.
So I'll write a sample phone number,
do A5 zero, 555, one, two, three, four.
So we'll just delete this and we'll start from blank here.
So let's just talk out what we're looking to match.
So we have A5 zero, 555, one, two, three, four,
but we don't just wanna match that,
we wanna match any telephone number.
So what does a telephone number look like?
Well, we have a group of three digits,
which could be any digits.
We have a dash and then we have another group
of three digits of any digits and then a dash
and then we have a group of four digits and then that's it.
So to match three digits,
we have to use the character class
and then zero to nine, curly brace, three curly brace.
So that matches that first group of three characters.
Now we simply add the dash
and then I'm just gonna copy and paste this a second time.
So that matches our second group of three characters
and then a dash and then copy and paste it one more time,
but then change this three to a four
and then now you see it matches.
So let's read the actual visualization.
This visualization now says this regex will match
any string that is the beginning of the line
one of zero to nine, three times, one, two, three,
a dash, one of zero to nine, three times
and then a dash and then one of zero to nine, four times
and then the end of the line.
So you'll see now if we change this number at all
in any way, it no longer matches.
Take out a number, it doesn't match.
Add a letter, it doesn't match.
Add another letter, it doesn't match.
Take away a dash, it doesn't match.
Anything you do here besides an actual phone number
will no longer match.
What if you wanted to make the dash as optional?
Maybe you want to allow people to put phone numbers,
but you want to match it with or without the dashes.
So in this case, you would use the question mark.
The question mark identifier,
it's technically zero or one of the element
that's before it, but I like to think of it
as the optional, you know, optional.
So if I put a question mark after the dash
and then I'll put after the second dash,
now it's going to be optional.
And you can see it represented in our visual thing here.
Now it's beginning of the line, one of zero to nine,
three times, but then now you see this line
where it can just skip over the dash
and that's because it's zero or one.
Zero is, you know, it's skipping over it
and then one is, you know, the dash being there.
So now you can see if we delete the dash,
then it's perfectly fine, it still matches.
So let's match one more thing.
Let's try to match emails.
So I'll put a sample email here.
We'll do like bob.smith at example.org.
Now for the purpose of this exercise,
email matching is actually kind of complex business,
but for the purpose of this example,
we're going to assume that a valid email address
is letters, numbers, underscore and a dot
at letters and numbers dot letters.
So first let's write the first piece
that matches the basically the bob.smith part,
everything to the left of the at sign.
So in this case, we're going to use a character class
to square brackets and then in the square brackets,
we're going to put the characters that are allowed.
So we said we're going to allow letters.
So a to z, capital A to capital Z,
zero to nine will allow the period
and will allow the underscore.
And then we'll use our plus sign to say
that there has to be one or more of those characters.
So now we have to match the at sign,
which is just as simple as putting the at sign.
So everything to the right of the at sign,
we know that there must be a dot
before the actual extension for the domain name.
So we need to first match everything
between the at sign and the dot.
So we said that only the letters
and numbers were allowed there.
So we use our square brackets,
A to Z, capital A to capital Z, zero to nine.
So now that matches from the at sign to the dot.
And of course we want to match one or more of that.
Now to match the dot, we can't just put a dot
because a dot is also the character
for any character except a new line.
So we need to do backslash dot.
And what that says is actually look for the dot.
Without a backslash, the dot would match an A,
a one, a five, anything except a new line.
So now all it's left to match is the domain extension.
So the rules here, we're gonna say it can be letters
and it has to be either say two or three characters long.
So we do our square brackets, our range of characters,
A to Z, capital A, capital Z.
And then we use our curly brace, two comma three,
curly brace.
And you can see now it says it matches.
So let's review the visualization.
So this says this regex will match the beginning of the line.
Any one of these characters one or more times in a loop,
the at sign, any of these characters one or more times
a dot, any one of these characters either two
or three times and then the end of the line.
And that's exactly what we have.
And just like the phone number, if I go changing things,
if I take out the dot, it doesn't work.
If I take out the at sign, it doesn't work.
If I put a special character here,
which is not allowed, it doesn't work.
There was a couple of ways to simplify our regex
and I wanna go over a couple,
actually one of the last two things.
Now it's the backslash D and the backslash W.
So the backslash D is kind of like the zero to nine.
It says match any one digit.
However, the one thing that backslash D does
that zero to nine does not is backslash D
will also match numbers like in foreign languages.
So if you had like an Arabic one,
then a backslash D would match that.
Whereas zero to nine only matches our zero to nine.
The same thing is true for backslash W.
So we can replace this with backslash W.
Replace that with backslash W.
Replace that with backslash W.
And we're done.
That wasn't so bad, was it?
Make sure you use a tool like debugx.com
to visualize how your regex works.
It makes it a lot easier to understand
exactly why it's matching what it's matching
and why it's not matching what it's not matching.
I sincerely hope I was able to help you overcome
your fear of regular expressions.
Please tell me in the comments
if you thought this was helpful
and you feel more comfortable with regex now.
And as usual, see you in the next video.
