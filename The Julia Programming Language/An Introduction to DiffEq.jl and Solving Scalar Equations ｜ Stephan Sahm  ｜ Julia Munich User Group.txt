Okay, so starting point for today is actually this repository, it was already in the invitation.
So the first thing everyone has to do is to go to this repository and you see it's just
a little summary prepared for me for you and there are a couple of other introductions
which we already went through and today actually these two zero fourth things have been added
which are giving two little introductions to the differential equations package and
yeah we're going to start with the zero one introduction of course and let's hope we have
time for also the stochastics part, it's actually not so much.
So the thing you have to do is to click on this launch binder button here at the top.
It's not always as good recognizable as a button but indeed it's kind of a link which
you can click and then you get to this nice binder loading window and you see the preview
and within yeah usually under a minute.
Okay, so what we're going to look at today is the differential equations package and
this is one of the oldest package in the Julia ecosystem so at least from my experience.
I've been more active in the Julia field since three years I would say and back then
it was already the most famous package at all from all and it just increased the number
of size and depth so it's by now the largest package about differential equations and really
gives you access to state-of-the-art solvers to the latest development and also a lot of
standard baseline solvers so that you can do whatever you want in this field.
So in the sense and they describe it themselves actually it's like a full stop solution.
So if you look for differential equations you can go here and you will find everything
you need.
So that's a little bit of a promise I myself haven't used it in as much depth to give
you kind of the full guarantee this is really the case but from my experience with Julia
just using Julia as the language gives you actually quite a guarantee that this thing
is hackable in case something is not supported it is relatively easy and straightforward
to extend it to whatever you need in your own.
So that's really a nice thing and yeah and you see here so this is kind of the introductory
field there are a lot of things which are already supported in the differential equations
package so we have done some ordinary differential equations we have partitioned we have stochastic
we have random we have differential algebraic equations we have neural differential equations
and yeah also combinations of these and there's even support for discrete differential equations
with this so here's the next discrete and continuous equations so this thing is really
super powerful also in terms of optimization but more focused on the continuous systems.
Okay so yeah now I just clicked again on it and it started within five seconds okay so
I hope everyone from a few has this Jupiter notebook and make it a little larger so there
are other introductions which we went through in the user group the Julia user group Munich
but today it's the 0 for the differential equations introduction which we're going to look at first
so you just need to yeah control click on it or just click on it and so I may control click
to have the other windows still open and then you should have access to just a Jupiter notebook
so who's not familiar with the Jupiter notebook the most important thing is that you have a
run button here with which you can actually execute the single cells and you have a plus button here
so with which you can create a new cell so a cell is kind of yeah like a text editor and you have
many text editors here and if you have such a Julia or just a programming cell you can actually use
it and it's really just normal Julia and I'm still connecting to the kernel right now
so hence I can't and don't see any output now I'm connected so it should execute in a second
and you have just standard Julia surrounding so you can also import packages and yeah and
in another way of executing things is which I use most of the time is shift enter or control enter
but you can always kind of just
yeah just add a new cell and run it so that's the totally go your way to do it and it works
so you've kind of a ready setup yeah so I've you have a Jupiter notebook here running on the
server with a lot of packages pre-installed and actually also pre-compiled and so that thing
should be a bit faster so that's really nice and powered by binder so that's yeah thanks to that
okay so the differential equations package has a lot to do and the first thing which the
documentation really recommends is to go through the tutorial about ordinary differential equations
so that's the first thing everyone should have seen
and hence I just rephrased this tutorial into a Jupiter notebook for you so that you can
really execute it right now but just for you to have the the background so we are kind of having
a version of this first tutorial the ordinary differential equations tutorial just make this
also a bit bit bigger so this is now kind of recompiled into a Jupiter notebook version which
we have here so you can a little bit more conveniently go through it so let's jump right into it but
to give you already feeling and yeah maybe go all to the first Julia cell here and you can click
also on this little run button to run it because the first time the Julia package loads still some
things take a little bit longer because Julia is a just-in-time compiled language we have
pre-compilation which improves startup times but still there's a couple of things which just need
to be compiled on the first run and then they are blazingly fast but the first time takes a bit longer
so what do we have here we have kind of just an introduction to to a general differential
equation so we have our target variable u where we don't know the real formula the the equation
but we can model the different the derivative of this function so that's kind of the usual
approach the the real thing is bit too complex but we know how things change over time so this
is kind of really general general approach and you can use it to model anything like this yeah super
super successful in physics and everywhere but this is the the general approach so what
do we have here in addition what do we get we define kind of our function how things change
over time and we get as input parameters the actual values themselves so how is the world at
the time where we currently are and in addition we have kind of also access to some parameters
this is just for convenience so that we can make things a little bit more general and then change
just some parameters and then look at different versions of things the last thing which we also
get is the extra time where we are in so because we model the difference of our time how things
change it's it can be quite important like what's the current time and for to begin with we have
just a very simple example that things change and yeah what's this like an exponential manner yeah
so if we have the change over time is linear so alpha is just a constant linear to our current
value what we currently have so if we solve this we know that this is actually exponential
function and yeah because we add what we already have this gets exponential I think it gives kind
of an intuition and how do we do this in Julia is now kind of the interesting part so we define
our function really plainly as a Julia function so first is your import package using differential
equations and if you're new to Julia you may be confused because there are two versions to import
a package there's import and the using and the using is for practical usage like an import but
it in addition brings a couple of barriers that's into your current namespace so that you can just
start and use the methods defined here and you see that we do this right now so we have an
ordinary differential different equation problem and we have a method solve which comes from the
package and yeah so what we first do and this is really nice need Julia's syntax to define functions
um we just define a function called f which gets u p and t as parameters and we use a simple
equal sign to assign this to an expression which now just has a constant 1.10 as this alpha value
and multiplies it by the current value of the system so you see that this assumes that the
system now is just a single value which you can multiply directly we have a u zero which is like
our initial world which we start with we started one half now for this little example and we want
to simulate our system for time span between zero and one so this we can now put into a
differential equation problem by first um providing the function the starting value then
and then the time span so this you just have to remember but it's relatively straightforward
so you pass them by position yeah first it's first and second and third but yeah it's the
usual way and defining them or giving them names first is one of the very straightforward ways to
make it very clean also from the code side that you see what's going on and yeah and finally we
call the solve function which is provided by the package and we solve our problem with a specific
solver so this is kind of an art in itself to choose the right solver and here we just take
the example from from the code so the Z5 is one of the recommended options but you can check out
the documentation there yeah there's a little art to it but you have also just a standard recommendation
we have a relative tolerance which can set here absolute tolerance and this is just to
give you an idea that there are really a lot of more parameters which you can adapt so this solve
is like the general entry point where you can specify a lot of things same um for the problem
itself so you can specify further things for the problem so you see that if we kind of
if we computed this we get a solution which here prints relatively nicely so we we see that things
have been successful we have a time vector for which we computed our system and we have our
solution u which is then our system for this time and we get a nice little visualization of this
using the general plots package so plots is the the user package for plotting there's there are
some other packages out there which are getting also more momentum so the makey project is really
awesome but yeah the plots is still for for newcomers is the go-to and it's also used everywhere
you see it's very relatively simple so what we do here is just we activate again the plots package
and this thing i should have made a comment here is just to get a nice interactive plotting system
in our Jupyter notebook so this activates plot leap back end so you can visualize plots different
ways you just can render them as pngs as images or you can render them as nice interactive html
javascript combinations and this is what we do with the help of plotting then we can just use the
general plot command with our solution here as as the first argument and then again with
thousands of parameters you can tweak whatever you want so here we tweak most obvious stuff
the access names and title not some label and nice thing you can adapt you can add to an existing
plot and the only difference is that you provide an exclamation mark in the end so this is the
Julia sign for changing stuff so we are going to change the current plot and add a new thing to it
and what we add is here the time itself and over the time we plot a function and as you recognize
this is our function which is the optimal solution so if we solve our our system this is the true
solution and we just plot it here as well for visualization purposes so for a couple of uh
you probably this already compiled and this is one of the biggest drawbacks of Julia which is
currently also approached so people are working on this but because of this focus on being both
high level interactive and super performant with focus on throughput we we have this compilation
step in the beginning so in python you would see the first plot a little bit faster because it
focuses on just executing the code on the fly and interpreting it in the sense and Julia there
are additional steps happening to make the code fast and these additional steps are just slowing
things down on the first time which is a little bit unfortunate in this setting but from the
practical perspective it was never a real issue for me because as soon as you have this thing running
it's really blazing you fast so first uh enjoy the nice interactive plot the landscape yeah so we
can zoom in we can zoom out you see your focus and we see also that we found the right solution
and just to give you the idea so if you execute it again it's now much faster so it doesn't take
so long again and should give you a plot yeah and reasonable time so you see it's already there
so it's really only the first time you plot things which takes the most time
okay so we have a couple of questions Roland asked how how the time is chosen so this
yeah depends on your modeling so time is of course like continuously
yeah going on so you can kind of put everything into zero and one but if you have a precise timing
which let's say you want to model the last two years of two populations and in an ecosystem
how they evolved of course it would be a natural thing to to use this time frame
and and map it there i'm still you probably would map it to real numbers yeah to to have a
better feeling to make it yeah a bit more appropriate for the system but nevertheless you
give an interpretation then zero would be kind of start 2016 and one would be end 2018 that's really
more based on your concrete use case Marco asked question what's meant with interpolation
special ed fourth order free interpolation um yeah we have this as an output here so
yeah we see this and in a second at least this is my understanding of it so we can access the
solution in two ways the one is just by accessing the the the single elements of this list yeah of
these arrays so that's quite natural and Julia we can index into things by using the brackets
the square brackets and the first entry um is actually the one so you may have recognized this
already but yeah we we actually start with one and then count further and we can also use just
the the call syntax so we see we have our solution here and now we use normal parenthesis
and this will use the interpolation and here the interpolation can change depending on
the the software you use on the couple of parameters to specify configuration and giving
our configuration we get an interpolation which is actually not just linear adding two things and
taking the the middle of it but we have a fourth order interpolation which is just more concrete
and we get it so i interpret we get it for free like it was not in addition but computed
but just the process itself um had to compute it anyway so we can safely use it and don't
feel that anything was way more way slower because we now have this awesome interpolation
so this works nicely and you can also check it like um here they use an index yeah until you
use the precise time so if we go something near zero um yeah so we the approach
ah what do we approach yeah 0.5 yeah it's the value time zero match to 0.5 so it should be
more near 0.5 let's get this there and it is okay so what do we have so just to repeat
what Christoph already answered in the chat the free stands for that it's not yeah it's it's all
done with just dot products so actually linear combination of the basis functions are enough
to to get the fourth order interpolation
