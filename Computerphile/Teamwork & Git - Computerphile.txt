So what we should really talk about next is how teams use Git,
because that's the other function.
Git protects your code from other people in a way, right?
So it's designed to stop, you know,
say there's a company with like 100 developers in it
and they're all working on different parts of the code base
and that code base is stored in a Git repository.
It's got to find a way to make sure that developer number 50
doesn't overwrite the code to developer number 12
when they're working on like the same area.
So this involves a mixture of things.
This involves Git protecting code
when you're trying to do Git pushes and Git commits,
but it also involves coordination between people.
And so one thing, one of the main reasons you would see things
like GitHub and Git Labs being used is because those products,
those sort of online websites provide you with lots of other features
that are sort of added around Git functionality
to help you communicate with each other and coordinate.
So let's talk about first the Git pushes and Git commits
and what would happen in practice.
So if you have two developers and they're both being tasked
on fixing a bug at the same time and to fix that bug,
they both need to make a change to one particular file.
So maybe I'm editing files one, two and four
and he's editing files three, five and four,
but we're both going to edit file four at some point.
This becomes a situation that Git needs to manage for you.
So if person one edits those three files, including file four,
creates a Git commit and pushes them to the server,
that's fine, the server will accept it
because there hasn't been any updates from anybody else.
It's fine with that.
The second person will create their Git commits
and then type in Git push and then the server will say,
no, you can't do that because from the last time
you downloaded the latest version,
someone else has added more content.
So your version is out of date, basically.
And it will force you to get yours up to date
before it will let you push.
So there's a really handy feature is protecting the code
by stopping one person overwriting someone else.
So then what you have to do is type Git pull
if you're that second person.
You could do a couple of things.
You could do Git fetch which downloads metadata
about what has changed and then you can manually
and carefully merge things.
Or you can just type in Git pull and it will pull down
the latest version and it will try to automatically
merge everything.
So for those separate files that you both edited,
and even if you were in one file
and you edited different bits of the file,
Git will say, win you down, load the latest version
and say, great, I can merge your changes
with the latest version and just does it for you.
But if you both edit the same sort of area
and Git isn't sure, it's very good then.
It says, oh, okay, I can't do that.
I'm not smart enough.
As a bit of software, we need a human who is more smart
to tell me what should have happened here.
So what it will do is it will add
both of your lines of code into the file
with some metadata above it.
You see a bunch of side arrows
and then the word head,
and then you see the first person's code
and then you see a separator in the middle
and the second person's code.
And then some other line, arrows facing the other way
to show the last commit you've been making.
And it will say, okay, as a human,
you tell me which one to keep
or if I should keep a bit of both,
figure it out intelligently.
So your job then is to delete the metadata lines
and delete the lines of code that don't need to be there anymore
and do the merge cleverly as a human.
So that is sometimes a painful process.
It involves you communicating maybe with the other human
to make sure that, you know, why did you do that?
Why did I do this?
Do we need to keep both that sort of thing?
And then once you've merged it, you can then create and you commit
and then you can push the server,
or else push something in the meantime.
But it's your job as a developer
to make sure that you're going to push something
that doesn't break other people
and get help to do that by saying no.
Because I can imagine that if your two developers
working for, say, someone like YouTube
and you're both working on the code base for YouTube servers,
if you need to sort of subtly adjust that,
that could affect nearly everybody
working on all the different areas.
So yeah, for sure, in principle, you're right
that there's these bits that might get reused by lots of people.
So those bits would also be quite carefully protected
either through procedure or through...
Because the one thing you can do is you can
limit people to pulling areas of code, you know,
or sub-projects within Git on the server
so that not everybody is doing it.
And some bits which are really crucial
that are going to affect millions of users,
they will have serious protection lines.
And that's actually the best thing we should talk about next
is the kind of process that teams go through
to make sure they coordinate who's doing what.
So companies like GitHub and GitLab,
they have added these extra features like milestones
and issues, issues like tickets, things that need doing.
And so what they'll say is,
okay, here's a ticket that needs, like a bug that needs fixing
or a new feature we want to add,
and we'll assign it to a person or a set of people.
And those people will be responsible for writing the code
that will resolve that ticket.
So what they'll do in practice, actually, is kind of interesting.
The team is most likely to then create a temporary branch,
which we've talked about before,
with the idea of that ticket as kind of its name,
because otherwise you'd have millions of tickets,
millions of numbers.
So you name the branch after the kind of ticket you're trying to fix,
the issue you're trying to fix.
And then as a group,
you'll work only on that version that's set aside.
So you're not disrupting the main version of your software,
you're not disrupting the main branch,
you're working on like this side developer branch,
just for this particular issue.
And then you will all kind of work on that,
finish it, test it yourself, probably.
And then you will push that code onto the server.
And then you will create what's called a merger request
or a pull request,
depending on whether you're using GitHub or GitHub.
They've got slightly different language.
And what that really then says is
we want a senior developer to check it's all okay
and then merge it if it's fine.
And that job is normally reserved for someone
who's got the authority to check something
and check it's good.
And also to put it, do something risky,
like merge it with the product you're about to release.
You know, some more senior people may be given that job.
And so you can ask GitLab or GitHub to notify people
that like a new set of code for an issue is ready to review.
And companies will have review processes
that are there required to do.
Like someone will check that it meets legal standards.
Someone will check that the code structure conforms
to the company's standards and that sort of thing.
And people will say, yes, this looks fine to me.
Yes, this looks fine to me.
Or no, go back and do more.
And it creates a conversation,
forces them to have a conversation.
And then only when they're happy with it,
the senior person will do the job of Git merge
and merge it into some sort of main version of the software.
And what you'll find is some companies,
they will have the main version,
which is like their release product.
They'll have like a release candidate branch.
And the people who are doing their fixes
are branching from that branch.
And so they make sure the side one works
and then only then at some point in the future they say,
okay, this is a release-ready version
that we have collectively built.
And then someone really important
will carefully make that a public thing for someone to use.
So lots of companies will protect what's the main branch
or protect different versions.
And they won't give permissions to types of users
like developers to push directly to that
because that will break it.
So...
It might break it.
It might break it.
They're really worried that people will just push a version
or delete something critical to the main version of the software.
So all these protections and processes
are put in place to help teams collaborate.
I mentioned earlier that sometimes they create like a beta version
and they name the version with the Git tag
like a beta release ready or release candidate.
What they're doing is they're releasing the software
to a set of authorized users
who are able to download that beta version.
And then hopefully those more expert,
sort of known beta users will say,
oh I found something that breaks
and then let you know before you release it to the whole world.
And you can actually do that with Chromium
which we talked about before
because on Chromium you can download the latest beta version.
You can download the latest release candidates.
You can download the final version they ended up with yesterday.
So you can choose as a developer to go
and get these potentially buggy versions
and help them to debug it
by being part of a sort of smaller known community.
And then all the people that don't know what a beta is in practice,
they just download official releases
that Chromium tells them to update when they're told to update.
So it is handy having these kind of first set of people
that will try something to show that it breaks
which is normally like your own developer community
and then a slightly broader community
you're happy to have the beta version of
and then when it's been tested by lots of people,
then it goes out.
Because of course there are benefits in having the beta version.
It might have new features that nobody else has got right.
Yeah and so I know a lot of computer science students
are always happy to get the latest beta version
and for a while I was subscribing to the latest release candidate of Mac OS X.
And that was fine until the first release candidate for two weeks,
they broke Apple Mail.
And if people were using this on test machines that wouldn't matter
because I was using it on my main work machine
and suddenly I couldn't use Apple Mail for two weeks.
But as a person who's happy to test release candidates or beta versions,
you expect that stuff maybe doesn't work entirely.
You get early access to features, that's maybe exciting.
And probably you're technically competent enough to not worry if something breaks
or you know, delete your beta version
and then download the proper version if you really need it.
So what happens is...
So we'd have to go over here across the distributed shared memory link
to get the value and then we could bring the value back.
So rather than taking 100 nanoseconds, it would take...
Just trying to get packets from one lab to another.
Now obviously by 1986 we've got lots of things in Europe.
