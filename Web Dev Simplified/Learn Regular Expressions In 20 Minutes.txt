Hello everyone! In today's video, I'm going to be talking about regular expressions,
and I'm going to be going in depth covering everything you need to know about regular expressions.
This includes the simple stuff such as matchers, digit selectors, and so on,
all the way up to more advanced features such as capture groups, negative look ahead,
positive look ahead, and so on. So let's get started now.
Welcome back to Web Dev Simplified. My name is Kyle, and my job is to simplify the web for you,
so you can start building your dream project sooner. So if that sounds interesting,
make sure you subscribe to the channel for more videos just like this one.
And now to get started, I'm on a website here which really helps with regular expressions.
I'm going to link it down in the description below so you can go to the same website,
but it's really useful because it highlights inside of the text you're searching for
what your regular expression actually matches, and it gives you details on every single thing
that the regular expression is doing. It's great for practicing and testing out regular
expressions, so I highly recommend you go down to the link in the description and follow along
on this site. And now to get started, I first want to explain what regular expressions are,
and essentially a regular expression is a way to search through a string of text. So we have this
text in here, and at the top we have a regular expression. And what that regular expression
allows us to do is it allows us to search through that text in order to do things such as validation
or get certain pieces of the text we can do advanced find and replace,
there's a ton of things that you can do with regular expression. But in general,
all that regular expression is doing is it allows you to search through text in a really
advanced way, and even group those different searches together, so you can do powerful things
such as find and replace with it. So to get started, I kind of want to break down the format
of a regular expression. As you can see up here, we have our regular expression. And in the middle
here, we have our text researching. And regular expression is almost always going to start with
this opening slash here, this forward slash, and it's going to end with a forward slash as well.
A lot of programming languages, when you define regular expressions, instead of defining them
in sort of string quotations, you define them inside of these forward slashes. So everything
between the forward slashes is going to be your regular expression. Then also something that's
a part of a regular expression is the part after the forward slash here at the end, these are the
different flags. And as you can see, we can access these flags up here. And the main ones that you
need to know about is global. This allows you to match anywhere in the string. For example,
if we did at here, you can see that it matched all three of the different ads.
That's because we have global, it allows it to do multiple matches. But if we take global off,
it's only going to match the first result that we find. So essentially, global is like match all,
while without global is like match one. Next, we have case insensitive. So for example, if I put
the with a capital th here, and then if I make this global, you can see it's matching both of these
the and that's because I have case insensitive turned on. If I turn that off, it's only going to
match the the that is capitalized. And if we change this to a lower case, it's only going to
match the lower case one. For the purposes of this tutorial, I'm just going to leave us on the global
flag with case sensitivity. So that way, capitals actually make a difference. And that's just
because this is the most general configuration that you're going to use when messing with regular
expressions. And to get started, as you can see, this works very much like a normal find. If I
type information into here, whatever I type is going to be searched for in the string down here,
for example, at, I can search for fat, and I'm just going to get the word fat can do ran,
and so on. And it works just like normal finding replace, which is not really that powerful.
But where it does become powerful is when you can actually start adding in the regular expression
things. And the very first one that I want to talk about is the idea of these different special
characters that allow you to do certain things. So for example, we can search for the character E,
and you can see we get every single E inside of our search. But what if we wanted to search
for a string of ease, so multiple ease in a row, we could put E, and then we could put a plus.
And what this is saying, is it saying match E, but we want to match at least one, this is one or
more of the preceding token. So we're saying match E or more than one E. So as you can see,
we have this E being matched, this E. But this is actually matching both of our ease,
because there's two ease in a row. And the plus is just saying match as many in a row as you can,
but match at least one. And then another character that we can do, for example, we can put an A in
here. And we can put a question mark, and that's saying that this is optional. So optionally,
I want to get this a character. So here we have EA. So it's going to get the character E, as you
can see in all of these. And then if there's an A, it's also going to match that. So this question
mark says zero or one, I like to think of it as whatever is before it is optional. So in our case,
our A is optional. And wherever there's an A after an E, it's matching it. But in the case where
there's no A after the E, it's just completely ignoring it. The next one that I want to talk about
is going to be here the star indicator. And the star indicator essentially says match zero or more.
So it's kind of like a combination of the question mark and the plus it's saying that it's
optional, but you can match as many as possible in a row. So when we can see this is if we do R,
E, and then star, you can see it's matching anything in here that is an R. And then it matches
all of the ease that follow it if there are any. And if not, it just matches the R itself. Another
special character that's really important is the period character. And the idea of the period
character is that matches literally anything at all. So as you can see here, we put the period,
and it's matching the F, the C, and the E. It doesn't matter, it'll match anything, except for
a new line, it won't match a new line. So we have a new line right here. And if, for example,
we wanted to search for T, and then we want to search for period. And we wanted to search for
another period, you can see that it's not actually wrapping the new line, because period can't match
a new line. Also, you may notice that we want to search for a period, for example, how do we find
all of the periods, we can use here the backslash and then the period. And what the backslash allows
us to do is just cancel out anything that comes after it, it essentially escapes it. So since we
have the special character period after it, it's saying treat this as a normal period, and not as
the special wild card period that matches everything. And as you can see, we're able to match any of
our periods. And if we wanted to say what's match any character that comes before, we could just
put it period, and now we're matching any character that comes before a period, as well as the period.
Another really important special character that we can actually use here is going to be the slash
w. And this is saying match any word character. So this is going to be things like letters,
as you can see here, it's matching every single letter in our list. Also, there's the slash s,
this is going to match any form of white space that there is. And the nice thing is these have
negative versions. So capital S is going to match anything that's not a white space, capital W
matches anything that's not a character such as these letters here. And what say we wanted to
capture all of the words that are longer than four characters long. Well, we can't use the plus,
we can't use the star, these don't actually work. What we can do is inside of curly braces,
we can put a minimum and a maximum number for how large we want something. So for example,
let's say we wanted to get all the words that are over four characters, we could say four,
and this is going to get us any four digits in a row. And if we put a comma, it's going to say
get any four digits or more. If you wanted to get four to five characters, we would say four to five,
and it's going to match any set of characters that are between four and five long. And that right
there is pretty much the majority of all of your counting selectors as well as your special
character selectors that you have to worry about. But another thing that you can do is actually do
character groupings. So we can get all of the characters inside of a group. So for example,
let's say that we wanted to get any single word that ends in a T, and we wanted to get a three
letter word that ends in a T, and we wanted to get only the words that start with either F or C.
What we could do here is inside of square brackets, we put any characters that we want to match. And
it's saying match any of the characters inside of here. For example, it's going to match anything
that starts with F or C and ends with an AT. But the really useful thing about these character
sets is you can actually do ranges. So we could, for example, do a to z. And this is going to be
all of the characters between A and Z. We could also do between capital A and capital Z.
And now we have all of the characters between A and Z that are lowercase and all the characters
between A and Z that are uppercase that are going to be checked inside this regular expression.
You could do the same thing, for example, with zero to nine, if we wanted to. It's really useful
because we can do these large ranges, which allow us to do these really specific checks.
For example, we could do like a to F, and it's going to get anything between A and F,
or we could do a to C, and we're just going to get cat now in that case, something else that's
really useful is the ability to put things inside of a group. And that's what we use parentheses
for. Anything inside of the parentheses are going to be their own group, and they only
act upon themselves. So for example, we could search for T or uppercase T, whoops, uppercase T.
And with this does this little pipe character here, is it saying match any of these. So it's
like a or resolve is saying either lowercase T or uppercase T. And then we want to match
he afterwards. So this allows us to match uppercase T or lowercase T, and it's going to allow us to
match it for the word the. And the reason we need parentheses, because if we remove these
parentheses, this character here is going to check for either lowercase T, or the entire word
the, because it's going upon the thing on the left and the thing on the right. But with the
parentheses, we can actually break this up into its own group. So now it's only acting upon the T
and the uppercase T instead of the full word the also something that's really useful with these
groups is we can actually do some things such as our matches, where we could say we want to match,
for example, two to three. And it's going to say we want to match two to three of this character
grouping here. So your lowercase T or uppercase T. And so we can actually see this in effect by
doing if we want T, E, and R, you can see it's going to match between two and three of these,
let's just say we want to match between two and three of those. And you can see it's matching
over here, T, R, E, because it's in this group, there's at least three of these, and then ET,
because there's two of them. And then, for example, we could even put things after this,
for example, we want to match the period key. And you can see is giving us the EET period at the end,
because it's checking between two and three of these characters up here in the beginning. And
then it's saying the actual period keys coming after it. So with these capture groupings, what we
can do is we can actually specifically say we want to do special things only to those groupings. So
anything that we put after these groupings are going to affect the entire grouping, and not
just a single character inside of that grouping, as we were doing before. Because, for example,
we remove all this, we just change this to, for example, E of two to three, what this is doing
is only acting upon this E. And if we put, for example, an R in here, it's not acting upon this
R at all. This R is completely separate from the E. But if we were to put it inside of a group like
this, now what this is saying is any set of RE that is seen in a row two to three times. So for
example, if we put RE RE, you can say that's going to match it, we put another one, it'll match it,
but of course, the fourth one will not. Now another special character, which is really important to
get used to is the carrot symbol, which essentially says match the beginning of the line. So for
example, we put the T here, it's going to match the beginning of our statement. But if we put a
capital I, and the carrot symbol, you can see that it's not working. And that's because we are doing
this as one whole chunk of text. So this carrot is the very beginning of our entire chunk. If we
wanted to do it per each individual line, we would need to set the multi line flag. And now that's
saying that this carrot symbol is the beginning of each and every line that we have instead of
just the beginning of the actual statement as a whole. I'm going to turn that back off just so
that we know that this is going to be the very beginning of our entire statement. So for example,
our T is going to match this T here. And we could put, you know, for example, the, and it's going
to match that whole word, the, but only going to match the, the very beginning, even if we made it
so that it could be a lowercase T by doing this. So it could be either an uppercase T or lowercase
T, you can see it's still not matching. But if we remove this, you can see now it matches both of
those. Another thing that you can do is the dollar sign symbol. And what this is saying is match the
end of our statement. So for example, at the end, we have a period. And you can see it's matching
this period here. But of course, it's not matching the period at the end of street, because we would
need to enable multi line. So that way this works on the end of the line, instead of the end of our
entire statement. But again, I'm going to turn that off, just because I think it's easier to work
with when you use a whole statement, instead of multi line, at least for our examples. Now that is
essentially 90% of all of the regular expression stuff that you're ever going to use, you're really
only going to use these generic ish matches, as well as capture groups in order to make these
complex selectors. But something that you can use that really increases the ability of you using
regular expressions is look ahead and look behinds. And to get started, I'm going to talk about a
look behind first, and we're going to talk about the positive look behind. And the way that you
use a positive look behind, is you need to put it inside of a group. And this group is going to
start with a question mark, as well as the less than sign, and then the equal. So this is saying
that we want to look behind us. That's what this less than sign is. And then the equal is saying
it's positive. So it must match what's inside of here. So for example, what if we want to get
every single word that is followed by the word the, we can come in here and we can say that we
want to match either a T or an uppercase T, and we want to match H E. And we can just say we want
the very first character that's followed by the word the, so we'll just put a period here. And
you can see we're getting both of the spaces that are followed by the forward, not actually getting
the word the inside of our selection, as you can see, it's only the period. And that's the value
of these lookaheads and lookbehinds is they allow you to look at things that either happened before
or after the thing you want to capture. But it doesn't actually capture or select the thing
that you're looking behind or looking ahead for. And that's super useful. And I really like that
about these. So we can say that we want something followed by the word the, but we don't need to
select the word the. Also, there's the negative look behind. And this is going to be replacing
this equals with an exclamation point. And this is saying that we want to get anything that
doesn't have the word the before. So you can see it matches every single character, except for the
two spaces that had the word the before it. And the negative look behind is pretty much
identical to the look behind that's positive, except for it's just going to invert it. So
your results are going to be completely inverted from the results of the Nate or the positive
look behind. Now we can move on to the look ahead and look ahead is very similar to look behind,
but we just remove the less than simple. So let's come in here and we can do a look ahead
that's positive first. And we want to say that we want to get anything that has an AT after it. So
we want to get any character that's followed by AT. And as you can see, we get F, C and E, because
these are both followed by the characters A and T. And if we wanted to invert that, we just change
this equals to an exclamation. And as you can see, we're now getting everything that's not followed
by AT. So everything but the FC and the E. Now that we understand all of the basics of regular
expressions, let's actually look into implementing a regular expression to check for a phone number.
This is a great example, because it can be really simple. But as you start to add different types
of formatting to your phone number, it can get really complex and allow you to build on your
regular expression skills as you go. So let's come in here, replace all this with just a random
phone number, we'll just say 1234567890. So we have our area code of three digits and three more
digits and then our last four digits. This is going to be the easiest phone number to check for,
because all we need to do is just check for nine characters in a row. So we can just say slash D,
which is going to be for digits. This is any form of number digit. And we can just say that we want
to get nine of them in a row. I'm sorry, we need to make sure we get 10 of them in a row, because
there's a 10 digit number. And as you can see, that's matching that perfectly. But obviously,
there's multiple different types of phone numbers that we can search for. For example, we could have
the phone number 1234567890. And we also need to be able to account for that. And now I'm going to
enable multi line here, because now we can actually search each one of these lines individually to
make sure that they all still work. So now instead of just being able to check for 10 characters in
a row, we need to check for groupings. So the first thing we're going to have is a set of three
characters in a row for our digit. And then we're going to have a dash, but we want to make sure that
dash is optional. So we put the question mark. Next, we're going to have another three digits in
a row. So we're just going to come in here, say the D, and we're going to have three more in a row,
and again, an optional dash. So we'll put dash the question mark to say that it's optional.
And then lastly, we're going to do the same thing, we want to have our digits, and we want to have
four of them this time instead of three. And there you go, we now have matched both of these
different types of phone numbers. Now, obviously, another way for someone to write this phone number
would be 123 space, 456 space, 7890. This is also common. So we again need to account for that.
We can come in here and essentially put this inside of a character grouping, and we can just
put our space inside of it. So now we're saying any form of space between these, we could just
do the same thing here, we want to use space or dash. And now you can see we've matched both of
these, which is great. Now, before we get too carried away, let's say that the end result is
that we want to take any phone number that we're given and convert it to just 10 numbers in a row
with no spaces, no dashes, no parentheses. What we're going to need to do is we need to capture
all of our digits. So we can again use capture groups for that. If you remember, when we put
things inside of parentheses, it's actually going to capture those. So we can put all of our digit
segments inside of parentheses here. And now if we come down over into the details section,
you can see that it shows all of our different matches. And you can see that we have matches of
one, two, three, four, five, six, seven, eight, nine, as well as the different groups. And if we
select here, you can see it's the exact same thing, it's matching 1234567890. And again,
same thing right here, when we click on these different results, it's showing what it's matching
for each one of those. So we know that we're matching those correct groups. And we can come
into replace, for example. And what we can do is we can say that we want to take group number one,
so dollar sign one, dollar sign two, and dollar sign three, that same take group one, group two,
and group three, and just put them one after another. And this is what happens when you
don't name your groups. But you can actually name your groups by putting a question mark,
as well as the less than and greater than symbol. And then inside of here, you put your name. So
for example, we can call this area code. Then we can come and look inside of our details section.
And you can see our area code is set to 123. We can also name these other groups if we really
wanted to. But it doesn't really matter naming them is more for convenience of use when you're
actually going for finding replace and doing other complex things like that. Now let's go on and
look at another example where we have 123. And then it's going to be followed by 456. And then a hyphen
and 7890. So now we need to account for parentheses around the area code, which again, are going to
be optional. So we can come in here, put a parentheses. And we need to make sure that we
do the backslash before because this is a special character. So we have optionally one parentheses
opening at the beginning. And then here, we're going to have optionally one closing
parentheses just like this. And now you can see that it's working. And if we look down here,
our area code 123, we got 456 and then 7890. Now one other thing to account for is if you have
international numbers, you're going to have, for example, a plus one at the beginning of the number.
So we can have plus one 123456, 7890. This is another valid number that we need to make sure
we account for. So what we can do is we want to check specifically for the characters of plus
and one. And again, plus is a special character. So we need to make sure we escape it. And now
we're saying the character plus one at the beginning, as well as we can have an optional space,
or we can have here a hyphen, just like that. And we want to make sure that this is optional.
Now you will notice, down here at the bottom, our plus one also contains the space at the
end. And we don't want that space. So we can put another grouping that wraps just around the plus
one section. And now we can have our grouping that's just the plus one, but we also have the grouping
for the plus one with the space. So in order to tell regular expression to not actually check for
something with the group, we put question mark colon at the beginning of our grouping. And this
is going to be a non capturing group. So now you can see that that plus one with the space is no
longer being captured. And now if we go into our place, we can come in here, we have four capturing
groups now, so we can make sure we capture group one, two, three and four. And as you can see,
it's printing out all of our numbers exactly like we want them. And that's all there is to
regular expressions. If you enjoyed this video, make sure to check out my other videos linked over
here and subscribe to the channel for more videos just like this. Thank you very much for watching
and have a good day.
