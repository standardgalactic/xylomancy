Dim ond, y bydd oedd oedd yn 2013.
A dwi'n cofnwys inadequadwch roedd yn Llyng hoardiaeth.
Efallai efallai balmod poolw maths oherwydd Allan widell treble easier yn ddiweddarheoriaeth chebased
Felly, ychydig am lysbwyr y fl ASMR pan postm difference sy planner awrre fundamentaladau arr yn ddod a dignant.
If you read my blog, you should really name the conferences by the SCHA one to check some of the title.
The Qatar comments would be immutable and you would always be able to fine it in the future.
Dwi'n irr平sh oedd maen nhw arraig ddod.
Francesco sy'n co walRCee, nar impacted y Ray orroannu, y nadwer ryswn yn cryr.
75', ddydd'n gwir y d經u.
Dy, dwi nhw'n holl gwagieAsk.
Hefyd byddwn yn felly ei part-ıyllarpod weekly.
company rai it moving across table?
Efallai redyn ni?
A wnaeth o holl gwagai.
Rwyf ym Semharu.
O wnaeth見odd yn rhan.
Ond, dyma'r eithaf gan siarad anff Whether it might be annyn gone?
os bob ddin, hefyd I am flasio地 o'i tre bui ag Siarad o'r greyfrif.
れ feddli fel Brian Chesngo.
Richard oedd fsw 2015'n s resign.
Fe wnaethau allwn��겠습니다 y fideis arall a cael rai bydd a ph таким.
Rydych chi'n 것d—rhai o'i gwitädd y dynion wrth� Mikroedd, hefyd bob ble representation.
Mae'r dwywiad ar y dynion o'r tro wedi sicrhau bod wir yn ni indicator i ei s produces centimeterau.
Però hefyd bynnag i fod ein cardboard ac erbyn ei cyntaf, ond touswn ôl i'n gweld Alan Koeh oedd rwyf yn ei f blaen addignaleh.
I thought I'd never met Alan Kay and I thought, I got this idea in my head, I thought I'd like to interview Alan Kay on stage, and why would I want to do that?
Well it goes back to the old grey whistle, does anybody know the old grey whistle test? No, sorry it's not the old grey whistle, sorry.
I remember going late night with Jules Holland or whatever, was it called that?
Yeah, something like that. So Jules Holland, for those of you who don't know, is a jazz pianist and he has this show in Britain and he interviews people.
So he invited Elton John to be his guest and it was a fantastic interview because the first question was like, what was your...
The normal interviews with Elton John, what was your first album and when was your first break and all that kind of crap?
And Jules Holland says, you were highly influenced by somebody who's... I've played a piano, I've never heard of this person.
And for once Elton John went, oh yeah! And they had this lovely conversation and I thought, I'd like to do that with Alan Kay and ask him about his influences and things.
So I mailed Alex Miller and suggested this as an idea for a talk or for a keynote thing on stage.
And he mailed back and said, yeah, that'll be cool and we'll do that. And that was planned for 2013.
And then a month later or something, I got mailed from Alex saying Alan Kay pulled out of that and, yeah, would you like to give the keynote a strange loop?
Because we'd lost a speaker and so I gave the keynote a strange loop and that didn't happen.
But I still had the idea in my head and then in... I was trying to contact Alan, he's very friendly if you're mailing me, you get mailed back immediately.
And we arranged a meet for the first time here in 2016. I held a course here earlier in the week and I was doing the same thing in 2016 and Alan Kay had arranged to come and have a conversation.
He wanders in and Francesco had never met me, Francesco wanted to meet him.
So Francesco is holding a course in the room up there and we wander in through the back and Francesco sees both of us wandering.
He doesn't bat an eyelid, he just says, and now we'll take a ten minute coffee break and smiles.
Everybody turns around and it's me and Alan Kay have wandered in and we start talking.
So that year we invited him to London because he was in London and asked if he wanted to do this interview thing or thing.
So I thought, what the hell am I going to ask him? He's my great hero, he's had a lot of really good ideas.
He's the guy who coined the term object oriented programming. He's the guy who persuaded Steve Jobs to build the iPad and he's the guy who's had a hell of a lot of ideas.
So what do I ask him? So I thought, yeah, I'll ask him what the good ideas they had back in the 70s and late 60s that we've forgotten.
So that was a genesis of this stream of thought. What are the good ideas we've had and we've forgotten?
And I tried to ask him that. But if you get someone like Alan Kay on stage you ask them X and they answer Y instead.
So it was a mixture of history and what he wanted to say.
And then we thought that was okay. So we did it. Larry Wall came along and I again asked him what were the forgotten ideas.
And every time I met one of my colleagues, some professor here and there, I said, you know, what have we forgotten?
I wasn't writing these things down at the time. I thought, I just did my head. What have I myself forgotten?
So I started writing these things down and then I thought, I'll tweet because I'm preparing a talk.
Not this talk, actually. This is a prototype of a talk that I'll give in Chicago later on in the year.
And actually probably the title's misleading a better title might be, what are the ideas?
What for might? You see it's a prototype. Sorry about that.
Well, I was doing it on the plane last week.
Sorry, ideas we might have forgotten or never knew or needed reminding of or should have forgotten.
I mean, I can't say that the forgotten ideas, you might have never known them.
So you can't have forgotten them if you never knew them. So they might be completely new ideas, whatever.
Or they might just be silly ideas. They should be forgotten ideas.
Anyway, so I tweeted. Let me see.
Yeah. Oh, good. It's a sort of blank slide. So these are the forgotten ideas in computer stuff.
This is supposed to be completely black on the slide. It's black, but it doesn't come out in black, but never mind.
Okay, so, and I would say this is work in progress with an awful lot of personal bias.
Let's go on a bit here. So the plan of this talk is, first of all, the motivation to the talk.
I've given a bit of that already. And then it's going to turn out to be some things we should learn, I think.
And these are sort of a mixture of the forgotten ideas that should be forgotten.
I'll explain as I go along. And then doing computing is not just computer science.
It's other stuff you should know. And then it's the sort of big stuff that we've really forgotten.
And then what we can do about it? Or should we go? What can we do then?
And part two will take a long time. And I haven't rehearsed this, and I don't know how long it's going to take.
So if I'm in the middle of that and there's ten minutes to go, can somebody play windmills? Promise?
Good. Who's going to do windmills? You've got to do windmills. Great.
So motivation. How is this all motivated?
Well, I have to think about the things I've forgotten and what we've achieved in the last few years.
So back in the 1980s, when I joined the lab, I thought, what problems should we solve?
What are the big problems to solve? That's what I asked in 1990. I had to give a talk.
I go back to my talks of the 1980s. What problems do I want to solve?
Well, I thought I'd write down three problems. How do we find things? How do we store things?
And how do we program things? That seemed a good thing. So I had a plan.
Learn Emacs, learn Unix, and learn a programming language.
That was my personal goals when I joined the computer science lab.
So what happened? I didn't learn Emacs. And I didn't learn Unix.
And I invented a new programming language. Right. So what's the progress?
Well, there has been a small amount of progress on these problems in the last 30 years.
So finding things is actually better than it was back in the 1980s.
So Google and all these good people have made it easy to find things.
Of course, you can't find everything, but it's a lot better.
And it's getting better all the time. It's also getting worse.
And I'll explain the reasons for that in a bit later.
Saving things is getting slightly better. Dropbox and friends.
But they're not that good. I mean, we have to save it until the sun becomes a red giant and then we're done.
But we've got to store it on DNA or something like that.
And I keep asking these people, you know this stuff on Facebook?
My images? Will my grandchildren and great-grandchildren, will they be able to find these images?
They're encrypted in the cloud. I asked a technical guy at Facebook who's fairly high up.
He said, it's a very good question, Joe. Very good question.
We're just in danger of losing our history.
Let's store this stuff for a long time.
Have we got better at programming things in the last 25 years?
I think the answer would be no.
Well, there have been some small improvements.
Everybody thinks that advances in computer science are quick, but they're not.
You take it like the lambda calculus.
The lambda calculus is great, invented around about 1930.
When did they put lambas into Java 8? Last year or something?
Progress is very, very, very, very slow.
But you wouldn't get that impression if you see everything.
Oh, the latest thing is fantastic. I think it's very slow.
So what problems should be solved now?
Right, so I've changed my agenda.
Okay, so there's too much stuff.
I mean, once upon a time there wasn't enough stuff.
And then, right about the mid-80s, there was about enough stuff.
And now there's too much stuff.
I mean, take programming languages, for example.
Round about 19, I started programming in, like, 1976.
There wasn't enough stuff.
If you define stuff to be programming languages, there was FORTRAN and COBOL.
And FORTRAN.
And that wasn't enough stuff.
You get to the mid-80s, there was enough stuff.
There was C and there was FORTRAN and there was PASCAL and there was C.
And now there's 250, 500, 800 programming languages and one new one each week.
There's far too many of them.
And for a beginner, that's incredibly confusing.
I mean, and all of them are saying,
I'm great, this is the greatest language since Smoke Cheese.
And how can you choose?
And we've invented all this stuff.
Internet of Things and...
What are we going to do with it all?
Right.
Do we really need to hijack our attention systems every 10 seconds with a banner?
I can't do flashing text in...
Oh, maybe I can do flashing text in Keynote.
But really I should be...
I should have notifications turned on and big flashing.
You know, if Trump sneezed, I said, I mean, this is really important.
Oh, my God, Trump sneezed.
My God.
This is not a new phenomena.
I'm minded of...
Foro, who in 1854 said,
and as with our colleagues,
so with 100 modern improvements, there is illusion about them.
There is not always a positive advance.
Our inventions are want to be pretty toys,
which distract us from our attention, from serious things.
And about...
I don't know what Thoreau would have said about notifications.
Because he was complaining about the penny post.
Because the penny post was sending news.
And he said, to a philosopher, all news, as it is called, is gossip.
And they who edit and read it are old women in their tea.
And as for England,
almost the last significant scrap of news from that quarter
was the revolution of 1649.
And he's writing it in 1854.
So, you know, he didn't really think that the penny post was an advantage
because it was sending him trivia
that was distracting him from the important things of life.
And I don't think he would have liked instant messaging
and notifications and things.
OK, so, the methodology for what I was going to do.
Ask some questions, get some replies,
organise a result, choose the best things to do.
Started here, code mesh, the videos online, if you can see it.
That was quite fun.
And my question then was what ideas have we forgotten.
I said that.
Let's ask some well-known people, let's ask everybody.
And then I tweeted,
I'm interested in the forgotten ideas
and could be the science needed for a talk.
Can you post examples of CS ideas that have been forgotten?
Example, Linda, I put Boyamawr in there and everybody would say,
ah, nobody's forgotten Boyamawr.
How many of you have forgotten Boyamawr?
So all the rest, how many have never heard of Boyamawr?
Right, there you go.
Proof of concept.
You don't know what Boyamawr is.
Find somebody with grey hair, take them in a corner
and ask them what Boyamawr is and they will tell you.
If they were paying attention 20 years ago or 30 years ago.
So I tweeted this and the next day I had a little look
to see what had happened.
And I got this like 236,204 engagements.
I have a clue what an impression is.
Apparently an impression means somebody clicked on it
and looked at that tweet.
So it had reached 236,000 people who had done this.
This advantage of having Twitter followers,
whenever I get stuck I ask them a question there
and it's really great actually.
So please follow me so that when I have problems,
which I have all the time, I can ask you guys
and you can reply.
This is, I tell you.
You know what I do when I'm solving problems?
First of all I Google, Google, Google, Google.
Then I can't solve it and then I tweet and say,
how do you do this?
And that is much better than searching in Google.
But you have to have a few followers for that to work.
So it's really good.
Right, and the next day,
I looked and there was this little thing, 277.
So that's the number of people who had replied.
And I turned that into a PDF.
I wanted that in a PDF file so I could save it.
And of course I couldn't figure out how to save this as a PDF.
So I had to tweet how the hell did you save this stuff
because it's not obvious.
And yeah, somebody told me.
And I turned it into a PDF and it was 56 pages of stuff.
I thought, hey, hang on, this is fun.
So I asked some more questions.
I thought, hey, what interested in the silly ideas?
I thought, hey, why just ask about the forgotten ideas?
Let's ask about the silly ideas.
Yeah, what ideas?
I mean, we think the stuff they thought,
some of the stuff they did 20 years ago,
really stupid, how could they be so...
So 20 years time, what are people going to say of today?
What's really, really, really, really stupid?
I got a few replies.
So what started as forgotten ideas
became forgotten ideas, silly ideas,
hot research topics, money making ideas,
bad ideas, social good projects and so on.
I started tweeting about this and collecting information.
And so then what do you do with it?
I want to sort this stuff.
And this became what I would call the essential guide to computer science
or what you need to learn or a guide for the confused.
So now I'm trying to make this into a list,
or rather a list of lists.
And, well, how to make a list?
Well, collecting the data, that's the easy bit.
Sorting it into categories is slightly more difficult.
And shortening the lists is the most difficult part.
That's the really difficult part.
It's what to omit is the difficult part.
And I was thinking to myself,
this is one thing I learnt throughout my professional life.
If somebody puts a big list of things up,
my question is always, what is the most important thing on that list?
So I remember in Ericsson,
who was the young project manager,
telling us about the glorious future of 5G.
And he puts up a slide,
remote medicine, self-driving cars, internet of things.
I mean, like this.
And so I said, excuse me, what's the most important thing?
He says, well, what do you mean?
He said, well, I can only implement one thing at a time.
I'm a one thing at a time person.
So if you give me that huge list of things,
I will implement the most important thing.
Which is it?
He didn't know.
So whenever you've got a big list of things,
just ask the person what's the most important thing.
We can't do, if you see a list of 20 things,
you can't do 20 things in parallel.
You can do one of them, you can do the next.
So what's the most important thing?
And again, I thought, lists of books,
if you're teaching committee,
if the professor hands out a list of 20 books to read,
that's a cop out.
Because no student's going to read 20 books.
But for the teacher, it's okay,
because the teacher can say,
I've handed out a list of 20 books.
If the student chose the wrong books,
that's the student's fault.
It's not my fault because I have given the list of 20 books.
But if they hand out a small list,
then they become responsible.
They haven't handed out 20 books, they have chosen.
So I've tried to reduce these lists
to a very small number of things.
I'm going to recommend some papers to read,
some books to read, some things like that.
And I'm not recommending them,
they are personal recommended.
I have read the books I am recommending,
and there's not a big list.
And I'm going to recommend some programs.
So this could be the basis of a computer science course.
Because it's the forgotten ideas and the new ideas.
So here's the...
How are we doing for time?
This is a big list of what?
20 minutes, bloody hell.
Oh dear, right.
Okay, so there were 80 things in 18 categories.
And this is such an experimental lecture.
It might be a book, if you all put your hands up,
I might write a book and organise it that way.
So there's 80 things in 80 categories.
So two great papers to read, four old tools to learn,
five with a three book, but we'll read the slides later.
Okay, we'll start.
Two great papers to read.
A plea for lean software by Nicholas Viet,
and The Emperor's New Clothes.
Anybody read them?
One or both?
Were they good?
Yeah, come on, say yeah.
Yes, right.
All the ones who haven't read them, read them.
Okay, they're good.
So what does Viet say?
The belief that complex systems require armies
of designers and programmers is wrong.
A system that is not understood in its entirety,
at least to a single degree of individual,
of data by a single individual,
should probably not be built.
It's very good advice.
Reducing complexity size must be the goal at every step.
To gain experience,
there is no substitute for one's own programming experience.
This is very good advice.
What does Tony Hor say?
Tony Hor is a more conversational style.
It's a very nice, readable paper.
It's a Turing Award lecture.
I remember this.
I read it years and years ago.
This guy, Andrew,
he had just been project manager of a big project that failed,
and the managing director of the company
stormed into his office and shouted,
guys called Andrew St. Johnson,
I was surprised that he'd ever heard of me.
Andrew, what went wrong?
He always shouted.
You let your programmers do things
which you do yourself not understand.
I stared at this in astonishment.
He was obviously out of touch with present reality.
How could one person understand the whole system?
I realised later he was absolutely right.
He had diagnosed the true cause of the problem
and had planted the seed of its later solution.
When I worked at Ericsson,
the managing director of a big project,
we got a new managing director.
His first day, he stood there and he said,
does anybody understand the entire system?
If so, please come and talk to me.
Nobody put their hand up.
I was serious.
In the LN group, if somebody had asked that question,
several hands would go up.
We have to understand things in their entirety.
If you push the little bits you don't understand to the side
and think you'll solve them later,
it's very, very dangerous.
Your first question must always be,
what is the most difficult part of this problem
that I'm trying to solve and then try and solve that?
If you can't solve the most difficult bit,
give up, seek advice, find somebody who can solve it.
It's going to fail your project.
If you take the easy bits first deliberately
because you can't solve the difficult bit,
your project will fail late rather than failing early
and your company will lose lots of money.
Two good papers.
I'm not going to get through all this rapidly,
so we'll do it very quickly.
Four old tools to learn, e-max, bash, make and shell.
You could use the I, I'm not religious here.
Makes pretty damn good.
I use make for everything.
I don't use a different build system
for every programming language I use.
I use make for everything.
Good.
Right, four really bad things.
I'll only talk about one of them here.
Vendor locking.
We've been locked into platforms.
You've got a big conference, half of them are going round.
Dot net, dot net, dot net, dot net, dot net, dot net, dot net, dot net.
There's another lot of JVM, JVM, JVM, JVM, JVM.
They can't talk to each other.
I'm running goo, I'm on Apple's platform.
I've got this, Apple.
Look at the iPad, all these things, locked in, locked in, locked in.
We have given everybody supercomputers.
This thing is like 200,
I can't remember the numbers, 2,000 times the capacity for Cray 1.
So this is more powerful than the sum total
of all the supercomputers in the 1980s.
What's happened, they've made it so bloody difficult to programme
that we can't use it, basically.
And you've got to use these X code or whatever it's called.
It needs appallingly horrible things to do the simplest of things.
Sorry, I wanted to show our hands here.
Hands up everybody who's read the terms and conditions and understands them.
Right, I thought so.
Hands up everybody, I just clicked on accept.
Right.
This is nuts.
OK, three great books to read.
Algorithms plus Data Structure Seekers programme by Nicola Steart,
The Mythical Man Month,
and How to Win Friends and Influenced People by Dale Carnegie.
The first book is all you need to know,
that's not all you need to know about computer science,
that book has got a P code interpreter in Pascal,
and that is basically the JVM or the .NET virtual machine
or the Erling virtual machine to start with.
It's got everything you need to know, it's got theory of passing,
it's how to go from syntax diagrams to code,
and it's very, it's written for a programmer or a beginner.
It is the most talented computer scientist on the planet.
He's the only person who has made a programming language,
or several actually, actually not really because Pascal and Modular 2
and Obron are pretty much the same, slight tweaks.
So he's invented a programming language, he's written an operating system,
and he's built the chips.
He's the only person who masters chip design, operating system design and language design.
Other people like me, we've only done a language,
we haven't done an operating system and a chip.
Mind you, he did start doing his operating system
when he was about 65 or something, 70,
so there's hope for us yet.
It's really good.
The Mythical Man Month, who's read the first one by the way?
It's kind of cool.
Who hasn't read it, who's never heard of it?
Okay, so there's hope for you.
And the Mythical Man Month, that's the only book you need to read
about software management.
It's really great.
It just points out the fallacy of partitionable and non-partitionable jobs.
Project managers think,
if you're in this project manager space and you think,
I want to have a baby in a month, okay, let's get nine women.
Having a baby is a non-partitionable task.
Often software is a non-partitionable task.
It's a headful for one person and it takes a certain amount of time.
If you try and split it into multiple heads,
with the illusion that it's going to speed it up,
it just doesn't work.
And then there's how to win friends and influence people.
This has got nothing to do with programming.
This is about how humans interact.
It's ways to persuade people to do things.
It's the mistakes you make and how to alleviate them.
I read this book and used some of the things in it.
Over a beer, you can ask me what.
They were very effective though.
Actually, right back in...
I've completely changed my mind.
In the 1980s, I'd say an argument was all about the technology.
As an engineer, we argued the technology.
Dale Carnegie would say, no, no, it's not about that.
And Jane Valerud, who was with us when we born Blue Tail,
she used to say, it's all about the relationship.
She said the relationship comes first.
And I'd go, no Jane, no, no, no, no, it's a technology.
We had a long argument over this.
But then you see, I saw her getting results that I couldn't get.
She thought you had to be friends with people.
I thought you had to out-argu them.
First you make friends with people, then you out-argu them.
Right.
How long have we done for time? Terrible.
Ten minutes.
There'll be on camera and there'll be a PDF file.
So I'm going to...
Oh, yeah.
I do have to slow down.
This is one fun programming exercise.
Get a syntax-oriented compiler writing language by D.V. Shorry.
Seriously fun might damage your brain.
Dan Ingalls tipped me off on this.
He said, don't read it. It's like a virus in your brain.
Once you've read it, a month of your life will vanish in a black hole.
And it did.
This is seriously good fun.
Does anybody know this paper?
One person. Isn't it fun?
Yeah, he's nodding.
Anybody not know it?
Right. A month of your life is going to vanish down a drain hole when you read it.
Seriously cool stuff.
Notice my lists are short.
I would...
Maybe this would be a book. Eight great machines from the past.
These are things you can learn from.
Performance improvements.
Three great performance improvements.
Better algorithms. I reckon that gives you a factor six.
This is the Elling experience.
Better algorithms probably gave us a factor six in performance.
Changing the programming language.
Going from Prolog to C.
That gave us a factor 50.
All the rest comes from hardware.
So, wait.
Ten years, you've got a thousand.
Wait. Twenty years, you get a million
improvement in hardware performance.
So basically, if you're trying to fiddle around with your code to make it efficient,
that's the wrong thing to do.
Keep on track with the latest hardware.
That's the right thing to do. Wait for the hardware to get faster.
Elling's not faster because of gigahertz clocks.
Because we're smarter.
Five YouTube, five plus YouTube videos to watch.
This is kind of the theme of a lot of stuff.
Alan Kay has a talk on YouTube.
The computer revolution has not happened yet.
It's a kind of provocative title, but he explains why.
And a lot of people think the computer revolution has happened.
I haven't agreed with Alan.
I don't think it's happened yet.
We're starting it. It hasn't happened.
Now, if you go back even further,
further back than Alan Kay, you get to Ted Nelson.
Google computers for cynics.
You will find he's got about five things there.
Only 2,000 people have watched them.
It's a very small number of people who have watched this stuff.
Ted Nelson's a guy who invented hypertext.
Tim Berners-Lee has implemented, like, half a percent,
a very small percentage of Ted Nelson's ideas.
These are good things.
Six things not to do.
Five sins.
You should have seen my list before I got it down to five.
Perhaps if I write a book, it'll be in the appendix.
252 stupid things that people do.
Right, five sins.
Four languages to learn.
Four great forgotten ideas.
Now, I'm putting things in red.
They're more important than the others.
Linda Tuple Spaces.
Someone called Flow-based programming by John Paul Morrison.
And Xandu by Ted Nelson.
Unix pipes, of course.
I haven't really forgotten about Unix pipes.
They've been destroyed, really.
Let me just say something about pipes.
The great Unix philosophy was,
the output of my program should be the input to your program
so you can pipe things together.
So text flows across the boundary.
It's easier because messages flow across the boundary
and there's no parsing.
In my opinion, these are killed by GUIs.
You don't have a text flow into a GUI
and a text flow out of the GUI.
You can't pipe together in sequences.
So that's killed the notion of a pipe
and it's killed the notion of reusing things.
So do away with GUIs. They're horrible.
Right.
Oh, and applications. They're horrible things.
You're locked inside your apps
and they all do different things with varying degrees of success.
Each one is kind of buggy.
How do I transfer a file from this app to that app?
Well, you can't.
I know you can send it via email to Dropbox
and the NSA can have a quick peep at it while it's on its way.
Six areas to do research into.
Yep.
Precision medicine. This is great.
Good stuff.
We can use machine learning to diagnose diseases and things.
We don't need to use machine learning to target advertisements to people.
We can use it to cure their cancers.
Just think about that. That's great.
Security. We need secure devices.
Two dangers. Group think, bubble think.
Four ideas are obvious now, but strange at first.
It's kind of funny.
Indentation.
Programming in 424 by Daniel B. McCracken.
Daniel hadn't thought of indenting the code.
Then people started indenting the code.
That's a good idea.
Versioning. Nobody thought that was a good idea.
Hypertext across-merth pipes.
Two fantastic programs to try.
The Tiddly Wiki. More about that later.
And Sonic Pi.
Could you do me a favour and tweet both of these immediately, all of you.
To surprise Jeremy Rushton, who's written The Tiddly Wiki.
He needs a lot of love.
Sam Aran.
If you tweet Sonic Pi, Joe's telling me to use Sonic Pi.
Everybody go out and use Sonic Pi.
Same for Tiddly Wiki.
They'll get a storm of tweets and wonder what's happened.
It'll be a big surprise.
So do that, please.
Because they need a lot of support they can get.
I would say that an hour spent, an hour of your life.
That's not much to ask.
An hour spent using the Tiddly Wiki will be more valuable to you
than an hour spent listening to me in this lecture.
So really you're wasting your time listening to me.
You should spend an hour with the Tiddly Wiki.
Important non-computer science things.
Goodness.
Speeding up now.
How long have I got?
Five, four, three.
Can I look like five minutes over maybe?
Maybe.
Okay.
These are not computer science.
I learned to write.
I was crap at writing.
I learned to write.
I wrote a few books.
After you've written a few books you get good at it.
But I was really rubbish at writing.
Were you rubbish at writing before you wrote your first book?
Yeah, Francesco was rubbish at writing.
I was good at maths at school.
I wasn't good at dots and commas and spelling.
I got a contract to write.
Dave Thomas said we've got people who can spell.
Don't worry about spelling.
You know these proofreaders?
They've got like funny brains.
They see every spelling mistake.
Okay.
Three rules at work.
If you get a bad boss, move immediately.
Do not try to change them.
The relationship comes first.
Jane Balerud.
Engage with management.
Hamming.
The great hamming said,
the great mistake he made was not to engage with management
until fairly late in his career.
That was my great mistake.
I think I realised on the day I finally quit from Ericson
it might have been a good idea to talk to the bosses.
Just because they were doing different things to me
didn't mean that I shouldn't talk to them.
If I'd followed Jane's rule,
be friends with the management first,
maybe things would have been different.
Maybe things would have got a bit smoother and easier.
Seven distractions.
Open plan offices.
The latest stuff.
Twitter, Facebook.
Notification to turn them off.
Links.
Links are horrible.
You're doing something.
Oh, there's a link.
Oh.
Oh.
Oh, really?
Goodness.
Books are really good because they've got links in.
You don't get distracted when you're reading a book.
Turn off the internet.
Banscrumb and all this silly stuff.
Remember, you can only do one thing at a time.
Yeah.
Six ways to get your boss to programme in Erling.
Yeah, you can read that later.
One thing to look for when applying for a new job.
Look at the balance sheet of the company.
Crazy, crazy, crazy engineers.
They say, should I work for this company?
I say, have you looked at the balance sheet?
They say, no.
I say, why not?
Well, they're doing interesting technology.
Okay, so if your share price is going down, forget it.
Because there will be no room for innovation in that company.
If the share price is going up
and they've got excess profits,
there will be no room for innovation.
So the first thing you look for is the balance sheet of the company.
Right.
Three general laws.
Software complexity grows with time.
Because we build on old stuff.
Bad code grows up.
Good and bad code contaminates good code.
Laws of physics and maths.
A computation can only take place when the data and programme
are at the same point in space time.
So that's actually why a lot of web things don't work.
Because if you've got all the stuff in Java,
the JavaScript in the browser,
and you suddenly discover
that some of the data you need is on the server,
so you stop what you're doing, send a message to the server,
and wait for an answer to come back.
But then you might not get the answer to come back
and it becomes inconsistent.
And then suddenly all the problems occur.
So it's actually make sure that your application will be really trivial to write.
You make sure you've got all the data you need
and you send it at the start.
So that the JavaScript doesn't have to stop
and go and ask the server.
Or you're someone like PHP.
PHP is brilliant language.
Apart from the syntax and the semantics.
Because it takes the view
that we'll perform everything in one place.
So we'll do all on the server
where we have the database, where we have everything we need,
and then we can send the answer to the browser.
So you're not going to get these consistency problems
between the data on the browser and the data on the server.
Causality, effect follows cause.
We never know how stuff is.
We know how it was in a remote system.
We know how it was the last time it told us.
We do not know how it is now.
Most often that doesn't make much difference.
But in a lot of cases it makes a lot of difference.
You have to look at the time and so on.
And entropy is always increasing.
In the early days, Unix system had a small disk.
So programs that were not used were deleted to save disk space.
And so the system evolved, getting better.
Now we keep all versions forever on GitHub.
Which I think is rather like junk DNA.
It's sort of in our bodies forever and nobody knows what it's good for.
Nobody will ever look at it.
It's just crap, get rid of it all.
I won't say that.
Oh yeah, this is helping your non-technical neighbour.
Tell him it's not your fault.
Tell him it's crap software.
Tell him I don't understand this crap either.
And tell him computers can't do everything.
And tell him just because you're a computer scientist,
you don't know how it works either.
Right, the big ideas.
Now we're getting to the big ideas and it's speeding up.
This is a big idea.
Things can be small.
They don't have to be gigabytes.
Fourth compiler with 12 kilobytes.
The fourth OS is 24 kilobytes.
Kilobytes, I'm not talking about gigabytes or megabytes.
IBM DOS was less than 640 kilobytes.
UCSD Pascal too.
The old truth is still true.
Keep it simple, make it small, make it correct,
fight complexity.
Learning, kids can learn computing.
Old age pensions like me can learn computing.
How come it's easy to learn basic back in the 80s
and it's really difficult to programme today?
And now the web is broken.
The web is completely broken.
Why is it broken?
Well, it's not symmetric.
Very easy to read stuff.
Very difficult to write stuff.
So we have a community of users who engage passively by reading stuff.
They do not write stuff.
They cannot write any page.
You can't just change any page you see with your browsing.
I don't like that page, I'll change it.
You can't do that.
You can only change it in the way that the programmer
who had written that page had intended.
Can we make new things by combining old fragments
in new and flexible ways?
No.
And the web is dominated by a small number of companies.
Amazon, Google, Facebook, using huge data centres.
It should be controlled from the edge network.
All these super computers that we have in our pockets,
that's where the control should be.
And the original vision of the web was citizen programming.
You know, we hand out all these computers
and the citizens should use them for their mutual benefit.
Look at some talks by Ted Nelson.
So HTTP and HTML have several problems.
It's non-symmetric.
It's easy to read, difficult to write.
Pages get lost, they just disappear.
You know, this 404 problem.
Gone forever.
There's no way to reuse and to have attribution rights.
There's no micro payments, anything like that.
It's controlled by a very small number of companies.
And what's a fundamental problem with HTML?
It's lack of symmetry.
If you say, if these B things say H or F is A.
So all these Bs knows who the A is.
But the A doesn't know that all these Bs are pointing to it.
So this A over here that they're pointing to,
it doesn't know it's pointed to by the Bs.
So the A person can just move to a new machine, rename.
You see if A changes the name of the thing
or becomes unavailable, it breaks all the Bs.
So, you know, I've written a web page.
People link to it.
I didn't know they'd link to it.
I say nobody reads that web page, I'll delete it.
I've now just coincidentally broken all these other web pages.
So what you'd really want is something like that.
You want the Bs to know about the A
and you want the A to know about all the Bs.
So that if you moved the A, you could tell all the Bs.
You want to do something like that.
One model where this kind of works quite well is the wiki.
Because links can't get lost.
They are in the same wiki space, like the wikipedia.
There's no such thing as a non-existent link.
If you click on a link, you go somewhere.
If you click on a link and that page doesn't exist,
you say, hey, hey, you clicked on a link that doesn't exist.
You like to create it.
Then you create it.
It's a very nice model.
It's a tightly integrated system.
It's all in one place.
So it's got much less entropy than the web.
The web is scattered all over the place.
When you go to the wikipedia,
basically you have to add new knowledge.
You can't add old knowledge again.
Because really somebody will reject that knowledge.
So you're slowly refining and improving this knowledge.
It's highly intertwined.
It's got very low entropy.
And it's got a social model of building it
where a large number of people can make small contributions.
So it's actually a very good model of interaction.
And it's not controlled by any single large corporation.
And this goes back to the ideas of Xanadu.
Now Xanadu was an invention of Ted Nelson's.
It's been called the longest vaporware project ever.
Because even after 50 years it's never been implemented.
It was really ambitious.
In Xanadu, there would be no broken links by design.
Broken links could not exist.
There would be no difference between readers and writers.
Data could be reused in any way.
Attribution and copyright and all these things
would be strictly enforced.
You could charge for your work.
I could say to what extent you wanted it to be reused.
And in fact, the fault lies in editors, in text editors.
Because we can type text into an editor,
we can just cut and paste a link and do that.
If we had a fear improver together with an editor
that manipulated the metadata, we could say,
I could ask, in a sense, in a contract,
am I allowed to quote from your slides?
Yeah, you can. Do I have to pay to quote?
How many copies? You could put a little contract and say,
here's a little fragment of information.
I allow anybody to make 20 copies of this.
I don't allow you to make 21 copies.
And you could enforce this, actually.
You could pay for it.
Or you could not pay for it.
Or you could have any degree from open source,
closed source in any sort of spectrum.
And my goodness.
Oh, well, only on slide 85 of 114.
So the problems.
We've got to get rid of this 404, not found.
Get rid of all that stuff.
It's speeding up. What can we do?
What can we do?
OK. Hey, so, you guys, let's unbreak the web.
The web is broken.
Let's go out and unbreak it.
And let's bring computation back to these supercomputers
that we've got in our pockets
and bring the computation back to the edge network.
And let's ensure that our personal data is owned by us
and not by large corporations.
And let's make computing easy again, like it was in the past.
And let's build apps that can communicate with each other.
And I've said before, I've said a program that is not secure
and that cannot be remotely controlled should not be written.
Did I say, yeah, I don't think it should be written.
So we've given billions of people supercomputers.
So let's make a system where they can use them.
And now it's your turn to do this stuff.
Not mine, because I've been doing it for so many years.
And you're younger than me and you're going to be around for a few more years.
And go and do this stuff. Thank you.
