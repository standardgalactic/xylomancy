Okay. Thanks. Starting my clock. I'm going to talk about Vim today, so I already changed
my clothes, as you can see. Just a quick, quick, raise your hands. Who's using Vim for
development? Okay, that's almost the majority. Who's using traditional graphical IDEs for
development? All right. Okay, so there are at least five people in the room that might
be able to learn something here. All the rest, you will probably know what I'm talking about.
Where do I come from? So to put this into perspective somehow, I guess when I was 12
or so, I started writing my first program in basic, I think, on an Amiga or C64, I can't
remember. Later, when the internet arrived at our home, I started doing PHP and using
Dreamweaver. At university, they taught us Java and we used Eclipse. My first job, I was
using C-Sharp in Visual Studio for a couple of years, and my second job, I used Python
and Wing IDE, which I enjoyed much more, by the way. Last year, when I came here to PyCon,
I figured that lots and lots of very smart people were actually using Vim. I already
knew about Vim, obviously, all the time, but I always thought that it's much too complicated
and I will never have the time to learn this and it will kill all my productivity for months
or so. But when I saw that, I don't know, guys like Jacob Kaplan, most of what, are using
Vim all the time and are being obviously very productive with it, I thought maybe I should
give it a try. It was actually PyCon's fault that I started using Vim last year. Thanks
to you all. Why should you care? I mean, most of you care anyway, so I probably can skip
the slide, but obviously Vim is cross-platform, so if you're using Ubuntu, you can use Vim.
If you're using macOS, you can use Vim. At home, I've got several laptops and whatever
I feel like every day, I can just open my laptop and my Vim with my Vim config is there
and it just works and it looks the same and feels the same everywhere. It's standard on
most systems, so for example, when I'm doing web development, I SSH into my web servers
and you can be sure that Vim is installed there, so it's quite good when, I don't know,
there's an emergency and you have to SSH into the machine. You want to know that you have
a good editor on that server that you can use and that you can use in a fast and efficient
way and you don't want to screw up your files because there's an editor that you usually
never use because you are used to a graphical IDE. It's very fast. I mean, when I remember
back the times when I was using Eclipse to start up time, I was usually leaving my desk
and getting a cup of tea or so. Vim is almost instantaneous, obviously. It's good for your
health, sounds funny, but I can testify it's true. When I was programming for like 10 hours
a day with a classical IDE and moving back and forth to the arrow keys to navigate in
the text file, it actually hurts. When I started using Vim six or seven months ago and I got
this idea of using HDKLF for the movement only, so I was really like unbinding the arrow keys
so that I must force myself and hammer it into my muscle memory as fast as possible. Yeah,
it actually helps because you have your fingers on the central row when you are typing with ten
fingers, they are naturally resting there and you can just switch to movement mode and use HDKLF
to move and switch back to insert mode and you don't have to move your hand at all. It makes a
big fat difference when you work a whole day and when you code a whole day. It's highly
customizable, of course. It's great for pair programming, which is something that I want to
demonstrate if we have enough time at the end. Yeah, you can work anywhere, anytime. It's interesting
when at my last job, we basically had the opportunity to get any hardware that we wanted,
so I got myself a big fat 30 inch screen and at that time I thought that dual screen setup is
the most awesome thing in the world and it makes you so much more productive, but I realized that
since I'm using Vim, I use screen or T-marks as a screen multiplexer so I can switch between
tabs quickly, so suddenly I have lots and lots of windows and desktops at my hand, just a fingertip
away and I have actually not used my second screen for six months or what? I don't use it anymore,
so I can just go, I can code on an airplane, I can code on a beach, I can code anywhere and I
don't need to have an office environment or something, I just need my laptop and internet
connection. Another cool thing that I came up with when I thought about this slide yesterday is
you can change jobs and keep your tools, like maybe today we are coding in Python, but maybe
tomorrow we are coding in Haskell or C++ or whatever and probably Vim will have a plug-in that
suits that new programming language that we will use in the future as well, so we will probably,
I mean if you use Vim, you will probably never have to change your editor ever again. By the way,
all this is probably also true for e-max, I guess they are quite similar, but I've never tried
that one. So what am I? Pardon? Okay, so to me what do I need in order to say that yes,
this thing is a workable IDE, I want to have fast access to all files, I mean those files that are
currently open, maybe in several tabs or splits and files that I know that are in the project,
I want to have a nice color scheme and I want to be able to change it quickly, I mean some
editors give you a good way to change the color scheme, but maybe there's no standard file format
or what, so you cannot really exchange the color scheme easily, it's pretty easy with Vim. I want
to have syntax highlighting for all common files that I will use, which are in my case Python,
HTML and CSS files and JavaScript files. I want to have static code analysis, I mean with Python
everybody knows we have this great PEP 8 document which tells us how to code beautifully and there
are tools for checking like Flake 8 or Pylint or PEP 8, there are tools that can check your code
against the PEP 8 specifications and they will highlight if there are like I don't know unused
imports or unused variables and stuff like that or there's a space too much or too many empty lines
at the end of the file or something like that. Code completion obviously is the main thing why
people use IDEs and I will show you how to get that with Vim. Go to definition is another cool
thing like when I'm using Django the framework is so big, it has so many classes and modules and
I usually, although I know it by heart almost, I usually cannot remember what parameters the
function accepts for example and I don't want to go to Google or to the Django docs all the time
and look it up, so just jump to definition and look at the actual implementation of the method
and see what kinds of parameters the function allows and then you will also see the doc string and
yeah it's quite useful. Refactoring is something that this setup that I'm going to show is able
to do but I have actually never used it so I cannot demonstrate it. I somehow feel that
using refactoring with a dynamically typed language like Python is I don't know a bit,
it feels dangerous to me, I wouldn't trust the system. Yeah debugging, I think it can be done
from within Vim but I usually don't do it, I use iPython and IPDB and just open another terminal
window and I will insert breakpoints using Vim with a short key and then open another terminal
window and start my program and just wait until the breakpoint is hit and inspect the scope which
I will demonstrate here as well. Okay so we have four topics here, I will show you how to install
Vim, I will show you how to configure it for the first time starting from scratch, I will show you
how you can manage your plugins because the standard way of downloading it, unsipping it and
putting the correct files into the correct folders is quite messy, there's a better way to do it
and if time is left I will show how you can use Vim for pair programming with Tmax.
Okay installing Vim is pretty simple, this is a script that I always execute whenever I set up
a new server for my web project or when I reinstall my own system, just clone the source
and the important bit is here, this enable Python interpreter part which you will need
because the Python mode plugin is written in Python and so Vim has to be compiled with Python
being enabled and I used to install it into my home opt Vim folder so I don't disturb any other
users on the system and that's it basically and when you've done that you can check if everything
has worked by just typing Vim minus minus version and you will get a lot of stuff and you should
search for the plus Python flag, it will tell you that it has actually been compiled with Python
support, sometimes it goes wrong and when there's minus Python you know that you did something wrong
and you should try again, so that's installing Vim, should take around five to eight minutes or so.
Your first .vimrc file, so when you start using Vim people usually recommend or advise you to
start from scratch, don't take a fully blown Vim file from some hardcore hacker or so,
there's so much stuff inside you will get lost, better start from scratch and whenever you feel
that oh I want to do this, how can I do this, just google for it, go to the Vim IRC channel,
there are super many super smart people inside and they are extremely helpful, whenever I ask a
question I get an answer within two minutes. Vimbits.com is a pretty cool website where
it's like hacker news, people can post their snippets and people can upvote and downvote it,
so it's like every month or so I just go there and see what's hot and what's bubbling on top
and you usually can find lots of crazy ideas you would never think of yourself.
And I can only advise you to save your .vimrc file on your own .files repository on GitHub,
many, many programmers do that and it's a great way to get inspiration just like for example I
was talking to him right now and he was showing me some great tricks that I didn't know about and
I immediately asked him is your .vimrc file on GitHub and he's like yes of course, so I know
what I'm going to do when I'm home today. Yeah so let's do it, I just deleted my own .vimrc file
and created a new one. So when you start Vim for the first time it will look like crap,
it looks just like the terminal, doesn't really look like an editor. So let's try to make this
thing beautiful and look like an IDE. The first thing I usually do is I put this buff write post
thing here so I don't have to close and reopen the file all the time when I do changes. From
now on when I save the file will be reload, it's like doing source on the terminal for when you
change your bash rc file, you do source bash rc and then the changes will happen so now we will
do the same when we save. The standard behavior of the clipboard is something that I never really
understand so when you do clipboard equals unnamed is basically the way you would expect it to be
with any other editor so when you copy something from a website you can just paste it into Vim and
when you select and copy something inside of Vim you can just paste it somewhere else which
wouldn't work right away. Then you can enable the mouse so now when I press the option key I can use
the mouse cursor to do what the mouse cursor is supposed to do and this backspace equals to
is quite useful because the standard behavior of the backspace key is a bit weird I don't actually
know what it does normally maybe somebody here can explain it to me so when I oh shit
sorry
I will comment this out and save again so now let's say I'm typing something
and then I'm typing something more and I want to press the backspace key
oh no it works okay usually maybe some other settings have fixed this behavior as well but
usually when I try to use the backspace key it just stops there is some text in the line I'm
in insert mode and I'm pressing backspace but it just stops I don't know why this happens and
this setting this BS bullshit equals to will make will turn the backspace key into a real backspace
I like to remap my map leader key the map leader key is the special keys because the
the keyboard is so full with shortcuts already that they ran out of keys so the map leader
key gives you the possibility to bind another full set of keyboard keys because when you press
the map leader key them will wait for one second and see if you press any other keys so suddenly
we can press comma and something else to have even more places to bind stuff to
then okay this is something that I cannot demonstrate right now because the color scheme is not
installed um saving as you have seen I usually have to you have to type
colon w to save I don't like that it's like I was using ides for so long I just have the habit
of typing and pressing control s for save okay I can't press control s here in vim but I remap
it to control z and now it's already in my muscle memory again so from now on with these settings
in whatever mode I am I can just press control z and it will save very convenient the same thing
is true for quit usually you would have to type colon q for quitting I don't like that so I like
leader e for quitting it's much faster to me but this is like this is the reason why you should
start from scratch because you will probably have different ideas of where all these bindings should
be for you for yourself um okay you can have tabs and splits in vim and you want to be able to
easily navigate between them so let me demonstrate that when you when you create new tabs
it's like this it's just tabs very normal but the standard way to navigate is like pressing
control w and then one of the movement keys for tabs I prefer to press the leader key and then
n for going left and m for going right so the leader key I put it on on comma and m and n is
just all next to each other so it makes it allows me to fast to to to switch between tabs very fast
the same is true for splits so when I have a horizontal split here you would have to press
control w j for going downwards into the bottom split I I don't see why I should press two keys
so I know I remap that so that I can just press control j for going down control k for going up
or if you have a vertical split you can press control h and l to go left and right so it's
it's basically just like moving around the cursor just to press the control key then you
will be moving around the splits so very convenient okay um yeah here's a very useful thing that you
will probably use when you develop with python because it's encouraged to have all the imports
sorted alphabetically and vim users will always do this because it's so easy I just bound it to
leader s and I can just select a block of code press leader s and it will it will be sorted
alphabetically very nice um oh yes this one is cool I found this on vimbits.com I can select a
block of code and then and then and use the um greater than and less than signs to move the
whole block of code usually you can easily do this this with vim anyways but it will lose its
selection so um with this snippet it will remain its selection so you can press it multiple times
yeah okay um this one I cannot demonstrate it right now but it will show trailing white space
usually you don't want to have trailing white space in your code because I don't know when you
submit a a patch to an open source project and most people will have a script that deletes all
white space when they save and when you inserted some stupid white space and the next person is
editing the same file you will end up with lots of diffs where you didn't actually do anything
it's just because the other person automatically deleted your stupid white space so just make
sure you never insert any unwanted white space and this this line here will make sure that
it's big fat red block showing you here's white space delete this um color schemes can be installed
easily in I have um all this file is on github so if you want to start from scratch you can clone
this repository um and um do the same that same thing as well sometimes you will find
comments here like this one this will explain how you do actually install the color scheme so it's
just create a dot vim slash colors folder go inside that folder and then download this one
bad color scheme and there you go um syntax highlighting this is something that will not
work when I save so I have to restart this file and now we have syntax highlighting so vim knows
its own syntax for its own configuration file and here are a bunch of settings for um now we
are getting into the area of making this more look like an IDE so now we have uh column numbers and
the 80 characters line usually you don't want to write your Python scripts um longer than 80
characters so there's a very subtle line here I don't know if you can see it it's just a little
bit darker um huh thanks and um this one is pretty cool when you when you write a doc string for
example and maybe you don't want to care about um wrapping it correctly and you are writing over the
80 characters line after that just point the cursor somewhere into that block and press q
why does it not work I'm confused
okay I I entered awesome okay but why does this happen
hmm because I didn't save ah yeah okay okay let's try that again press q and it wraps the block
of text accordingly so that nothing goes over that line it's not always useful because like when
you have when you're using markdown or restart check text and you have for example you have uh um
bullet lists it doesn't really know that the bullet lists belong under each like um hard to
explain sorry so it's like when when you have bullets lists like this and then this and you
press q it will destroy your bullet list and put everything into one line so don't use it all the
time but sometimes it can be quite useful um undo history of 700 yeah something that I like
for pison you don't want to use tabs you want to use spaces and you want to use you want to indent
by four um this one is for when you do regular use you use regular expressions for search
that they are case insensitive ah come on
this one um it's a bit tricky I don't know if everybody needs this um
vim creates a lot of swap files and and backup files when when you save and I like to use file
system watchers so that whenever I save all my tests get executed immediately in another in
another terminal window and the standard behavior seems to be that it creates three or four file
system events and my tests get executed three or four times in a row which sucks so with these
three settings I got to fix this and when you save it's actually just one file system event
okay so that is about the vim rc now we'll talk about some plugins that um will um introduce all
this id stuff that um I want to have it's it's four plugins I won't I won't say much say much
about them right now I will just show you how they look like um oh yeah when you when you want to
work with plugins within the the standout way is you have to download a zip file or a tarball
and you have to unpack it and you have to install it into the dot vim folder and then there can be
several different subfolders there can be an ft plugin folder there can be a syntax folder and
each plugin more complex plugins will have so many files that you have to you have to read the
readme and it will tell you like copy this file into that folder and this file into that folder
and it's a big huge mess and for and especially when you want to get rid of that plugin later on
you can't remember which files did belong to that plugin and in which folders are they so
it's a mess use pathogen instead it's um very easy to install you have to create this auto load
folder uh and a bundle folder then download the the pathogen file and that's it and and insert
this call pathogen infect setting here and you are good to go from now on you can install plugins
by just um unpacking them into the bundle folder so for example if we want to install
vim power line we will go into the bundle folder and we will just clone the whole power line
repository and usually vim repositories repositories of vim plugins on github are created in a way
that the root folder has the files all in the current in the correct folder so you can just
clone the thing into the bundle folder and it will work okay um so here's a setting for vim power line
uh you will see when i demonstrate it just a second control p is a plugin for quickly
navigating through files and opening files and python mode is a very very great project uh
i think it's a wrapper around uh several other plug vim plugins that deal with python and and
make vim more like a python IDE so it's it's much easier to just install this one plugin
than several others okay this one is some stuff okay and python folding allows you to
collapse and expand your your whole code so now that i have installed these four plugins
let's go to some test repository so i've created a stupid little demo project here
python project um so the first thing we can see we have code we have syntax highlighting it looks
like python code python code it's it's it looks nice um yeah the folding plugin now i can use f
to fold and unfold blocks of code or i can use uh capital F to fold everything which is quite
handy if the file is a bit long so i don't want to scroll down and then press ctrl d ctrl d ctrl
d to go down um i just fold everything and maybe do a search for the for the function name and i
will be i will reach the code that i want to work on quickly um yeah
yeah then you should use my version i don't know it just works i i never have problems with the
dock strings yeah when i when i point the cursor here and press f it will only okay i don't have
a class in the syntax but if you would point the cursor at the class definition and press f it
will collapse the whole class uh yeah um functions are too long okay yeah um there is the i think
pylint or or pyflake or so has a feature of telling you that the function is too complex for it
if you have too many nested if and else things it will say this function is too complex
and usually those functions are also too long okay um one thing about rope rope deals with all this
go to definition stuff and code completion stuff uh when you when you use it for the first time
you should execute rope open project and this will create a dot rope project folder which
contains a config file and in that config file you will find a line about python paths and here
i would insert my the parts to my virtual environment for example when i'm using when
i'm working on jango project i would insert the parts to the virtual environment of that jango
project so that python rope actually knows where jango is otherwise it like code completion wouldn't
work right um yeah so let's try this um no we will try this later so um static code analysis
when i'm when i'm doing stuff like this it will open a quick fix window down here and it will tell me
that i have just inserted invalid syntax very useful uh or for example here it will tell me
there's a variable that is never used or for example if i import something that i never use it
will tell me there's an import that is never used and uh when i go down to this quick fix window
i can navigate through these items and when i press enter it will jump to the actual line that has
the error and so i can quickly fix this error go down to the to the quick fix window jump up here
fix this error as well and and then i'm good to go um yeah code completion very obvious so
let's say i i know there's a method that starts with l and i press control space it will give me
all options um that it guesses it it is usually also assumes some python build-in functions it assumes
variables that i have defined in this module before or um it assumes functions that i have
imported by using the star import for example um okay now control p is the other plugin that deals
with opening files so when i press control p it gives me a list of all files in the project
and it has some fuzzy file file pattern pattern matching logic or whatever so when i know okay
i want to open this file that is called something with u utils or something i just press u it narrows
down the results to everything that has a u inside or maybe everything that has an r o
okay config rope config there i am right so you can even just type down parts of the passes like
maybe you know some folder names and you know some parts of the file name so you just type down
some parts of the folder name or some parts of the file name and you will get the file so let's open
utils in a in a new tab for example when you press control t it will open a new tab whereas when you
press control v it will open a new vertical split um what else do we have oh yeah jump to
definition so let's let's assume i want to use the url join methods and i forgot the
possible parameters to this method so i can just press control g and it would jump to to my
python installation and and look up the url join method so i can just have a look at the method
declaration and implementation and i can see ah a low fragments that was the name and i can
read the doc string and find out what it does um yeah last but not least um debugging by pressing
con leader b i can insert breakpoints and i think it will also also automatically save the file
not sure maybe it doesn't and now i will open another terminal window and execute this demo
project and it will stop at the breakpoint and you can get you can get this by just doing pip
install or easy install ipython and easy install ipdbs extremely useful um ipython ipdb will give
you um color some some syntax highlighting here it will give you tap completion um so to get started
you should just type question mark there are the few commands that are available it looks
like a huge list but most of them are duplicates like a and alias is the same and so you can just
press question mark a or you will get an example what a does so some useful commands are l to give
you a little bit more context around the line we are currently on when you press it several times
it will go down you can say show me line 10 to 40 for example if you want to go more up um n stands
for next um well that's going to bt backtrace very cool it will show us that we are actually
here in this line in this file in this function and we came from here from this file this function
from this line so maybe you will realize that okay the bug isn't actually here it's it's up here but
when you when you use bt for backtrace maybe you will realize that ah something is is good is fishy
up here so you can just use you and you will go up the backtrace so now we will you can see that now
we are in the demo file so it jumped up here and we are now in the one frame above the in the back
trace and you can use arcs to inspect the currently available variables and the current scope so um
oh what did i do that was not good sorry
so arcs to inspect the variables and i mean this is just a Python interpreter you can you can type
anything that there's a valid Python command for example type data what type was data oh it's a
dictionary so cool then i can press dot and press tap twice and it will give me all options that
the dictionary has so um i remember there was something about keys to get the keys so oh yes
keys there it is and yeah so this i mean if you are a Python beginner this is the best way
to to learn actual to actually learn Python put breakpoints into your code inspect all the stuff
and then play around and see what what the Python built-ins and all the data types have to offer
all right um that's how i use them as a Python IDE i think that's pretty good already um last thing
i think a few minutes are left um i will talk about how you can if you are still not convinced
why you should use a terminal editor oh come on this will take just two minutes um
if you're still not convinced i'm in a situation that my team has um spread all over the world so
the person that i work with the most is is sitting in Germany i'm sitting in Singapore and um usually
we want to do pair programming right he has a question i have a question he has a bug and he
doesn't he doesn't know how to solve it and then i usually want to look at his code and what we did
all the time until recently is we start Skype and we do Skype screen sharing and then it crashes so
we switch over to TeamViewer and try that and it's super slow and laggy whatever i'd say i'm like
saying and talking quickly and jumping through the code and whatever i'd say he will see it 10
seconds later or five seconds later and it's it's just big brain fuck it does it's not fun right
so this is a tool called VMAX it's some wrapper around TMAX and um um i can start a VMAX session
by just typing VMAX as i did just now and the other person i will i will do i will set a port
forwarding in my router at home to port 22 and i will give the other person my ip and so the other
person will be able to do ssh pair pair proger at my ip so i i created a new user with lots of
restrictions so this person is not able to delete my home folder or something oh why does this not
work now? oh yes you are correct thanks pair proger okay okay and then the person can type
VMAX attach and now he will see what i see and i will see how big his screen is or how small so
i will i will scold him and say hey please resize your terminal um
yeah and now we can basically whatever i type here will be uh will be done on the other side
as well so we can do we can start using VIM and we can start implementing our Python code together so
i can type and he can take over and he can type again he can type as well pretty cool and since
this is only some bytes of of of text being sent over the wire this is absolutely fast and instantaneous
all right um where's my keynote thing
thank you so much questions
which file are you editing when you're in doing pair proger because it's making the
file vocal on your system yeah yeah it's on my system he's he's doing ssh into my machine
and then he's attaching to the VMAX session and we are working on exactly the same file
questions so what was the power line oh yes sorry
um
no no this this is tmax this is uh something that i have configured my tmax to do
power line is this thing below here so um yeah it shows you it gives you a graphical feedback if
i'm in insert mode it's blue if i'm in select mode it's orange yeah it's it's it's just helpful
usually it's like when i come back from from from lunch break i can't remember oh
where did i left it was it was i in insert mode or was i in select mode so i always press control c
to go or press escape to to go back into the other mode but maybe i just want to be in insert mode
and i come back oh i'm in insert mode i i can go i can go on typing i have some of the things that
you've got in store but i don't have some of the other cool things you've got um uh where are you
yeah um i have it on on my github repository
github that's github slash mbroch and then you will find my vim as a python ide talk and yeah
no my dot files is a different repository but yeah of course
yeah i will um i will export them as pdf and upload what is the best what is the best service
to upload and share slides slide share speaker deck no okay speaker deck
fun github
yeah the pdf you mean yeah just check it out okay yeah i will do that as well
pardon hey i i just started using vim last year i i i still have to get deeper you know maybe next
year we'll give a talk about uh creating slides with la la la la latex okay
oh we can ask questions
uh not uh thank you very much for my thing
do
