So that was the philosophical part of my talk, and I will be slowly moving towards really
more practical in the sense of mathematical stuff, not so much philosophy.
But from all this talk about how our brains work, the important part is that we want to
be able to, the major tools in our arsenal are abstraction, composition, and I'm going
to add one more thing to this identity.
So as I said, abstraction means we want to get rid of the details, we want to like forget
about the assembly language or machine language of what we are doing, and that's not only
in programming, it's also in mathematics or in physics, we want to get rid of unnecessary
details.
So once we get rid of unnecessary details, then suddenly what happens is that things
that were different, but they were different because of unnecessary details, they suddenly
become identical, like if you have two billiard balls of the same color, they are not really
identical if you look under the microscope, they have different maybe scratches, maybe
they have different configuration of atoms, but you can replace one with another when
you are playing billiards.
So once you abstract, things that used to be different now become identical.
This is why we have this notion of identity, and this notion of identity because of abstraction
is always non-trivial.
So there are things that are strictly identical, so like you can replace one with another and
you won't notice any difference, but then there are things that are identical for all
intents and purposes.
And in mathematics this is like a very, very important thing, that there is this distinction
between it's really the same or it's not really the same, but we will look at it as
if it were the same.
And there is even a whole foundation theory that's being now developed that's based on
like distinguishing between what's identical and what's not identical, it's called homotopy
type theory.
It's a very hot topic right now in mathematics that just tries to solve this one problem,
what are things that are equal and what are things that are almost equal or as they say
isomorphic.
Isomorphism and equality the same thing or not, should be treated the same way or not
and so on.
So composition and identity, these two things, they just define category theory.
This is all there is in category theory, it just encompasses composition and identity.
So you are now ready for the first definition, definition of category.
And I wish I could define category, what the category is very precisely, but I can't.
So I will be using terms like a bunch, the category is a bunch of objects and you would
want me to say it's a set of objects, because a set has a precise mathematical meaning,
but it's not.
So you have categories that have sets of objects and it's fine, but not all categories have
sets of objects.
It turns out that there are things that are bigger than sets.
And you might think, what can be bigger than a set?
What's a set?
A set is something that has a bunch of elements, right?
A set is defined by membership.
Is this element a member of the set or not?
But then you can build sets with sets and you can say, I have a set of sets that are
two element sets, and I have a set of all sets that are of this particular shape.
So elements of a set can also be sets.
From a set theory's point of view, everything is a set, right?
They have the set hammer and everything is a set nail for that.
So sets are built from sets and so on.
And then you can say, so how do I define a set, okay?
I will specify what kind of elements it has, right?
So I can say, okay, I have a set of sets.
There are some sets that are members of themselves, you know, and there are sets that are not.
Like a set of dogs is not a dog, so that's one, but a set of, well, it was a good example
of a set that is a member of itself, yeah?
A set that contains only itself.
A set that contains only itself.
Yeah.
So now if you can define a set that, so you can also define a set that's not, that's a set of sets that are not members of itself, right?
And then you can ask, you know, does this set, is this set a member of itself or not?
Right?
And if it is a member of itself, then it should not belong to the set.
And if it's not, it should belong.
It's like what the, you know, barber's paradox.
You know, if he shapes himself, then he should not shape himself.
If he doesn't shape himself.
So you get into these paradoxes in set theory, right?
So if I say, you know, okay, a category is a set of objects, then I immediately get into this problem.
And in particular, you cannot define a set of all sets for some other reason, right?
Because it's too big, it's like a power set of, it would have to contain all its subsets as well.
So it's a set that contains all sets, including its subsets and so on.
So these are the mind-blowing things that set theories that are thinking about and they cannot sleep at night.
So a category says, a category theory says, let's not worry about it, right?
Well, they do worry about it, but they have ways of doing this, right?
So I will say it's a bunch of objects, okay?
So a category consists of objects without specifying further whether they form a set or a bunch or a class.
Sometimes it's called a class, which is like less precise than a set.
And these objects I would just draw as dots, you know?
And arrows, and these arrows are called also morphisms.
I'll be sometimes saying morphisms, sometimes I'll be saying arrows.
So a morphism or an arrow is something that goes between two objects.
So you have an object A, and you have an object B, and you have an arrow between them, and you call it F, okay?
And now you might want to ask, you know, but what's an object, right?
And I can't tell you, okay?
An object is primitive in this theory.
It has no properties, it has no structure, internal structure, it's nothing.
It's like the atom, it's a point, it has no properties, okay?
What's a morphism?
Well, a morphism is also a primitive.
It has no properties, well, except that every arrow has a beginning and an end, okay?
So that's the important thing.
So in fact, the reason for having objects is so that you can mark the ends of arrows, okay?
They don't serve any other purpose as just being names for the ends of arrows, or identifying the ends of arrows, okay?
And notice that this is really funny that we are using arrows here.
It's like going back to what I talked about, the primitive human beings hunting mammoths with bows and arrows, right?
This is really a very interesting thing that we perceive the universe through these notions that were developed by hunter-gatherers, right?
They describe the world in terms of spatial relationships, right?
For instance, when I'm talking about category theory and when mathematicians talk about it, they will put things in space, maybe with their hands, manipulate them.
So we know how to manipulate things, right?
We know how to position things in space.
We talk about spatial relationships.
Something is above, something is below, higher level of abstraction, lower level of abstraction.
These are all spatial relationships, right?
Now, hunter-gatherers also understand movement.
It comes from here, goes here.
This is movement.
This is from arrow, from A to B, right?
It has this little thing here with barbs, right?
So when you hit the animal, it can't just pull it because it's...
Okay?
And of course we have social language.
Hunter-gatherers were social animals, so they talk about relationships between things in terms of this guy, points at this guy, and by movement, going from this place to that place, through this place, and so on.
So we'll be using this language all the time, and I want you to realize what kind of language we are using and how it actually constrains us, okay?
But anyway, so we have objects, and objects we draw in some kind of spatial relationship usually, because we are using the spatial part of our brain.
We have morphisms, which are arrows, so they suggest some kind of movement and relationship between people.
So, what kind of things can happen?
I mean, we can have, let's say, multiple arrows going between objects, so if you have object A and B, you can have zero or more arrows going between them.
So every time you define a category, you specify what are the objects of this category, and for each pair of objects, you specify the arrows that go between these objects.
Some objects are not connected with arrows, other objects are connected with one arrow, other objects are connected with infinitely many arrows, could be uncountable number of arrows going between two objects, okay?
So, like, if you have an idea that the category is sort of like a graph, that's a good idea, right?
Except that you have to be open-minded about what the graph is.
It might have infinitely many nodes, and it can have infinitely many arrows between two nodes, or it could have zero, or, you know.
But you have to expand your mind around this.
And, of course, you can have arrows going from B to A as well, right?
And you can have arrows going from B back to B, or from A back to A.
You can have multiple arrows going from A to A, right?
And so on.
So, all these are possibilities. Sometimes people get stuck and I get questions, you know.
Like, how is it possible that you can have more than one arrow?
Aren't they all the same?
No, they are different, you know.
It's like, you can have infinitely many or uncountable number of arrows going from A back to A, you know, and it's okay.
You just give them different names, you know.
You get this is F, this is G, this is H, right?
So, this is what a category is, okay?
Now, that's not all. That's not all.
Because that just tells us about what are the elements of category.
We haven't talked about these two things.
Composition.
So, composition is a property.
Very simple property.
If you have an arrow from A to B, and you have another arrow from B to C.
So, you have object A, object B and object C, and you have these two arrows.
Then there always must exist an arrow that's a composition of these.
So, if I call this one F and call this one G,
I'm using these names F and G that suggest functions, right?
Because at some point this will be one of our models for a category.
So, this is called G after F.
After is this little circle.
So, this arrow is called G after F.
And here we have this idea that going from A to B using F
and going from B to C using G
is identical to going from A to C using this path called G after F, okay?
So, this arrow is identical to the composition of these arrows, okay?
It's very important to understand that there might be multiple arrows going from A to C, right?
But this one is a composition of these two and must exist, okay?
So, for every composable pair of arrows, composable means the end of one
is the same as the beginning of the other.
And here it's important that we have these objects to identify the ends and the beginnings, right?
So, the end of this is B. The beginning of this is B.
So, they are composable, right?
And if they are composable, then there must be a composition.
There must be an arrow going from here to here.
So, this is called composition, check.
Now, when we are defining a category, the category is defined by giving us objects,
saying what the objects are, and arrows, and then defining composition,
is sort of like a multiplication table for arrows.
So, for every two arrows, you have to define what is their composition.
It's a humongous multi-dimensional multiplication table,
or infinitely dimensional multiplication table, right?
For every three objects, you have to define all possible combinations
in which you can compose arrows going between these objects and so on, right?
So, it's a humongous multiplication table.
And the whole information about the category is in this multiplication table, okay?
So, remember, this is the multiplication table for a category.
It's a composition table, how you compose morphisms.
And different composition tables will give you different categories.
Because since objects don't have structures, since arrows don't have structure,
they don't contain any information.
But the composition contains the information.
And we just, like, want to encode everything, everything absolutely in this composition, okay?
Now, identity, for every object, it's called A, right?
There is an identity arrow.
We will call it ID.
Sometimes ID with a subscript A, and this is identity for the object A.
So, there is this arrow that we call identity.
It's one per object.
For every object in a category, there is an identity for this object.
Now, why am I calling it this identity?
Because of composition.
So, if I have an arrow going from, well, let's call it A, let's call it B, IDB, okay?
If I compose this arrow F with IDB, I get that arrow F.
In this sense, this is an identity, right?
If you think of this as multiplication table, you know, F times ID is again F, right?
So, this is like a one in terms of composition.
So, I can write it using this notation that IDB after F, right?
So, first I go F and I go IDB.
It's the same as this.
Equal, okay?
This is one morphism, this is another morphism.
They are equal.
It's the same morphism, okay?
And, of course, there is a symmetric thing when I have IDA and I have some, let's call it G from A to B, right?
So, if I start with an ID, IDA, and follow it with G, I will get G, okay?
So, these two things, they are not the same, right?
I mean, this is like left identity, this is the right identity.
Sometimes they are the same, well, maybe I shouldn't say it, sometimes they are the same.
But it's just like, you have to have left identity and you have to have right identity, okay?
So, this is one of the axioms of a category or laws of the category, in every category.
So, if you think of a category as a graph, this graph has to have some special properties.
For instance, it has to have an arrow going back to the object.
For every object, it has to be this little loop, okay?
Must.
So, that's one law or actually two laws, left identity, right?
And then identity.
And there is the third law and that's associativity.
So, if you have three objects, well, here you have three objects.
Let's have three arrows, okay?
So, we have object A, an arrow F to object B, then an arrow G to object C, right?
You can combine these to have G after F.
But if you have another one going to D, right?
Then, you can combine these and have, so, F, G, H, right?
You have three arrows.
Three arrows can be composed in two different ways.
So, this one composition, I compose G F with G first, G after F.
And then, I compose this with H.
So, I have H after G after F, okay?
Now, I can also compose G with H first, right?
So, I'll have H after G, H after G, okay?
Now, I can compose this arrow with this arrow, right?
And I will get H after G after F, okay?
The difference between these two is where I put the parentheses.
Now, if I had to remember where to put parentheses every time I draw a diagram,
it would become extremely complex and probably my brain would just give up, okay?
Therefore, the axiom of the category is that this and this is the same, okay?
So, H after G after F must always be equal H after G after F.
So, this is called associativity, right?
Normal thing, associativity.
You can associate it this way or this way and you get the same result.
And that's extremely important in order to make this manageable for us humans, okay?
Now, you might think, okay, what if we didn't do this?
Is it possible still to have a theory in which this is not true?
Well, it is possible and of course, there are mathematicians who are working with stuff
that maybe not completely false, the associativity is not completely false,
but they make associativity weak, meaning that these two ways of combining things
are not really identical, but they are isomorphic, okay?
Yes?
So, in real world stuff like a finite precision arithmetic, is that the kind of thing you're
leading to?
Like you're multiplying flows and the order in which you multiply them, you may end up
with a slightly different result.
Well, then they would not form a category in the sense.
Okay.
Yeah.
The category has to have associativity, yes?
So, what do you mean by the two ways of decomposition of isomorphic?
It means that there is a transformation that transforms this into this, that is not an
identity, okay?
So, morphisms can also, okay, this is a separate thing, you can have identity between morphisms
that is not identity, it's weak identity, right?
Here I'm assuming, well, okay, so let me do, for full disclosure right now, okay?
I said, objects don't form a set in general.
If they form a set, then this category, a category is called small, okay, if they can
form a set.
If they don't form a set, it's a large category, okay?
Morphisms on the other hand, between any two objects, they form a set.
So, that's okay, right?
Now, is there a category theory in which they don't form a set?
Of course there is, right?
These are the higher order categories in which arrows don't form sets, they form objects
in a category, but we are not going to talk about that.
So, that's it, that's all, that's the category, that's the definition of category, yes?
In terms of definition, when you say the two arrows are isomorphic if they have the same
beginning and ending?
What is isomorphic?
Two arrows, would they be isomorphic if they have the same beginning and ending?
No.
No.
They are different.
No.
Yes?
Is this so much different from a group in the other great sense?
It's, okay, so the question is the set different from a group and it has some similarities to
a group, actually it has similarities to something that's called a monoi, right?
Because a group is a monoi that also has an inverse, right?
So, there are two ways in which you can impose further conditions on this and you can say
what if every arrow has an inverse, right?
You can define an inverse, say, if arrow F and G, if they combine, compose to an identity,
then one is an inverse of another, that's the definition of an inverse, right?
So, if you do this, then you end up with something that's called a groupoid.
A groupoid is a category in which every arrow has an inverse, okay?
It's still not a group, it's more than a group because a group is really a category in which
there is only one object and arrows between them.
We'll be talking about a monoi as a category and in particular a group.
But this is more because now you have transformations going between objects.
So, in a group you can compose anything with anything, right?
Here you can't, they have to be composable.
The end of one has to be the beginning of another, right?
You cannot compose anything with anything, right?
That's the biggest distinction.
Okay, now...
Notice...
So, let me give you an example, okay?
And this is the example that we'll be studying a lot because this is an example from programming, right?
We have a basic useful category that we use in programming.
And this is the category in which objects are types and arrows are functions, right?
Like, if any single argument function takes an argument of a type A and returns a result of type B, right?
So, in the sense a function is an arrow or a morphism between two types.
So, that's the category in which...
This is actually in Haskell, it's almost exactly...
Well, maybe in ML, this is almost exactly the category which you are working, right?
Types are your objects, functions are your morphisms, right?
In Haskell, it's a little bit more complicated because of laziness of Haskell, okay?
Haskell is a lazy language, so...
So, the trick is that in Haskell, every type also contains this undefined value, the bottom value,
like, if you try to evaluate it, you will get into an infinite loop, it will take you forever.
Because categories don't really take into account time.
It's like, time really is really hard to describe in mathematics, right?
Whereas in computation, we worry about time, right?
I mean, if something takes too long to calculate, that's useless for us, right?
And in particular, if it takes infinite time to calculate, which means it never terminates, okay?
It's a calculation.
So, if you have a function that goes forever, what's the return type for this function?
It's a function that's supposed to return an integer, but it never does because it goes into an infinite loop.
So, in this case, in Haskell, you say it returns an int type,
but int type contains this special value called bottom, which means it never terminates, okay?
And that's the digression I make once, and maybe from time to time I will say,
well, of course, except for bottoms, and we are ignoring bottoms,
or we are ignoring never-ending calculations and so on, right?
So, there's this caveat. There's lots of caveats here in the beginning,
and I just want to get rid of them, and later we can think in simpler terms, okay?
But, of course, you might ask, what are types, right?
Okay, types in the programming language, what are they?
It's...
Sets of values?
Sets of values, okay.
So, there is a model, a kind of simplistic model.
Maybe this works in ML, it won't work in Haskell because of the bottoms, right?
But the simplest model for types is that they are just sets, sets of values, right?
And so we can model programming in a category of sets.
We can say, okay, so instead of types, we will be saying sets of values, right?
And functions are just functions between sets, okay?
You can define functions on sets, function from one set to another set, right?
And that's a good model, too.
So sometimes I'll be talking about sets and functions.
Sometimes I'll be talking about types and functions.
And, of course, when I say functions, I'm talking about mathematical functions, right?
So mathematical function is defined between sets.
So a function is just, you know, you take a value from one set,
and it gives you a value from another set, right?
So I can even draw a picture of what might mean by a function in a set.
So I hope you memorize the definition of a category, right?
I mean, it's so simple, so very elementary.
So I can erase this now.
So it's like you have one set, you have another set.
You have elements of this set, elements of this set.
And a function, sort of, you know, takes elements of this set into elements of this set.
And again, I'm using the arrows.
But these are different arrows, because I'm not morphic, right?
So one function corresponds to one morphic, right?
But we can, like, so this is another thing that you have to be very careful with.
This schizophrenic view of a category, right?
That every category, well, not every category, okay?
But a lot of categories come from some model.
For instance, you take sets, set field, right?
And you say, I'm going to represent these sets as objects in my category.
This category, by the way, is called set.
Capital O.
This is a category of sets and functions, right?
We'll be using it quite often.
So I'll be talking about the category of sets.
And the origin of this category is that I started with sets, right?
And I know what sets are.
They have structure, right?
Every set has elements.
And there are functions.
And functions in sets, they just map elements to elements, okay?
So I know all this stuff.
I'm looking under a microscope and a set.
I know it has elements.
I know that the functions are actually a bunch of mapping.
It's a mapping from one set to another, right?
Now, when I build a category on top of this,
I have to forget about the structure, okay?
I get amnesia.
And I say, this is set A.
What's inside of the set?
I have no idea.
It's an atom.
It has no structure.
Because now, I'm putting my category glasses, right?
No structure.
What are the arrows between these sets?
Well, I look at what kind of sets these are, right?
I know elements of the sets.
I know what kind of functions are possible, right?
So I know how many arrows, how many functions are from this set to this set.
And I build my category based on this.
I say, okay, this set corresponds to an object A.
This set corresponds to an object B.
And there are 10 arrows between these objects.
Fine.
What are these arrows?
I don't know.
I forgot.
I just know there are 10 of them, okay?
And I call them A, B, C, D, or F, G, H, okay?
And the next thing is, okay, so if I have arrows from this set to this,
I mean functions from this set, another function from this set to this set.
Oh, I can compose them, right?
What does it mean to compose functions?
Well, you apply a function to an argument, right?
You get a result.
You take this result, you apply the second function to this result,
and you get another result, right?
So if you combine this, you start it here, you end it up here.
You get a function that goes, right?
Okay?
So starting with some X here, it produces a Y here,
and Y goes into Z here,
and there is a function that just takes X directly into Z.
And that's the composition of these two functions, okay?
So I know how to compose functions on sets using this, right?
So I use this information to create my big infinite-dimensional multiplication table,
composition table for my category set, and then I forget, right?
And of course there is an identity function, right,
that just takes an X into X, takes another X into X.
This is an identity function, right?
So every set has an identity function that just doesn't move the set,
just maps the set into its cell by mapping every element to its cell.
It's like a trivial function, right?
So, like, ID of X equals X.
That's in Hassan, right?
Yes?
It doesn't have to map every element to its cell though, right?
It just needs to map the set to its cell.
No, because you can map the set to itself in many different ways, right?
You can interchange element if you want.
That's also a map, you know, the set into itself, right?
Well, from a category point of view it's still...
Well, okay, so what we are doing here is we are studying the set
and we find out that there are many functions going from the set to itself, right?
One of them is the identity function.
This will become our identity morphism, right?
And by the way, identity function, when it's composed with any other function,
will give me back this function, right?
So it's a good identity function, I know, from set theory, right?
Okay, so I know that I will get that my multiplication table that I'm building,
when I take this function as my identity morphism,
it will be an identity in my big multiplication table, right?
So I'm abstracting, I'm just slashing information left and right.
I'm forgetting about what's inside the objects, what these functions do,
and I end up with this category set.
And in this category set I have these objects that now I forgot where they came from.
I have these arrows, I forgot where they came from,
but I have the multiplication table, the composition table for them, right?
And this composition table fulfills my axioms of category theory, right?
I mean, this composition is obviously associative, right?
The composition of functions is associative, so I get a good category.
I have identity, I have associativity, I have everything.
So I got this huge multiplication table, now I can forget about where it came from,
and now I have a category set.
And in this category set, you know, I don't care about the structure of my objects
or the structure of my functions or my morphisms.
I forget that my morphisms are really functions.
I forgot all this.
And now I can start thinking about, you know,
what can I say about these objects just by looking at morphisms?
And it turns out I can say a lot of things.
And we'll see later how you can identify, just by looking at morphisms,
how you can identify, oh, this set is actually empty, right?
How do you know it's empty?
I mean, if you forgot the information, then it has no elements.
You only have morphisms.
Well, it turns out that an empty set has this property that can be expressed
just in terms of morphisms, nothing else.
And I can identify an empty set.
I can identify a single element set using just morphisms, nothing else.
It's not easy, but it's possible.
So the thing is that you can identify a lot of properties of sets
just by looking at the multiplication table.
You don't really have to know what's inside these sets.
And that gives you a completely new way of looking at things,
more abstract way of looking at things, okay?
Like if you think about what's inside a set, you're thinking assembly language of sets, okay?
Thinking about elements, how they are mapped, you know?
That's the assembly language.
The category theory gives you this higher level language
in which you don't have to look inside a set.
You just look at how they are connected with arrows.
And this is like the ultimate in data hiding, right?
You have an object, it's a data type, it's a set,
but you cannot look inside of it.
It shrunk to a point.
All you have is its interface.
Its interface is how it connects to other objects.
All these arrows coming out of this object and into this object.
They define the interface.
So like if you take this idea of data hiding and abstraction,
this is where it leads you eventually.
This is the end of the road for abstraction, right?
This is the end of the road for data hiding.
This is it.
We have like the most abstract language that you can think of.
Okay?
And we can stop now.
Next time, two more.
Thank you.
