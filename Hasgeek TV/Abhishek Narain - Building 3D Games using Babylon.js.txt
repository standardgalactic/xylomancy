Hi guys. Can you hear me? At the back? Audible? Awesome. Okay, so I see a few of us walking
in. So how was the lunch? No response? Like it was probably it was pretty good. Already
okay. So in this talk, we will talk about how many of you are game developers? Game
developers? Oh, no one, no one, no one, no one. Okay, that's that's not so good. But
what we'll do is we'll try and keep it as simple as that that how many of you are
JavaScript developers? Okay, so all of you can be a game developer at the end of
this session. So that that should be our goal now. Okay. And we will use absolutely
all these tools that we will use is free of cost available. And it's often source library
that I'm going to talk about. So you can use it from any of the dev environment that you
have set up right now. And you can create beautiful games and you can sell that you
can package that into native containers as well. You might have heard about codewa or
you know, you can do it in different ways, codewa is one of the ways, but you can actually
put it on store as well. So in this talk, we will check that out how we can do such
stuff. And we'll also understand how many of you know about WebGL? WebGL? Okay, so all
you all of you know about it, but you probably haven't used it, use it as an developed anything
on top of that. Okay, so a little bit about me before we get started. I'm a shake and
I work as a technical evangelist at Microsoft. And that's where I tweet Narayan Abhishek.
So any questions post the session, you can tweet me over there and I'll respond back.
And a thing which I missed out and why I'm a game developer. So I'm basically a geek
and not just on a particular technology or a product, but anything, anything which interests
me or for instance, a couple of years back, no, interested me. So I probably looked into
that. So whatever sounds nice, I just have a look into it and games certainly was one
of the things which I play a lot. So it made complete sense to look into some of those
libraries which is available for gaming or 3D development which people can use. And primarily
I work on web games and and a vivid gamer talk about any game with me. Right. So in today's
topic, we'll talk about 3D accelerated graphics with HTML 5 and WebGL and how this thing came
into picture with the standards that's awesome and which will work across devices. And then
we'll talk about a library called babylon.js and we'll move to babylon only when we understand
the complexities of WebGL. So we'll start with that. And then we'll look into performance
considerations. Not a lot of gamers here. So I'll try and skip that part. This is primarily
focused for when you're creating a 3D game and you really want to boil down to performance
stuff so that it works on even the simplest or the cheapest of the Android phones. So
you would look into such considerations, but that's okay now. We'll just learn how to
write 3D code here or render 3D graphics here. Right. So this is a section one and all of you
know about it. WebGL is JavaScript API based on open GL ES two standards and it was standardized
by Kronoscorp and it works perfectly well with code over. I have tested it and I have deployed
it on Android tablet as well, which was lollipop. So it just works really well there. And
it works across browsers. Whoever follows the standard, all the standard based browsers,
Mozilla, Chrome, you see this eSign. What's this? Any guesses? Wow. Okay. So that's our Internet
Explorer. That's a browser called Edge, which came up from Microsoft and the intention of
this browser was to always keep updated just like an app which comes from a store just
like Chrome so that we can push in weekly updates with the web standards. So this certainly
does better than what Internet Explorer did earlier. And let's get into WebGL. And what
you need to do while you use WebGL, so all you have is a Canvas, HTML Canvas, and then
you need to do everything. You need to create shaders. So how things work in a game can
someone guess what's the basic element or geometric shape using which all 3D objects
are made up of in game? Triangle, triangle, that's correct. Triangle. So imagine if you
see a 3D human being in any game, it's actually composed of small triangles. And what you
need to know about is the vertex where you place that triangle in 3D and you place multiple
of those triangles and then you finally make any geometrical shape made be a cube. It's
made up out of triangles and stuff like that. So you need to write shaders. Basically, shaders
are those guys which will create those triangles and then it'll, you know, there are two kinds
of shaders. One primarily puts the vertex where these triangles needs to hold and then
the other one puts how you put mesh on top of that, the lighting and stuff because without
that you won't be able to see anything. You'll only see lines, triangle drawn. So these are
those shaders which you would have to write yourself while using WebGL. So that's a little
bit of a pain and if we, all of us had to be a game developer at the end of the session,
it certainly will be a difficult task to go the WebGL route. You have to work on geometry.
You really need to be good at maths. That's my learning. So I should have done a little
bit better while I was in my school. And then you have to manage the render loop. So game
works in a loop. If you see 60 FPS frames per second in a game or 30 FPS, it's basically
a loop which runs, which updates your code, updates your logic, updates your code, updates
your logic, updates your code. The code part is updating the UI. So you have a UI update
loop and then you have a logic update loop. So this works in loop 60 times in a second
and that's how you play games and you can interact with mouse or touch and stuff like
that. That's a very basic of how games are done. So let's have a look at the simple code
and this code is not to scare you. So when I looked into WebGL first, it was a little
scary. I thought game development is like real far away. And the tool which I'm using
here, it's just for my comfort level. It's Visual Studio. There's a community version
of Visual Studio which is available for free. You can use that as well. And this gives you
a very nice, I would say debugging experience for me. I'll show you that later. So that's
why I use this. But you can absolutely use any code editor, anything, notepad++, sublime
text, anything with WebGL or rather the babylon library that we'll talk about. So what you
see in this project is I have a very simple two files, index HTML, index JS. And in the
HTML file, we start with a script. You see a shader vs, a script, shader fs, two different
shaders here, and which will do a lot of mathematical calculations on where to. I'll probably
zoom in. Is this fine? Okay. Or let me do this. Good. Okay. So here's a lot of calculations
that you need to do for finding out the positions of the object that you will draw. So for each
triangle, like if you're drawing a complex object which contains like 100 of those triangles
composed of those, you got to run this loop to get the positions of each of those vertices
of the triangle. So that's one thing which doesn't look so complex here, but there's
a script reference index JS and let's try and have a look in there. So in this, just
for simplicity purpose, I have put some of those basic steps that you need to go through
to create a very basic triangle in WebGL. And you start with the canvas that you have
as part of your HTML. We call it render canvas. There's an element that we'll use to render
the three stuff. And there's a width setting, height setting of that. And then you go in
initialize the WebGL. All simple till here. Right. Now, this is how it's different from
other JavaScript programming. It's like how you work in C++ and you compile the code.
A lot of things like that happens here with the shader. It's compiled and there's a lot
of code for the shader, which the node type basically triangle. So three nodes types and
it gets the context of it. And then you have those shader initializations here. It's complex.
And then compilation of shaders into the program. Is that what happens? There's a linker which
links this shaders with the shaders. And it's quite, you know, I mean, to me it looks pretty
complex. If I have to, I focus less on my business idea or the game idea and I focus
more on, you know, how to get things done here. Right. And it works fine. So when I run
this, it's certainly, you know, bunch of code does only this. Right. It's kind of painful
like you put in so much effort and then you get this. But certainly if you need very high
deep level of control, this is the way you go because you have a lot of control over
how you want to render things. But if you want to create a quick game, certainly this
WebGL route would take you a little longer time unless you are a guru in this. So we
will try and get back, simplify this code and render better stuff a little later with
Babylon. Right. So in this process, we just quickly drew a vertex, a triangle and then
gave a color to it, which was RGB 100. And then it looked somewhat like that. But in real
3D scenarios, what would happen is you would need to have a wireframe of a body and this
wireframe, if you see these, these stuff over there, actually these are nothing but those
triangles, which we talked about. So all these wireframes built out of triangle. So you will
have a vertex coordinates for each of those triangles put in a particular file. It can
be any 3D file. There are a lot of formats around. So you can use any of those. There's
3D, Studio Max, Maya, all of these guys emit this kind of a structure. So this is the basic
wireframing. And then we have a concept of rasterization. So make it look a little better.
You have to fill in colors between those triangles. And then there's a process of flat
shading. You give flat colors to that. And it looks exactly not like this. It looks a
little better than this, but on the projector, it's coming out as this, but you do this flat
color shading in each of those triangles to make it look more real. And then you do a
garage shading. It's a guy who invented this shading and which is, which kind of blends
those triangles and makes it look real good. And then finally you do a texture mapping.
So you have a 2D texture, like a JPEG, and you map it on top of that wherever you want.
And this is how the monkey looks like now post the texture mapping. So it's like how
we have skin here. So that's the texture for this 3D object. And this is how 3D stuff works.
And when you're using WebGL, you have to take care of each of these processes, right?
So shaders, mattresses, mats everywhere, like too complex. So actually let's take the easy
way, which is Babylon.js and get rid of WebGL. And a little bit about Babylon. You can see
a lot of releases, it's completely open source. If you want to add something to it, like
export a library to this guy, you can do that. You can work on top of this. This was created
by a few of our colleagues in France and they actively work on it. So you can see it's a
good traction that the game development, Web game development committee has over this
library. And we will get started with the code. But just to give you a brief, it's as simple
as including the Babylon.js, that's the complete game engine with you. And that will take care
of your shaders, creating shaders, your physics, any of those physics like gravity and stuff
that you're applying in your 3D. It'll take care of those things. And then all you need
to do is start with instantiating an engine from the babylon.engine and set the canvas
where you want to render your context over there. So this is how you start with it. And
then of course, you creating instantiating an engine doesn't really make sense. So you
put a camera there. Camera is the person who will be viewing that scene that you draw and
you will put up light because without light, you will see everything black over there.
And then you can draw objects like spheres, you know, boxes. These comes out of the box
with Babylon and it handles the vertices stuff, you know, all those things. The library does
that for you. And then just run the render loop and you are good to go. So it has a lot
of features. Like if you're a game developer and want to know whether it does alpha blending
or, you know, can I draw dynamic meshes or can I put a dynamic text over my objects,
all those things possible. So here's a list of that. A lot of things which you might not
find here as well if you're a pro developer, pro game developer over the web. And these
are some of those objects which are pre-created by this game engine. So if you want to create
a box, a sphere, a cube, plane, a torus, a torus knot, lines, cylinder, anything of
those things, it's the primitive contains it. So you don't have to worry about it.
Babylon will generate these. All you have to give is the size of them, what kind of
mesh or texture you want to wrap on them and stuff like that. Okay. So now let's look
into a demo. And before I get into demo, well, how many of you are sleepy? The people who
are sleepy are sleeping. So that's okay. Now let's see first a small demo, what the
capability of this engine and I have put an audio. So you can render audio, you can
render video and let's see what we have. I have a small scenario, a 3D stuff built in
in this code. And what it does is this designer was the guy who actually built this whole
3D space. And what this game engine is doing is it's importing that 3D stuff built by a
designer using, you know, there's so many tools. There's one free tool called Blender.
You can use that to create these. And I'm just importing that guy and instantiating it
with Babylon.js engine, game engine, right? And on top of that, we will add a few interactions
like on tap, click, those kind of things here. So now let me just add some volume here.
There's a background audio here. So you can see a big animation and you can see there's
a physics here. So when I stop, I take back a few steps. You can see on the top, there's
a cloud and there's collision of course. So I can't like pass through here. That's all
fine. Now some interesting stuff here. There we are. Okay. And you see, I can interact based
on where I am. And there's something called, you can see here, I can see here actually
due to the projector, you can see there's a, there's a grave. And on top of that, there's
a skeleton of Hamlet. So when I click on it, there's a skull and a skeleton of Hamlet.
So it's very easy to render here. Once you have that video object, I can just put him
again. This is Clippy. Do you guys remember this? Microsoft Office. Okay. That's Clippy.
That's my cat. Forget it. This is interesting. This is, this is, this is, this is, this is
the grave for I six. That's out of support now. So that's Internet Explorer six for
you on that grave. Okay. So now, now we are in the world of standards and, and we completely
buy two standards. So we've got to stick there. And this is the small stuff. Let's get started
with this and creating this isn't really a big challenge. Right. And if you look into
the code, we start with initialization. So we'll get back to this code little later.
Let's start creating some stuff for now. Okay. So let's, here's, here's a very basic
web template, like how you create a web application visual studio. So nothing to focus on visual
studio here. It's a, it's nothing inside it. So when I run this right now, it does nothing.
I'll start with instantiating the library itself. You see there are two Babylon libraries.js.
I mean, I just had it here for your clarification. If you use the unminified version that max.js,
you will get proper intelligence with it. So development becomes much easier. So I'm
going to use that here. So that's all cool. Now let's start with canvas.
I should say render canvas, anything that you like. And this is where we will instantiate
the engine will set the context, this element and everything gets rendered here. Okay. And
this guy. Now this is all good. Now let's start with my scripts where we'll start initializing
the engine. So let me write the script code and let's start off with engine. Let's call
this, you can call this anything. We'll call this engine new. I get this beautiful intelligence
here dot engine. And I can just go ahead and mention where it needs to render. So you can
see the intelligence. If you can't read it, like just helps me out while I code. So it
says HTML canvas element canvas of type canvas. So I know that this is the canvas which I
created on the top. So I'm going to give that render canvas. And then there is an anti
L using which you can forget for now that works just to ensure that works on all browsers.
We are done with the engine instantiation. Now let's start with creating a small scene.
So I'll just go type. Okay, let me just go a little bigger here for people at the back.
Similarly, I will just go ahead and create this Babylon scene. And I will pass in Babylon
dot engine. So whatever engine I created, so I can have multiple engines if I if the need
be, or I can have multiple screens when I have a level two, level three, level four game.
So I can instantiate. I can put an engine to this. So which is the one which I created
above does this right. So we're done with the scene. Now the important stuff is what you
see is the camera. So so I got to set the camera now camera to you Babylon. Now there
are a lot of options here, you know, what what we see, it can be a fixed point camera,
it can be our rotate camera, our rotate camera is like, you know, you specify x, y, z coordinate
and it will rotate, you know, exactly like a body call that on the diameter of a sphere
if you draw or circle you draw, it will keep rotating there on that arc, which it draws
based on what radius you select, right? So we'll use that it's it looks nice. You can
do a left right. So we'll use one of those cameras, but there are plenty of cameras.
You have a point camera as well, whatever you want to use. Now in this, I have to give
it a name. So I'll call it camera. And again, there's some magic words don't bother about
when you are not a full time game developer. These are some of those stuff, whether you
want how you want to place camera, how you want the view to look like and stuff like
that alpha blending and stuff it comes use over there, but we'll neglect it for now.
So I'm just going to put a zero eight, I think you can try out these values how it works.
And then is the radius. I said it's a arc rotate camera. So whatever radius you give,
it will always, you know, rotate across that particular distance radius, right? So I will
set this guy as 100. This is the initial initialization of it. But of course, if you add controls
of moving forward and back, it will change. But this is the initialization of it. So done
this part. Now is my target. So we created this. So I will give a 3d target vector three. And where
you want this camera to be there. So we will set it initially, maybe top zero. Or you can
place it at any vertex you want on in 3d or right now it's just zero. That's okay. And
then pass the scene here. So we create a camera all good. Now the next step is if you want
to control like move back and forth, you will have to attach a control to this camera. So
we will just do that. Camera attached control and you are attaching and you specify which
HTML element we are using render canvas here. So just set that guy. So which means now you
will be able to interact with the camera in the sense you will be able to use the default
moments of the mouse. Also we will enable touch. So you can use that now without that
it will be a fixed cam. You can't move it here and there. So based on whatever the requirement
is. Now let's set up light quickly. Again in light you have a lot of other options in
what kind of light you want to set out to light which comes from a ray. We can call
it as a point light here. So that's the point light which I'll use here and set the name
of the light and anything and position of light. This is pretty interesting. Now this
is where you would say I want my light to be coming from right. So it's very important
if you want to make it look like sun. You place it real far from the object. So we'll just
go ahead and create that 3D vortex here. And specify the 20, 20, 20, 20, 20, 20, 20, 20,
20, 20 and let's find XYZ. Done with this and then it's the same scene we are working
on. Go ahead and done this. So now we have light. Now it's all good. Light's there.
Let's put an object here. Let's put a very simple geometrical object, a sphere and let's
create that on top. So I can draw a definition here. So I can draw a definition here and
it measures. If you see the options here, I have a lot. So I will create a box, cylinder,
dashed lines, decal, disk, round. These are those primitive options which this library
gives me. So if I have any of these available, which I want to draw, I'll use that create
lines. Okay. And sorry, it wasn't create lines. I will let's do create a sphere and
create a sphere. Create a sphere. Okay. Name it something. Sphere and then here's some important
stuff like segments, diameter, scene. As I said, any of these objects are made up of
triangles. So segments basically tells me how many of such triangles. So this will ensure
that it uses more number of triangles. If you have a higher segment value and your objects
will look more like those objects. Otherwise, you know, D shape, triangle-ish kind of stuff.
So you can put any value here for segment. For now, let's let's try it out with eight
first. Let's try eight and then we'll change this later on. And I will set the diameter
of this sphere. All good. And then finally use the scene. Okay. Now I'm going to create
another important stuff is this will be a sphere, but we don't have a material. So we'll create
a material or standard materials where it's as I said, it's just like a mesh. It doesn't
look, it just looks like wire diagrams. And if you want to make it look like real sphere,
we'll have to add a material to that. So just go ahead and add create a new material. There's
a standard material option. And I can put this as a standard. So I can have different
different materials out of the same scene. We're there with materials. Now I would want
to have a color to this material as well. So we can put any of those diffuse colors
like for instance, I can put a diffuse color on top of this material and it can be what
color do you guys prefer? So I can suggest something in RGB 100. This gives it a diffuse
color to that material. So I should have that material material color as red now. It's RGB.
So R is one now. All good. Now let me assign sphere of material to this guy. And let's
start with the render loop engine job run render loop. And we will use an anonymous function
here. Okay. And in this, we will just call the render loop. So let's start with render
scene dot render. Okay, I think this is good. Now we should have something running. Let's
try this out. Oh, okay. So I didn't set the CSS correct. So let's one sec. I have that
code here. This is just to set body HTML with 100% height 100% and touch action none so
that I can go ahead and interact it with touch as well. So the browser doesn't use its own
libraries here for touch, right? So now what you see in the front is we didn't draw a plane
where to give this fair to, but we fixed this fair. So there's no movement here. Now what
you see here is I can actually go ahead and rotate this fair, right? And you can see the
light I used. This is a, this, this camera, what we use here, we can go ahead and rotate
the camera. So actually it's the camera which is rotating while I move this. And I can also
go inside zoom in this particular 3D object. So it's a proper 3D, but what you would see
is the curves of this fair looks like, you know, it's an image or it doesn't look that
great. And it's because of that stuff which we talked about. Let me just go and change
this to maybe 16 segments. That just adds, you know, it eats little more memory for sure,
because drawing more triangles there, but it will make it look better. So now when I
run the same guy in here, now you see the finish of that is, is much better than the
previous time. I can rotate around this and stuff like that. I can interact with touch
as well if required. So this is interacting with touch. It works fine, right? So this
is how I draw a basic sphere. Now if I have to go and this is just like seven, eight lines
of code, instantiate engine scene objects. If you have any geometrical objects, put light
on top of that. And it's very basic maths, not, not much here. And you can build this.
This is the real advantage of this guy. And I have a few stuff which I'll not. So now
let's come back to the previous one where we had a 3D content coming from somewhere.
And this is that code. And if you look at it, it doesn't look complex either. It has
the same styling just to make it full screen. And it starts with the canvas. And what we
are doing here is we are doing a scene loader because it's 3D scene created by a designer.
Using any of those 3D tools. It can be a renderer. And we are just importing the Madison.Babylon
file which contains all the vertex details, drawing details, images of that scene. So
we are just loading that guy into this engine. And we are adding events for key up so that
we were going up and back. Basically, we have to move the camera forward and backwards,
left, right. That's what we are doing it. And it's very simple. If you want to apply
gravity, otherwise what might happen is you might just go out of the box up, down, right?
So all you do is in the same camp code which we wrote earlier, you can do a apply dot,
apply gravity, dot check collisions, collisions, dot check collisions will ensure that you
can't pass through an object. It will always collide with any other collision objects.
And that's all it does. Finally, it attaches the camera to the scene. So it creates that
same stuff because it had a Madison.Babylon file which had the 3D assets in it. So you
can take it that way. But if you don't have it, you can build all the geometrical objects
that you have. You can even put texture on top of that. Now, before I finish, I would
like to show you, there's a beautiful playground. This is a tool I was talking about, Blender.
And actually, this is a BabylonJS playground. This is available online, BabylonJS-playground.com.
You can go right here and you can edit, you can play, instantiate the engine and you can
see it here. And you can make some changes here. This is a scene with a texture and a
height map. Height map is, you know, lets you draw something of these things. So it's
basically a world map, what you see here. And you can actually go ahead and play around
with this. Based on height map, it has added the texture of the world map on top of that.
So it looks like this. And you can start with simpler basic scenes if you want to learn
that. So we have internet. You for sure would need internet for this. So this is a nice place
if you haven't yet set up a Babylon.js file locally. You can use this playground, a nice
place to learn, set, see different stuff, play around with the code. And now, let me quickly
come back to the slides before we close for QA. And I have a lot of other samples as well
on Babylon. I think one of my favorites is, you know, this is a, this is a, this is a
really cool place. Okay. I will, I have all these samples which we did. And you can always
use that. This is for collisions and 3D multiple balls falling here with the collisions engine
working with Babylon code. So you literally have to do nothing just to add the different
elements as colliders and that it takes care of. Right? So I'm open for questions. If you
have any and Babylon.js playground, you have all the resources out there for learning it
as well. This is another 3D object which we are importing using the Babylon engine. And
I have a question here. So I want to ask like how much resource is this using? It's like
I will run this thing on Raspberry Pi, say the resources very limited. So will it be
like rendering properly, smoothly? Yeah. So it's just like any other game engine. And
we talked about how you build your 3D stuff with those triangles. It comes to say, suppose
we are not using 3D. We are using only 2D features. Okay. Yeah. So still you are drawing
triangles and not to get distracted. So it completely depends on how accurate you want
your 2D things to look like. And I can play around with those number of triangles and reducing
that helps improving your performance. So it doesn't add a performance overhead on top
of the GL. It only tries to make it more performance, performance in terms of doing better garbage
collection.
Wouldn't there be like a RAM issue? In any 3D, there will be a RAM issue. Like when you
are working natively with the GL and if you are not doing a GC properly, there will be
a RAM issue. Right? Each of these assets, it completely depends on this. If this asset
is 20 MB, how can I make it less than 20 MB? I cannot. Right? I have to load that here.
So my whole game with all interactions now will be 21 MB. Right? So you, you, if you
want to cut down on that, is the designer, you have to ask, give me an asset with less
number of vertices and should be lighter. Right? So it's not the developer. Developer
can optimize it from GC side. How I ensure that I create less JavaScript objects and
reuse more that, that helps me out. But Babylon as an engine does that for you. So you don't
really have to worry about performance here. This is a nice looking skull. Hi. Right? So
you can use it. You can zoom in it. This can be scary. Right? So right now, frames per
second is very low because it's running on a debug mode with VS. So there's a debugger
which keeps track of it. But if you run it in release mode, it'll be much faster here.
Okay. To help performance, it's certainly if you are new game developer, helps you out
with ensuring that GC and stuff works more efficiently, the engine does that for you.
Right? So, but your question to make it work on a slow and Android device completely depends
on what assets you are using. If you're just using geometrical shaped assets, for sure you'll
never have a, you know, performance issues. The moment you start importing more and more
3D assets is when the issue starts keeping. You had a 2D game, so it can work with geometry
there. Hi. So I had a question about this. So I think you have heard about phaser and
3Js. Right? So I was wondering what are the strengths or weakness of Babylon when compared
with 3Js? My specific use case scenario will be implement specifically 3D models for web
VR stuff, which I know is not there in age yet, but yeah, for those purposes. So it will
interact with a lot of other APIs out of a browser. And in that case, or any normal 3D
cases where there will be heavy intensive 3D rendering going on, but like mission is
not an issue resource. In that case, what will be the strength or weakness? Comparing
with 3Js and Babylon. Okay. I haven't done a comparison of that yet, but when you mentioned
about your scenario of interacting with any applications, this guy works in well. We have
integrated this with many enterprise-grade applications to render 3D as well, but I don't
have a direct comparison with other library you mentioned about. So guys, any questions
on Babylon? I'll take that offline. I'll just come down there. I'm available over the email
or the Twitter. So just feel free to launch a question there. Thank you.
