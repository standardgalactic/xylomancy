Okay, we've got lots to go through, so let's get through it.
So most people have heard about the Lambda Calculus.
How many people have heard of Lambda Calculus?
How many people have ever actually done anything in it, one person?
Awesome.
A couple people, yeah, Tom's done a little bit of it.
So I'm not really going to go into the details of Lambda Calculus and all of that.
It leads to church numerals, and I find those a bit pretentious.
Fancy list manipulation, stuff like that, but the code's really cool.
When all you have is a Lambda, when all you have is a function, and you don't have anything
else.
So most people have kind of heard of it, but few people have really actually gone in and
done anything with it or actually seen why.
And a lot of times if you do see people give talks on it, it's things like, here's how
you build lists, and they just kind of put out the code.
So what I thought it would be fun is to do some coding with a couple constraints, the
main constraint being that all we have is a Lambda, and in fact it only has one single
input and single output.
So a lot of the times coding, you can learn a lot if you put these really crazy constraints
on what you're doing.
So I thought, what fun did a coding conference then to stand up here and actually live code
stuff with you?
The other thing is we're going to do today in these 50 minutes, we're going to build
up what are called the natural numbers.
Anybody heard about numbers?
They're pretty useful.
We're going to do them with something called Piano's Axioms.
Anybody heard of Piano's Axioms?
Awesome.
So Piano was a 19th century mathematician, Italian Giuseppe Piano, made these axioms
as a sort of a statement about the natural numbers, zero, one, two, all of those.
We're not going to go into a lot of the sort of mathematical formalism about it, but we're
going to kind of go through starting with just a Lambda, and I'll show you what that
looks like, and we're going to end up with the natural numbers.
Fun coding exercise, everybody's happy.
So what I want to do is I want to look through the Piano's Axioms, and I'm sure all of you
have them in your clipboard ring like I do.
So the Piano Axioms, there's eight of them.
The first one is a pretty obvious one, that zero is a natural number.
It's sort of like the starting point.
The next four are Equality Axioms.
They talk about quality.
This will take you back to grade school.
For every number x, x equals x.
That's reflexive.
For everything x and y, if x equals y, then y equals z.
That's symmetric.
For all numbers x, y, and z, if x equals y and y equals z, then x equals z.
That's just transitive.
For all a and b, this is an important one.
If b is a natural number and a equals b, then a is also a natural number.
This seems like kind of a weird one, that we have to have an axiom about being closed
under equality, but this is essential because it means that if you have two things
that you're saying are equal, one of them isn't like a cow or some other thing.
It's a natural number.
If two things are equal, they're both natural numbers.
The next three are about what is called a successor function,
which we're going to build.
It's going to be awesome.
For every number n, s of n is a number.
So we're closed under succession, I guess, or successor.
For all numbers m and n, this is important.
m equals n if and only if the successor of m equals the successor of n.
This is effectively 0 equals 0, 1 equals 1, 2 equals 2, but we're going to use this 2.
Great advantage.
Number 8 says that for every number n, oh, bye.
If you find the successor of n equal to 0, that's false.
So 0 is kind of our starting point, and we'll actually use this one surprisingly.
There's a ninth axiom, which is about induction, which is the way of saying that,
oh, it's true for 0 and 1, and it's true for everything, so it's true for everything.
I'm going to skip that and just wave my arms a lot.
So, okay.
Brief aside about how, I'm going to use Ruby.
Most people would think that Haskell would be a great thing for this, and it would.
But we're going to use Ruby because it's well Ruby.
So, a lambda and Ruby gets written like this.
Get an identifier, you don't need to know, if you don't know Ruby, that's okay,
because most of the time when I'm done with this, nobody has actually recognized
that I've written Ruby.
We get an identifier, in this case, the identity function,
little stabby pointy thing, and then an x, which is your parameter.
We're only, Ruby lambdas can take multiple parameters, but
we're only letting them have one.
And what's inside of it is your return value.
In this case, this is the identity function.
You can actually call Ruby parameter or Ruby lambdas in two different ways.
You can use this wonderful dot
parentheses syntax, it looks like a method call.
Or you can use this bracket, which looks like accessing an array and
doesn't seem like it should actually execute the lambda.
But if you run this, and yeah, that actually is my normal prompt, it does run.
So, we're of course going to use the crazy bracket one.
Because why not, the other one has actually one more character, and
I don't like to type that much.
So, let's get started.
Everybody's cool.
We need a good starting place.
And a good starting place, as I learned last time I watched,
I believe it's the sound of music, is that it's at the beginning.
So, zero's a natural number, that's a great place to start.
So, let's start with that.
So I'm gonna actually write something that is zero, zero.
That seems like a pretty straightforward thing to write.
But problem is, of course, I don't know anything about this.
I don't know anything about the zero function.
I don't know anything about that zero statement there.
We don't have any information at all.
And also axioms are about statements of fact.
They're not about just having a piece of code.
So really the axiom is more something like this.
That I can assert that there's a zero, that there is something.
So now I've got this other function assert, of course.
I don't know anything about that either.
And I'm just making stuff up as I go along.
So, let's take a step back and talk about assert.
So, the behavior we want from assert is,
assert is something that I want to use to figure out if a statement is valid.
Oops, that wasn't, oh, if a statement is valid.
Now, what does that mean?
I don't know yet, but I know that if it's valid,
I want it to print out something like a t.
And if it's invalid, I want it to print out something like an f.
So it needs to tell the difference between these two things.
And I'm going to make up two other functions and
two other statements called true and false.
So, my assert function, if I pass it true,
I would expect it to output a t, right?
And if it's false, I'm going to have it output an f.
This is just a statement I can make up anything I want because that's,
I got nothing to work with.
So, we've got these two new functions now, true and false.
Remember, everything's a function in this.
So, now I've got a little bit more information.
I can talk about assert.
Now, so what are true and false?
So I've got these two statements.
So I'm going to do a little bit of circular logic here,
because that's always a great way to make decisions.
So, true is the thing that if I pass it to assert, I see a t, right?
And false is the thing that if I pass it to assert, I see an f.
That's great.
I can make up things as I want.
Assert, if I'm going to say the definition of assert,
the behavior I expect is that if I pass it a true, I see a t.
And if I pass it a false, I see an f.
It does seem kind of circular, but the only way to really talk about things and
to figure things out is how they behave together.
Because if you abide by certain philosophies,
nothing actually exists in reality except as they interact with other things.
That's kind of how I live, so we're going to do that.
So, what can I know about assert now?
What I do know is that assert accepts something.
And it accepts something called a boolean.
I'm just going to make this term up.
I don't know if you've ever heard of this.
I'm going to make it up to mean true or false.
But we don't know what assert actually has to do.
So we figured out a little bit about it that it needs a boolean.
If you look at assert and you look at the definition and
this sort of circular logic, is that it's got to do three things.
It has to figure out if I pass in a true or a false.
It's got to figure out what to do, so print a t or print an f.
And it also has to execute that function.
So it's got to figure out what are the cases.
Choose which case and then execute that case.
That's three things.
And of course, that's way too many things for a function to do.
Well, one of the core principles of the lambda calculus and
lambdas in general is this concept called the single responsibility principle.
Mostly because you only have like one line in there and so you can't do much.
So, what we're going to do is take a look at assert.
And what we do know is that it needs to either puts a t or
I want the function of puts an f.
So assert its job is to actually do one of these two things.
So we've already mentioned booleans that are true and false.
These encapsulate the idea of two different things, right?
We've got them right up there.
So it seems reasonable to handle, let them handle an actual choice mechanism.
So our booleans are the things that we're actually going to use to do the choosing.
But we need one more construct.
We have three things to do.
We've got a responsibility for assert.
We have a responsibility for our booleans.
We have a third thing and I'm going to pull just a word out of the dictionary.
And I'm going to call that if.
I know it's kind of crazy.
So what ifs job is to do is to actually execute the final thing.
So it's sort of a coordinator between my assert method and the boolean itself.
I'm just making this up and it's got two letters so it's okay.
One of the things that I want to be able to say about it, so
I'm going to, I want to give a little bit of definition and little examples of it.
So if I give it a true, and I give it something that says you gave me a true.
And then I give it something, a second thing that puts you gave me a false.
And I actually spell that right.
Then I should see you gave me a true and you gave me a false.
This is what I would like to have happen.
I would like the if statement to actually execute this.
It coordinates between the boolean and these two options.
For the sticklers out there, I am kind of breaking the only lambdas rule here.
I'm using some Ruby stuff to do puts and there's a string there.
But that's where expediency have to bear with me a tiny bit here.
Otherwise, we're going to end up spending all day generating numbers and
letters and strings and lists and all of that.
And I don't really feel like doing that today.
So let's look again at this.
Now, what is if?
What can I tell about if since I've wrote these examples?
So what I can say is that if it's a function that when given true,
executes the first function that I gave it.
And if I give it false, it executes the second function.
That's sort of the definition.
That's what I want this construct to do.
No, because false executes the second function.
So I want this to say the first time you gave me a true,
the second time you gave me a false.
So awesome.
So with this, I can start to define a little bit about if.
I can start to figure out a few things about it.
So what do we know?
We know that if takes a Boolean, right?
That's that first thing.
It returns a function that takes something else because remember,
we only accept one parameter per function.
That's this second thing, the true case.
And then it takes a false case.
Like that.
But I don't exactly know what goes here.
I know that I want the behavior to be if Boolean is true,
execute true case, if false, false case.
So I know that that's kind of what the functionality that I want.
So one thing, we're gonna be implementing a couple sort of functions that
technically take more than one parameter.
But because our constraint is only one parameter,
we have to do this sort of like crazy indented passing in other functions and
things like that.
I like to write it like this to sort of highlight that it actually is
a three parameter function, but because I'm silly and
put a constraint on myself, I can't do that.
Okay, so also helps with some indentation stuff.
So let's keep moving on.
So the if statement is responsible for the execution.
We decided that the Boolean was responsible for choosing.
So we kind of, it would be nice if we could do this.
Now, what this says is, hey Boolean, why don't you choose between these two?
And then whatever comes back, I'm gonna execute.
I have to pass in the identity because remember,
we have single parameter functions, so I can't just call the function.
I have to give it something.
And identity is the closest thing we have to, I don't care.
Like it's identity, who has an identity?
It doesn't really matter, nothing exists.
Okay, so now we have a little bit about true and false.
Now we've determined a few of the behaviors or
one core behavior that we need, which is that true,
it takes a first parameter and it takes a second parameter cuz
that's what Booleans do, and what does it do?
It returns me the first one.
It returns me the true case, false on the other hand.
Let me just grab that, false returns me the second one.
So now this if statement works.
I pass the true case and the false case, if Boolean happens to be true,
it will return me the first one.
I execute it, great, and let's see if it runs.
And sure enough, we have our little sample here working.
So now we have an if statement.
We've devised this crazy idea called Booleans, so
we can move on to assert now.
So of course, our assert is pretty easy,
because we have everything that we needed.
So if my Boolean is true, then prints that, otherwise, there.
So I just check it.
This is the kind of a standard way to write it.
Now I would expect my initial things that I wanted to assert true and
assert false to print t and f, and sure enough, they do.
So now I have an assert method, and of course,
everybody knows that you can't code if you don't have an assert method,
because how do you know it works?
So now we have our testing framework, which is really all you need, and
we can come back.
So we've done a lot of work here just to get sort of a basic thing.
And there's this weird thing too here.
The reason you have to put this, wrap this in a lambda, and
I can't just say if Boolean puts t, is because Ruby is an eager evaluating
language, which means that Ruby evaluates every function argument
before it calls the function.
And so if I didn't have this lambda like that,
it would actually try to execute that puts t and the puts f, and
then it would go into the functions, and you'd end up with a nil reference
exception, which is sort of the general exception that always happens in Ruby.
Okay, so we've got our assert.
I'm gonna jump just slightly ahead, because if you have assert,
it always is nice to have refute, which just does the other side.
We're gonna use this later.
Refute just says the Boolean should be false.
There's a whole nother talk I'm putting together where we actually build up
Boolean logic and not and all of that stuff, but not this time.
So now we've got assert, we can get back to this thing.
Assert, so now we're back to actually doing something interesting.
If we try to run this, of course, we get uninitialized constant is zero,
because I haven't defined that.
But by defining assert, I now have a little bit of information about is zero.
I know that is zero has to take a parameter, and
it has to return a Boolean, because I'm asserting on it.
And I've determined that assert takes a Boolean.
So I'm just gonna return true, because that's always the easiest thing to do.
We don't know anything about zero either, the parameter that comes in.
We do know that it's a function, because everything's a function.
So, since I don't know anything about it,
I'm just gonna make something up and give it my stand in for.
Okay, so now we're passing.
So we got our t, so we've actually got a zero now.
And we have a way to determine whether or not something is zero.
Pretty cool, right?
That's a lot of work, so here's our reward.
Yay, there's my cat sack.
Okay, so now the piano axioms have a part about equality.
All we have right now is zero, we've satisfied axiom one.
We're gonna start talking about equality.
Axiom two here states that for every number x, x equals x.
Pretty straightforward, that's the symmetric property.
So we're gonna come down here and say, I can assert, right?
That numbers equal zero and zero.
That's what axiom two says.
Of course, I don't know what numbers equal is, so
it'll help if I actually try to write that.
So numbers equal, well, what is it?
I know it's a lambda that takes something.
Because I've got the axiom that tells me that it's comparing two things,
I know that it takes two parameters.
So I'm gonna take the first and the second parameter.
Now, all we have in our numbering system is zero, and zero equals zero.
We don't have any other things, so what should this return?
I know it has to return a Boolean.
Well, the simplest thing for it to return is true.
Because as it stands, that's all I actually know.
And if I run, there it is, I'm passing again and life is good.
So life is really simple, this is a philosophical point.
Life is simple when all you have is zero.
Okay, that's my statement of fact about the world.
So let's move onward to the building of sort of the natural numbers.
We've started at zero, we actually kind of need to move up.
Otherwise, nothing is really that interesting.
So let's take a look at the successor functions.
We kind of instinctively know that the successor function is sort of like plus
one, or it's the next number in there.
But we can't use our intuition on any of this cuz, of course,
we're using these axioms to build up the natural number.
So if we come down and talk about, so for every number in,
the successor of n is a number.
It seems pretty straightforward.
So what I can say is let's start building this function.
So if I come up and I say successor, well,
it's a function that takes a number.
It has to return me a natural number because the axiom says that
the successor of n is a natural number.
Well, I only have two natural numbers that I know about, zero and
the successor of zero.
And it seems kind of strange for
the successor of zero to return the successor of zero.
So since it doesn't tell me anything else,
I'm just gonna choose it to return zero.
Still only kind of have zero, but everything's happy now.
So since it's a natural number,
we can use our number equality because, where is it?
This thing, for all a and b, if b is a natural number and
they're equal, they're natural numbers.
So I can actually write that the numbers equal the successor of zero and
the successor of zero.
How do I know that that's true?
There we go.
I know this is true because I have the axiom that says,
if x equals y, zero equals zero, then the successors, that's this one.
Zero equals zero if and only if the successors of zero is equal to the
successors of zero.
So I can make this statement, this bold, bold statement, and
I can run my tests and sure enough, it's true.
As I've said a couple times, life is super easy when all you have is zero.
So this point, number equals always returns true.
It doesn't give us that much wonderful information.
But here's the thing we're gonna do.
Our big breakthrough comes when we look at the amazing axiom number eight.
Axiom number eight says that for every number n, the successor of n is not zero.
So if we say that it's zero, then we're false.
So that gives us a little statement here.
So we can say that we can actually refute
the idea that the successor of zero is zero.
And we can also refute if we try to do numbers equal of the successor of zero and zero.
So these two statements, according to that axiom, this should give me truth.
But Fs, my number system does not work.
So these are kind of the same.
But so let's take a step back to the beginning and look at is zero.
This needs to differentiate now between zero and
the successor of zero or zero and not zero.
So what we can wanna do is, well, let's do something.
Let's make it so that zero, it's gotta be a function.
Let's actually make it a function that returns true that says, yay, I'm zero.
Successor, since it's zero, we can replace it with this, which is zero.
But we wanna just mark it and say you're not zero.
So we're taking the code that zero was and just saying, nope, false.
Let's run it so you can see it.
So, successor returns a function.
We need to affect is zero here, because is zero is just doing that.
But now, each number that we have is a function that returns whether it's zero or
not, so we can just call it and get that true or false back.
So at this point, is zero can ask, are you zero or not?
And we can see that we got one more t, which was this refutation.
But our numbers equal still doesn't work.
So, we're gonna take a little bit of a step back in order to get this working.
And comment these out and look again at numbers equals zero, zero.
This is gonna help us build out this numbers equal method for a second.
So, what we wanna say is that if the numbers, if the first number is zero,
then we can actually check and see if the second number is zero.
Make sure that I have like that.
And then otherwise, we can just say you're not, it doesn't matter.
So this says, if the first number is zero, then just return whether or
not the second number is zero.
And if they're both zero, then you get a true.
Doing this, ah, it helps if I actually make that second.
Nothing, okay, so this isn't the final solution.
But it's something that satisfies what we have so far.
And it satisfies axiom eight.
So if I come down, oops, and get rid of these, which is the axiom eight.
I can see that those are satisfied now.
So we know that the successor of zero is not zero.
And so we can kind of take the leap to move on to non-zero numbers.
And actually start talking about these a little bit more.
Let's expand this one just a little bit to show that not
equaling is sort of, successor of zero is not equal to zero.
But also, zero is not equal to the successor of zero.
Just kind of flipping them around.
The idea that successor of zero is equal to, is not equal to zero.
And then the symmetric form says that zero is not equal to the successor of zero.
One day I'm actually, this whole like successor, successor,
successor, successor kind of thing will deal with that.
Okay, so let's talk about non-zero numbers.
So if we kind of jump up here for a second, we know that zero equals zero, right?
And we know that M equals N if and only if the successor of M is equal to the successor of N.
This implies that, this implies this guy.
That the successor of zero needs to be equal to the successor of zero.
But, there's an F, our implementation doesn't satisfy this.
And this makes sense because if you look at what we're doing, we're always returning false.
So, what should we do about this?
Well, let's look at axiom number seven.
This says, oops, for all numbers M and N, M equals N if and
only if the successor of M equals the successor of N.
This means that, this should be true.
Since we're only working with zero and non-zero right now,
we can put here that if the first number is not zero,
then the second one can't be zero either.
So, I can just return false if the second one is zero.
You need to open.
And then, I'm just going to return true here.
Oops.
Now, we're back to everything passing off, all the T's.
Yay.
So, this is actually getting pretty ugly.
Can anybody read this?
It's kind of hard.
Awesome.
I want to tell you I can.
But we're biting sort of my usual process of coding, which is make it work,
then make it pretty, hopefully remembering that second part of it.
So, we could return false here, but if we do that,
then we get that failure.
So, true enough we need to return true to do it.
So, okay, so this works for two numbers.
We now have zero and we have the successor of zero.
But we don't have anything more than that.
So, what this kind of says is I would really, really love it
if I could take the successor of the successor of zero and
compare it to the successor of zero.
Does anybody think this should work?
No, this is effectively two equals one.
Especially if I put an extra thing there, but it passes.
Everybody, of course, has heard that two equals one for
sufficiently large values of one, but for us, we can't abide by that.
We don't have, we have just a size of one.
So, we're gonna use the wonderful axiom here,
axiom number eight, to figure this out.
However, let's talk about how this is gonna help us.
So, for every number in, the successor of n is equal to zero is false.
So, there's no number whose successor is zero.
Now, I'm gonna do a little bit of math here.
So, hold your horses, I'm about to do math.
I'm gonna use a logic or
a proof mechanism called proof by contradiction.
So, we'll walk through it quickly.
It's my favorite way of proving things.
So, let's assume this is true, like our number statement or
our system says.
So, let me do a little bit of setting a variable.
I'm gonna say m is equal to the successor of zero, n is equal to zero.
So, if I repeat this or substitute this back in,
that says that the successor of m is equal to the successor of n, yeah?
Now, if I replace m and n with their definitions, right?
What am I doing?
Do, do, do, do, do, do, do, do, do, do, do, do, do, do, do, do.
Oh, m, n, this says the successor of m and n.
We know that according to axiom eight or axiom seven,
if m equals n, if and only if the successor of m is equal to the successor of n.
Which says, I should, if the successors are equal, then the numbers are equal.
So, that tells me I can say this, m, n, right?
Just by substituting.
Well, let me substitute these back in.
Oh, look at this.
What does that say?
That says that the successor of zero is equal to zero.
That violates axiom number eight.
So, that means that I've reached a contradiction.
I've reached something false, which means that's wrong, that's wrong, that's wrong,
that's wrong, that's wrong, that's wrong.
So, since assuming that this was true led me to a contradiction,
I actually have the opposite of what that assumption was.
So, these axioms along with what I have so far has shown me
that I need to put a refute here.
But, my code doesn't satisfy that because my code only knows about this.
Everybody follow that?
Okay, well, let's have a picture of a cat.
There's Squeaks.
Her full name is You Can Do It, Squeaks,
the story of little Carrie Strug by Corey Haynes.
Because I find Carrie Strug to be one of the most inspirational figures in the world.
So, I wanted to name my cat after her.
So, awesome, now here we are.
We've got a failing test, everything's good, we've only got a few minutes left.
So, we need to build four pages worth of stuff.
So, let's come up here, we're gonna comment out this stuff for a second.
And we're gonna come up.
So, we have tests for successor.
We have this final test that if it passes, we know that we have 0, 1, 2.
We've got sort of the ability to get that the successor of 0 is not the successor of 0.
So, what we really wanna do though, is be able to come down to this number's equal
and figure out not just everything's equal that isn't 0.
But we actually want to be able to ask it, are these two numbers the same?
To do this, we really need to know what are the things that caused first and second.
First and second came about by calling successor on something.
We need to find out what that something is.
So, what we're gonna do is we're gonna say we really would like a function called
predecessor that is sort of the inverse of successor.
It's the thing that caused my successor to be what it is.
So, if I take the successor of 0 and I take the predecessor of that,
I should get 0 and I write one that's kind of crazy just to capture it.
So, the predecessor of the successor of the successor of 0 is
the successor of 0, right?
So, there's smoke tests just to help me make sure that I've got predecessor working.
Once we have predecessor working, then I can rely on
number seven that m equals n if and only if the successors.
If I flip that, it's the successors are equal only if the numbers are equal.
Which says I should be able to come down here to numbers equal and
say numbers equal predecessor of first, predecessor of second.
If I build predecessor, I can do this and my numbers equal will be working,
but I haven't yet, so I can't.
So, that's our goal is to build predecessor.
Okay, so let's do that.
Let's come up and look at 0, the successor.
Okay, so these have gotten us pretty far, this 0 and
successor where we're just returning true and false.
But we need to not just mark whether it's 0 or not, but
we need to somehow carry along when we call successor.
We need to carry along what the number is that we are the successor of.
So we kind of, if I kind of pseudocoded it,
I'd like it to look something like this.
You know, a pair.
And because at that point, I can just say that the predecessor of a number m
is just the right most thing of m.
I just, I need a pair.
Well, of course, we don't have a pair, all we have is a lambda and
a couple of these things we did, so let's build pairs real quick.
So, in order to write some, just some smoke tests,
I am going to actually make a pair that is true and false.
And then I am going to make a pair that is false and true.
And then I'm going to assert that the left, or
the first part of true false, I can assert that because it should be true.
And I can refute the second part of true false.
And I can assert, or actually I can refute
the first part of false true.
So, basically I'm making a pair of true false and false true, and
then I'm writing a couple of smoke tests to say that first and second work.
Okay, so what do we know about these functions?
Well, I know that pair has to take a first and a second, right?
I don't know what it does with them.
I know that first is going to take a pair, I don't know what it does with it yet.
And I know that second is going to take a pair.
And it's going to do something similar to first, but I'm not sure exactly.
What, feels a little bit like Boolean's again.
Where Boolean, the true, picked the first one, so it makes me feel a little okay.
So, what do I know about pair?
So let's work with first and second because these are sort of our outer
behaviors.
What do I know about pair?
I know one thing, it's a function, which means I can call it with a parameter.
Wouldn't it be awesome if I could call it
with a function that accepts the first and
the second arguments in the pair and returns, not true but the first one.
So, this is a technique I like to call programming by wishful thinking,
which is, I code it as though I always say to myself, wouldn't it be cool if I
could do that and actually get the first item, yes.
Thank you.
Second.
Wouldn't it be cool if I could do that, it would be awesome.
So how do I do that?
Well, that tells me that pair needs to return a function.
What's that function called?
Well, I'm going to call it selects value.
So it's a function that takes a function and then it calls that function passing
in first and second.
Thank you.
So, when I call pair with true and false, it returns me a function that takes this
selects value function.
Oh, I didn't write pred yet.
So, these are passing.
Look at that.
Four T's.
So now I have pairs.
Pretty fancy.
So, it passes the test.
I'm going to get rid of these because of course these are just smoke tests and if
you saw Jay's talk, then you should delete all of your tests.
And we're going to come down and we're actually going to use a little bit of this
to write some things.
So, zero, what I want zero to be is a pair of true and something else doesn't
matter what it is and whenever I don't care, I use my identity.
Somewhere there's an identity theft joke in there, but it's not now.
So, is zero simply needs to take the first item of that?
Well, what does successor do?
Successor builds me a pair of false and N.
That's like saying that the successor of N is equal to false N.
The successor of the successor of N is equal to false, false N.
So, every successor knows that it is not zero.
Now, what does predecessor do?
It takes the second part.
And returns it because if you, successor makes a pair of false and N,
predecessor simply takes that out.
That means that if I come down here and I run my tests,
my little smoke tests for predecessor are working.
So, now predecessor is working, which means I can come back to here and do the big trick
which is take, if the first is not zero and the second's not zero,
then let me take the predecessor of the first and the predecessor of the second
and see if they're equal.
Because if they are, one more, no, don't need one more.
According to seven, if first and second are only equal if their predecessors are equal.
So, now if I come up and I get rid of all of those,
oh, look at that.
That's my production app.
They're all passing.
Who's ah?
Who's ah?
So, what does this mean?
Dave.
Oh, it means I have five minutes left.
Awesome.
Of course, I wouldn't expect Dave to know what all of this means.
So, what does this mean?
Well, this means that I have the ability to, I have a zero,
I have a successor of zero,
and I have a successor of a successor of zero that I know is different.
So, what I've got is, I've got zero,
I've got one,
and I have two,
and I know and I've proven that one does not equal two,
and that my one is not sufficiently large.
So, with some arm waving around the induction axiom,
what we have is we have an infinite number of natural numbers.
To show that and to do something really fun with,
since we have a couple minutes,
let's build two natural.
What this does is this takes a number in Ruby
and gives me the associated successor, successor, successor, successor like that,
and then we're going to take from natural, which does a little bit different.
It takes one of my natural numbers and returns it as a Ruby numeral.
And so, what I can do with this is say,
puts from natural to natural ten,
and it prints ten.
Yes, yes, nailed it.
What this does do though is, I have three minutes,
so we can use these numbers now to do some pretty cool stuff such as this.
What if I wrote a function called times that took a do this this many times
and said if this many times is zero,
then just do the identity, which is nothing, of course.
Otherwise, I want to do this passing in this many times.
And then call back to times, except take the predecessor.
So this is counting down.
And if I wrote it correctly, I can say puts hello the index
and say do this to natural number ten times.
Am I missing a bracket?
Thank you.
This is when I'm actually live coding, so look at that.
Oh, a proc, because in is actually there, so from natural.
Look at that.
Look at that.
Nailed it.
Awesome.
All right.
So that's my time.
Hope it was fun.
This was fun coding.
One of the cool things about this exercise for home is to write add.
And when you write add in this way,
like you get up to like adding 100 and 100 and you can like visibly see your process or slow down.
It's super fun.
All right.
Thank you very much.
Oh, before you go.
There's pistachio.
Oh, I love her.
Okay.
And also you can buy my book.
Thank you very much.
Have a good afternoon.
