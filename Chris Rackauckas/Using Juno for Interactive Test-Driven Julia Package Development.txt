Okay, this is just going to be a quick video where I just show how to edit packages efficiently.
Just how to do this in a very interactive way.
So right here I have simple Diffie queue set up in my Juneau.
And so what I'm doing right here is I'm going to add an Euler Mary Yama method.
Let me make sure I spelled that right.
So Euler Mary Yama.
Yeah, that's why I don't like that.
Okay, so I'm going to then add a Euler Mary Yama.jl.
So what simple Diffie queue.jl is, is it's a library of just simple differential equation solvers.
The reason why I'm building this is so that way contributors will have
two reasons, three reasons is so that we have something to benchmark against.
So that way we have very simple versions that we can cross compile to GPUs.
And so that way, and also so that way I can have a nice style guide for how some things
should look inside a Diffie queue.
So simple repo, you can see that there's a very simple function map.
It has an integrator with stepping and also has just a solve that just does a loop.
So no callbacks or anything like that are supported.
It's just this is what simple Diffie queue code looks like.
And what I want to do is I want to make the Euler Mary Yama version of that.
So if you look it up, the Euler Mary Yama method is just you take a stochastic differential equation.
You update it by multiplying by dt and multiplying by a random number.
So I already have in the top level here a Diffie queue base.
Let me.
And so now that I already have Diffie queue base in here,
what I want to do is I want to create an algorithm and overload solve.
So here what I'm going to use is simple EM so simple Euler Mary Yama.
And what I want to do is I want to override the function Diffie queue base dot solve for
an SDE problem when someone calls it with the simple EM algorithm.
And the only option I'm going to support here is the GT option.
Right.
So just so that way everyone's understanding what's going on here,
differential equations.
If I go over to the documentation, the only options which we have inside of this
part right here for solve are the ones listed as the common solver options.
Anything else would go into the algorithm.
There's tiny exceptions for the different problems.
So for say, for example, the SDE solvers, you can have special keyword arguments.
So you can also have save noise and delta.
I'm not going to support that in the simple version.
So yeah.
So those are like all the args.
I'm just going to support a few of them in the future.
What I might want to do is add warnings for the ones that don't support.
So I mean, you probably don't have to send to the queue that if you call an algorithm
with options that aren't implemented for it, it warns you and tells you that it's ignoring it.
So here, I'm actually going to make it air because I don't know how to make it work without a DT.
So DT required for simple EM.
And so now I'm just going to implement the Euler-Mariella method.
So in the Euler, or in this, what I'm going to do is I'm going to create a test.
So simple EM, test.jail.
And inside of here, I'm going to create a stochastic difference.
So I'm just going to write what a user code would look like.
So using simple Diffie queue and simple Diffie queue with this reexports Diffie
queue base. Let me do this in a first session.
So I just did ctrl-j, ctrl-k to quit Julia.
ctrl-j, ctrl-c will then clear the console.
That gives me something brand new.
I click over to the REPL.
I hit enter.
And now I'm in a brand new REPL.
Right.
And you can see that this is grayed out.
That tells me that it's new.
And so let me recompile everything.
Hopefully that doesn't fail.
This is...
Okay.
Did I misspell something?
Meru, Yama.
Mary.
Yeah, there we go.
So when I do ctrl-
There's a few commands I'm going to be using here.
We want to do the interactive side on the left.
Shift-Enter.
So if I shift-Enter, it goes down to the new line.
If I ctrl-Enter, it evaluates on the same line.
And what I'm going to do here is I'm going to create
us to cast a differential equation.
So if I do something like f of upt is 2u.
And g of upt equals 1.
And this is the stochastic differential equation.
dx of t equals 2u dt plus dw sub t.
And I want to give a initial condition and the time span.
And then this makes an sd problem.
And there's no parameters.
All right.
So that's my sd problem I want to do.
So this setup is called test driven development.
What I'm doing is I'm writing the test before I even write the code.
So that way I know what I want it to do.
So here, all I want to want to do here is I just want to do solve
this problem with simple vm.
So now it's saying that there's no method solve for this
because I haven't really written anything.
So now I'm going to actually save that file if I run this code.
So what I did here is I clicked over to the package code
and I just evaluated some functions.
When I evaluate that function in the package code,
it will actually update the code in the package.
So when I jump back over to my task script,
now this is the new code.
So if I do something like dt gets 0.5, it's now doing nothing.
So let me jump in here then and go, okay.
So the first thing that we want to do,
let's just unpack a few variables.
G gets prob dot g dot u0 and let's see.
T span gets prob dot t span.
Right.
And now what I want to do is let's see.
So n, the number of steps is going to be
prob dot t span of 2 minus or I can just do this as t span of 2
minus t span of 1 divided by dt.
And I'm going to just enforce that this is going to be an integer.
So this will be enforcing that the result
has to actually be an integer or will error.
So for now, I'm just not going to support handling the extra on the end.
And so what I want to do then is I want my solution array to be
created from my initial values for u in 1 through n.
So let me make sure that that's good right now.
Invalued.
I didn't give it a so here I evaluated the function in place.
Now what you see is this actually does something different.
So Julia by default will return the last thing that happened.
So it's returning what this u is.
So I did dt equals 0.5 and it's returning an array u of the initial condition two times.
Let's make sure that this is good.
That looks good.
All right, t should then be t equals i times dt for this t span of 1 plus i times dt for
i in 1 through n.
And this is good.
That's almost good, right?
But we are missing our initial condition.
So we're actually, this is actually showing me that I need to have one more.
So that way I have, what did that look like?
Okay, this needs to be like that.
So it was an off by one error.
Let me just close that because it's stripping me up.
I name test files test.jl all the time.
So actually what I want is that and so I'll just match it here.
Okay, so now,
actually it's probably better to just make that plus one.
It's okay.
So now let's do the Euler-Maryon method.
This is just going to be for i in 1, 2 through n.
And so what I'm going to do in this loop is I'm going to say that u, the next value equals
f of,
so u-preve equals u of i minus 1.
And t-preve is t of i minus 1.
And so the algorithm is, let me grab the parameters here too.
So p equals prob dot p.
Lot of space for good measure.
Then this is going to be u-preve,
p-t-preve times dt plus
g of u-preve p-t-preve times square root of dt.
Let me voice this out of the loop.
Just, I'm pretty sure Julia would actually handle this, but this is just to be safe.
So square root of dt times a random of
Now let me just play with this over here.
So random n is like that.
I also want this to support static arrays.
So if I do random of
So if I make a a static
at s vector 234 random of a, what does that do?
That's not good.
Let's see.
So then what do I want here?
I want, this might be something I should just handle later.
Because I want to get a random number for each of the values that
Right now they're only support scalers.
So I'm just going to throw up in the static arrays.jl.
And
Oh yeah.
So I want to do this by size.
So I'm just going here and going.
Okay.
So if I do size of a
That's good.
And if I do size of 1.0, that is not what I want.
So then let me just do handling care.
So if I then add using static arrays, I evaluate that that's now in scope in the package.
So if let's see.
So if Upreve is a static s array,
then our gets random of size of Upreve else our gets random.
And from there, what we do is that
I think that's right.
So let's just output those two things for now.
And let's check how our function is doing.
So type error.
So when I click here, I click on the stack trace.
It brings me right to where the error is.
The error is that this is supposed to be a type, not the actual value.
I evaluate that in place.
And now you see that I get times and I get the values.
So yeah.
And then right here, what I do is that then I do things like at test cell dot t.
Well, it's all dot t should be equal to 0 by 2.25 to 1.0.
Right.
Let me add base dot test in here.
Oops, I just evaluated everything.
So okay.
Why is that not the same?
Can anyone guess why this is not the same?
So let me collect this so that way I get an array here.
And you see, boom.
See what this printed out is that this value is an array.
This value is not.
So equals equals just didn't handle that.
Anyways, so let's make sure that the length of U is 5.
Here, what is U?
U is, oh, that's equals.
And there we go.
Now we have some tests.
Now if I want to check that the type of U is a DE solution,
right now this fails.
So I can add at test broken.
And that tells me that this test is broken for now.
Now what I'm going to do is
I have simple EM tests.
So simple EM test.jl.
I'm just going to make sure really quickly that it runs.
You see that there's a pass, a broken, and a total is 3.
So why broken is nice is because A,
it will throw you an error if it ever gets fixed.
So I mean, that's a quick way to be able to tell you,
hey, you accidentally fixed something.
But also what's really nice is that it tells you it's broken.
You can track it, that it's broken,
and you can just make sure it's broken.
The other way to do this is to comment out tests.
And once you get any significant amount of code,
your tests, which are commented out, will get lost, right?
You'll just forget that they exist.
So by doing this, this way you have a nice tracker
for all your broken tests.
So then to run our tests, you do pkg.test.
Simple diff eq.
And then this will run this test suite,
which will do the discrete test for that function map.
And simple em, which will test our Euler-Meriama method.
So while that's running,
I'm just going to grab some code over from this function map,
which is just how the heck do you create a DE solution?
Simple em was not defined.
Oh, because it did not export it.
Okay.
So now let me run this in place here to make sure this works well.
So okay, so by adding the export, this actually works now.
So the issue that happens that when I did this included,
actually included some stuff into my global scope, but fixed.
And now what I just did here is I estimate it.
So that way it returns a proper diff eq solution.
So this will probably do something weird now.
Instead, it should be a solution object.
And now I should say solve.t and solve.u.
And this will actually pass now.
And so this got an unexpected pass.
So I should change it to test.
And there you go.
Now this test file should be good if I do simple diff eq.
Then what this will do is this will run my package tests
and make sure everything works.
In the meantime, because I know this is probably going to pass,
let me open up simple diff eq.jl.
You see that these are my commits.
I'm going to review my commits, make sure that they all look okay.
And what's this?
U not defined.
Oh, solve.t.
So what's going on here?
I can pull this down and nope, I want to do solve.
There you go.
So yeah, I hope that this video just shows off a nice interactive workflow
where you're basically just going between your test function
and your package code very quickly.
I actually like to do this for my research codes as well,
because then you have at test making sure that your research code always works
and you have your longer functions than as your package for your research.
Actually, I do this and then I release the research as a package.
And that's how diff eq came about.
So hopefully this gives a nice way to show you how to use Juno
to do package development really quickly.
As a last step here, just reviewing the PR, everything looks nice.
If I needed to pull something out,
like if I had an extra test in here, let me see.
Yeah, so if I had like a extra blob in here that was bad,
I can you can just go to discard hunk and you can get rid of parts of it.
Let me just show you one last thing.
One easy way to see what's going on is if you just add show inside here.
So if you add show, evaluate, and then you'll see that it tells you.
So at show is nice because it prints out the name and then equals.
So yeah, that's some nice stuff for just working in Juno.
Hopefully that helps you out.
Cool.
Let's do this and push.
So add out of place simple.
So both of these are actually pointing to the same thing right now.
That's silly.
And then if I check online.
No.
The build if you Q.JL.
You see that out of place simple.
Yeah, is there.
So I can push the master because it's my repo and I have all the power in the world.
If it's not your repo, then what you need to do is you need to go fork it.
When you fork it, you add a remote to your fork.
So you can see that George has his own fork actually on this repo and then what you can do
there is you can set upstream to your branch and then you'll see it over here.
What this will do is they'll make it push to your fork and then you just drag and drop
and that will open up a pull request.
So in that setup, you can use your own fork just like it's your own repo.
It is your own repo, but whenever you want it to update the code in the actual package,
you need to get a pull request and they need to accept your code changes.
Well, that's pretty much how you do test driven package development in Julia.
