Hello, my name is Andrei, and I've been training deep neural networks for a bit more than a decade.
And in this lecture, I'd like to show you what neural network training looks like under the hood.
So in particular, we are going to start with a blank Jupyter notebook.
And by the end of this lecture, we will define and train in neural net.
And you'll get to see everything that goes on under the hood and exactly
sort of how that works on an intuitive level.
Now specifically, what I would like to do is I would like to take you through
building of MicroGrad. Now MicroGrad is this library that I released on GitHub about two years ago.
But at the time, I only uploaded the source code and you'd have to go in by yourself and really
figure out how it works. So in this lecture, I will take you through it step by step
and kind of comment on all the pieces of it. So what is MicroGrad and why is it interesting?
MicroGrad is basically an autograd engine. Autograd is short for automatic gradient.
And really what it does is it implements back propagation.
Now back propagation is this algorithm that allows you to efficiently evaluate the gradient
of some kind of a loss function with respect to the weights of a neural network.
And what that allows us to do then is we can iteratively tune the weights of that neural
network to minimize the loss function and therefore improve the accuracy of the network.
So back propagation would be at the mathematical core of any modern deep neural network library
like say PyTorch or JAX. So the functionality of MicroGrad is I think best illustrated by an
example. So if we just scroll down here, you'll see that MicroGrad basically allows you to build
out mathematical expressions. And here what we are doing is we have an expression that we're
building out where you have two inputs A and B. And you'll see that A and B are negative four and two.
But we are wrapping those values into this value object that we are going to build out as part of
MicroGrad. So this value object will wrap the numbers themselves. And then we are going to
build out a mathematical expression here where A and B are transformed into C, D and eventually E,
F and G. And I'm showing some of the functionality of MicroGrad and the operations that it supports.
So you can add two value objects, you can multiply them, you can raise them to a constant power,
you can offset by one, negate, squash at zero, square, divide by a constant, divide by it, etc.
And so we're building out an expression graph with these two inputs A and B, and we're creating
an output value of G. And MicroGrad will in the background build out this entire mathematical
expression. So it will, for example, know that C is also a value. C was a result of an addition
operation. And the child nodes of C are A and B, because they will maintain pointers to A and B
value objects. So we'll basically know exactly how all of this is laid out. And then not only can we
do what we call the forward pass, where we actually look at the value of G, of course, that's pretty
straightforward. We will access that using the dot data attribute. And so the output of the forward
pass, the value of G is 24.7, it turns out. But the big deal is that we can also take this G value
object, and we can call dot backward. And this will basically initialize back propagation at the node G.
And what back propagation is going to do is it's going to start at G, and it's going to go backwards
through that expression graph, and it's going to recursively apply the chain rule from calculus.
And what that allows us to do then is we're going to evaluate basically the derivative of G with
respect to all the internal nodes, like E, D and C, but also with respect to the inputs A and B.
And then we can actually query this derivative of G with respect to A, for example, that's A dot
grad. In this case, it happens to be 138. And the derivative of G with respect to B, which also
happens to be here, 645. And this derivative we'll see soon is very important information,
because it's telling us how A and B are affecting G through this mathematical expression. So in
particular, A dot grad is 138. So if we slightly nudge A and make it slightly larger, 138 is telling
us that G will grow. And the slope of that growth is going to be 138. And the slope of growth of B
is going to be 645. So that's going to tell us about how G will respond if A and B get tweaked
a tiny amount in a positive direction. Okay. Now, you might be confused about what this
expression is that we built out here. And this expression, by the way, is completely meaningless.
I just made it up. I'm just flexing about the kinds of operations that are supported by micrograd.
What we actually really care about are neural networks. But it turns out that neural networks
are just mathematical expressions, just like this one, but actually slightly a bit less crazy even.
Neural networks are just a mathematical expression. They take the input data as an input, and they
take the weights of a neural network as an input. And it's a mathematical expression. And the output
are your predictions of your neural net or the loss function. We'll see this in a bit. But basically,
neural networks just happen to be a certain class of mathematical expressions. But back propagation
is actually significantly more general. It doesn't actually care about neural networks at all. It only
tells us about arbitrary mathematical expressions. And then we happen to use that machinery for training
of neural networks. Now, one more note I would like to make at the stage is that as you see here,
micrograd is a scalar valued autograd engine. So it's working on the, you know, level of individual
scalars, like negative four and two. And we're taking neural nets and we're breaking them down
all the way to these atoms of individual scalars and all the little pluses and times. And it's just
excessive. And so obviously, we'd never be doing any of this in production. It's real just for them
for pedagogical reasons, because it allows us to not have to deal with these n dimensional
tensors that you would use in modern deep neural network library. So this is really done so that
you understand and refactor out back application and chain rule and understanding of neural training.
And then if you actually want to train bigger networks, you have to be using these tensors,
but none of the math changes. This is done purely for efficiency. We are basically taking
scale value, all the scale values, we're packaging them up into tensors, which are just arrays of
these scalars. And then because we have these large arrays, we're making operations on those
large arrays, that allows us to take advantage of the parallelism in a computer. And all those
operations can be done in parallel. And then the whole thing runs faster. But really none of the
math changes and they've done purely for efficiency. So I don't think that it's pedagogically useful
to be dealing with tensors from scratch. And I think, and that's why I fundamentally wrote
micrograd because you can understand how things work at the fundamental level. And then you can
speed it up later. Okay, so here's the fun part. My claim is that micrograd is what you need to
train neural networks and everything else is just efficiency. So you'd think that micrograd would be
a very complex piece of code. And that turns out to not be the case. So if we just go to micrograd,
and you will see that there's only two files here in micrograd, this is the actual engine,
it doesn't know anything about neural nets. And this is the entire neural nets library
on top of micrograd. So engine and nn.py. So the actual back propagation autograd engine
that gives you the power of neural networks is literally
100 lines of code of like very simple Python, which we'll understand by the end of this lecture.
And then nn.py, this neural network library built on top of the autograd engine,
is like a joke. It's like, we have to define what is a neuron, and then we have to define what is a
layer of neurons, and then we define what is a multilateral perceptron, which is just a sequence
of layers of neurons. And so it's just a total joke. So basically, there's a lot of power that
comes from only 150 lines of code. And that's all you need to understand to understand neural
training and everything else is just efficiency. And of course, there's a lot to efficiency. But
fundamentally, that's all that's happening. Okay, so now let's dive right in and implement
micrograd step by step. The first thing I'd like to do is I'd like to make sure that you have a
very good understanding intuitively of what a derivative is, and exactly what information it
gives you. So let's start with some basic imports that I copied based in every Jupyter notebook
always. And let's define the function scalar valid function f of x, as follows. So I just made
this up randomly. I just wanted to scale a valid function that takes a single scalar x and returns
a single scalar y. And we can call this function, of course, so we can pass in say 3.0 and get 20 back.
Now, we can also plot this function to get a sense of its shape. You can tell from the mathematical
expression that this is probably a parabola. It's a quadratic. And so if we just create a set of
scalar values that we can feed in using, for example, a range from negative 5 to 5 in steps of
0.25. So x is just from negative 5 to 5, not including 5, in steps of 0.25. And we can actually
call this function on this NumPy array as well. So we get a set of y's if we call f on x's. And
these y's are basically also applying the function on every one of these elements independently.
And we can plot this using matplotlib. So plt.plot, x's and y's, and we get nice parabola. So previously
here we fed in 3.0 somewhere here, and we received 20 back, which is here, the y-coordinate. So now
I'd like to think through what is the derivative of this function at any single input point x?
Right, so what is the derivative at different points x of this function? Now if you remember
back to your calculus class, you've probably derived derivatives. So we take this mathematical
expression, 3x squared minus 4x plus 5, and you would write out on a piece of paper and you would,
you know, apply the product rule and all the other rules and derive the mathematical expression
of the great derivative of the original function. And then you could plug in different x's and see
what the derivative is. We're not going to actually do that because no one in neural networks
actually writes out the expression for the neural net. It would be a massive expression.
It would be, you know, thousands, tens of thousands of terms. No one actually
derives the derivative, of course. And so we're not going to take this kind of like symbolic
approach. Instead what I'd like to do is I'd like to look at the definition of derivative and just
make sure that we really understand what derivative is measuring, what it's telling you about the
function. And so if we just look at derivative, we see that, okay, so this is not a very good
definition of derivative. This is a definition of what it means to be differentiable. But if you
remember from your calculus, it is the limit as h goes to 0 of f of x plus h minus f of x over h.
So basically what it's saying is if you slightly bump up, you're at some point x that you're
interested in or hey, and if you slightly bump up, you know, you slightly increase it by small
number h, how does the function respond? With what sensitivity does it respond? What is the slope at
that point? Does the function go up or does it go down and by how much? And that's the slope of that
function, the slope of that response at that point. And so we can basically evaluate the derivative
here numerically by taking a very small h. Of course, the definition would ask us to take h to
0. We're just going to pick a very small h, 0.001. And let's say we're interested in 0.3.0. So we can
look at f of x, of course, as 20. And now f of x plus h, so if we slightly notch x in a positive
direction, how is the function going to respond? And just looking at this, do you expect f of x
plus h to be slightly greater than 20? Or do you expect to be slightly lower than 20? And so since
3 is here, and this is 20, if we slightly go positively, the function will respond positively.
So you'd expect this to be slightly greater than 20. And now by how much is telling you the sort of
the strength of that slope, right? The size of the slope. So f of x plus h minus f of x,
this is how much the function responded in a positive direction. And we have to normalize
by the run. So we have the rise over run to get the slope. So this, of course, is just a
numerical approximation of the slope, because we have to make h very, very small to converge
to the exact amount. Now, if I'm doing too many zeros, at some point, I'm going to get an incorrect
answer, because we're using floating point arithmetic. And the representations of all these
numbers in computer memory is finite. And at some point, we get into trouble. So we can converge
towards the right answer with this approach. But basically, at 3, the slope is 14. And you can see
that by taking 3x square minus 4x plus 5 and differentiating it in our head. So 3x square would
be 6x minus 4. And then we plug in x equals 3. So that's 18 minus 4 is 14. So this is correct.
So that's at 3. Now, how about the slope at, say, negative 3? What would you expect for the slope?
Now, telling the exact value is really hard. But what is the sign of that slope? So at negative 3,
if we slightly go in the positive direction at x, the function would actually go down. And so that
tells you that the slope would be negative. So we'll get a slight number below 20. And so if we
take the slope, we expect something negative, negative 22. And at some point here, of course,
the slope would be 0. Now, for this specific function, I looked it up previously, and it's at
point 2 over 3. So at roughly 2 over 3, that's somewhere here, this derivative would be 0. So
basically, at that precise point, at that precise point, if we nudge in a positive direction, the
function doesn't respond. This stays the same almost. And so that's why the slope is 0. Okay,
now let's look at a bit more complex case. So we're going to start, you know, complexifying a bit.
So now we have a function here with output variable d. That is a function of three scalar inputs,
a, b, and c. So a, b, and c are some specific values, three inputs into our expression graph,
and a single output, d. And so if we just print d, we get 4. And now what I'd like to do is I'd
like to, again, look at the derivatives of d with respect to a, b, and c. And think through,
again, just the intuition of what this derivative is telling us. So in order to evaluate this derivative,
we're going to get a bit hacky here. We're going to, again, have a very small value of h. And then
we're going to fix the inputs at some values that we're interested in. So these are the,
this is the point a, b, c, at which we're going to be evaluating the derivative of d with respect to
all a, b, and c at that point. So there are the inputs. And now we have d1 is that expression.
And then we're going to, for example, look at the derivative of d with respect to a. So we'll
take a and we'll bump it by h. And then we'll get d2 to be the exact same function. And now we're
going to print, you know, f1, d1 is d1, d2 is d2, and print slope. So the derivative or slope
here will be, of course, d2 minus d1 divided h. So d2 minus d1 is how much the function increased
when we bumped the specific input that we're interested in by a tiny amount. And this is
then normalized by h to get the slope. So, yeah. So this, so just from this, we're going to print
d1, which we know is four. Now d2 will be bumped, a will be bumped by h.
So let's just think through a little bit what d2 will be printed out here. In particular,
d1 will be four. Will d2 be a number slightly greater than four or slightly lower than four?
And that's going to tell us the sign of the derivative. So we're bumping a by h, b is minus
three, c is 10. So you can just intuitively think through this derivative and what it's doing.
a will be slightly more positive, but b is a negative number. So if a is slightly more positive,
because b is negative three, we're actually going to be adding less to d. So you'd actually expect
that the value of the function will go down. So let's just see this. Yeah. And so we went from four
to 3.9996. And that tells you that the slope will be negative and then will be a negative number
because we went down. And then the exact number of slope will be exact amount of slope is negative
three. And you can also convince yourself that negative three is the right answer mathematically
and analytically. Because if you have a times b plus c, and you are, you know, you have calculus,
then differentiating a times b plus c with respect to a gives you just b. And indeed,
the value of b is negative three, which is the derivative that we have. So you can tell that
that's correct. So now if we do this with b, so if we bump b by a little bit in a positive
direction, we'd get different slopes. So what is the influence of b on the output d? So if we
bump b by a tiny amount in a positive direction, then because a is positive, we'll be adding more
to d, right? So, and now what is the, what is the sensitivity? What is the slope of that addition?
And it might not surprise you that this should be two. And why is it two? Because d of d
by db, differentiating with respect to b, would be, would give us a. And the value of a is two.
So that's also working well. And then if c gets bumped a tiny amount in h by h,
then of course, a times b is unaffected. And now c becomes slightly bit higher. What does that do
to the function? It makes it slightly bit higher because we're simply adding c. And it makes it
slightly bit higher by the exact same amount that we added to c. And so that tells you that the slope
is one. That will be the rate at which d will increase as we scale c. Okay, so we now have
some intuitive sense of what this derivative is telling you about the function. And we'd like to
move to neural networks. Now, as I mentioned, neural networks will be pretty massive expressions,
mathematical expressions. So we need some data structures that maintain these expressions. And
that's what we're going to start to build out now. So we're going to build out this value
object that I showed you in the read me page of micrograd. So let me copy paste a skeleton of the
first very simple value object. So class value takes a single scalar value that it wraps and
keeps track of. And that's it. So we can, for example, do value of 2.0, and then we can get,
we can look at its content. And Python will internally use the wrapper function to return
this string. So this is a value object with data equals two that we're creating here.
Now we'd like to do is like, we'd like to be able to have not just like two values,
but we'd like to do a block B, right? We'd like to add them. So currently, you would get an error
because Python doesn't know how to add two value objects. So we have to tell it. So here's addition.
So you have to basically use these special double underscore methods in Python to define these
operators for these objects. So if we call the, if we use this plus operator, Python will
internally call a dot pad of B. That's what will happen internally. And so B will be the other
and self will be a. And so we see that what we're going to return is a new value object.
And it's just, it's going to be wrapping the plus of their data. But remember now, because data is
the actual like numbered Python number. So this operator here is just the typical floating point
plus addition. Now it's not an addition of value objects. And we'll return a new value. So now a
plus B should work. And it should print value of negative one, because that's two plus minus three.
There we go. Okay, let's now implement multiply, just so we can recreate this expression here.
So multiply, I think it won't surprise you will be fairly similar.
So instead of add, we're going to be using mall. And then here, of course, we want to do times.
And so now we can create a C value object, which will be 10.0. And now we should be able to do
eight times B. Well, let's just do eight times B first.
That's value of negative six now. And by the way, I skipped over this a little bit.
Suppose that I didn't have the wrapper function here, then it's just that you'll get some kind
of an ugly expression. So what rapper is doing is it's providing us a way to print out like a
nicer looking expression in Python. So we don't just have something cryptic, we actually are,
you know, it's value of negative six. So this gives us a times. And then this, we should now
be able to add C to it, because we've defined and told the Python how to do mall and add.
And so this will call this will basically be equivalent to a dot mall of B. And then this
new value object will be dot add of C. And so let's see if that worked. Yep. So that worked.
Well, that gave us four, which is what we expect from before. And I believe you can just call
them manually as well. There we go. So yeah. Okay, so now what we are missing is the connected tissue
of this expression. As I mentioned, we want to keep these expression graphs. So we need to know
and keep pointers about what values produce what other values. So here, for example, we are going
to introduce a new variable, which will call children. And by default, it will be an empty
tuple. And then we're actually going to keep a slightly different variable in the class,
which will call underscore prime, which will be the set of children. This is how I done,
I did it in the original micrograd looking at my code here. I can't remember exactly the reason I
believe it was efficiency. But this underscore children will be a tuple for convenience. But
then when we actually maintain it in the class, it will be just this set. I believe for efficiency.
So now, when we are creating a value like this with a constructor, children will be empty,
and prep will be the empty set. But when we're creating a value through addition or multiplication,
we're going to feed in the children of this value, which in this case is self and other.
So those are the children here. So now we can do d dot prep. And we'll see that the children of the
we now know are this value of negative six and value of 10. And this, of course, is the value
resulting from eight times B, and the C value, which is 10. Now, the last piece of information
we don't know. So we know now the children of every single value, but we don't know what operation
created this value. So we need one more element here, let's call it underscore pop. And by default,
this is the empty set for leaves. And then we'll just maintain it here.
And now the operation will be just a simple string. And in the case of addition, it's plus
in the case of multiplication, it's times. So now we not just have d dot prep, we also have a d dot
up. And we know that D was produced by an addition of those two values. And so now we have the full
mathematical expression. And we're building out this data structure. And we know exactly how
each value came to be by what expression and from what other values. Now, because these
expressions are about to get quite a bit larger, we'd like a way to nicely visualize these expressions
that we're building out. So for that, I'm going to copy paste a bunch of slightly scary code that's
going to visualize this, these expression graphs for us. So here's the code and I'll explain it in
a bit. But first, let me just show you what this code does. Basically, what it does is it creates
a new function draw dot that we can call on some root node. And then it's going to visualize it.
So if we call draw dot on D, which is this final value here, that is a times B plus C,
it creates something like this. So this is D. And you see that this is a times B, creating an
interpretive value plus C gives us this output node D. So that's draw dot of D. And I'm not going
to go through this in complete detail. You can take a look at Graphus and its API. Graphus is an
open source graph visualization software. And what we're doing here is we're building out this graph
in Graphus API. And you can basically see that trace is this helper function that enumerates all
the nodes and edges in the graph. So that just builds a set of all the nodes and edges. And then
we iterate for all the nodes and we create special node objects for them in using dot node.
And then we also create edges using dot dot edge. And the only thing that's like slightly
tricky here is you'll notice that I basically add these fake nodes, which are these operation nodes.
So for example, this node here is just like a plus node. And I create these
special op nodes here. And I connect them accordingly. So these nodes, of course, are not
actual nodes in the original graph. They're not actually a value object. The only value
objects here are the things in squares. Those are actual value objects or representations thereof.
And these op nodes are just created in this draw dot routine, so that it looks nice.
Let's also add labels to these graphs just so we know what variables are where.
So let's create a special underscore label. Or let's just do label equals empty by default
and save it in each node. And then here we're going to do label is a label is the label is C.
And then let's create a special equals a times B.
And label will be E. It's kind of naughty. And E will be E plus C. And D dot label will be B.
Okay, so nothing really changes. I just added this new E function,
new E variable. And then here when we are printing this, I'm going to print the label here. So this
will be a percent S bar. And this will be end up label. And so now we have the label on the lot
here. So this is a B creating me, and then E plus C creates D, just like we have it here.
And finally, let's make this expression just one layer deeper. So D will not be the final output
node. Instead, after D, we are going to create a new value object called F. We're going to start
running out of variables soon. F will be negative 2.0. And its label will of course just be F.
And then L, capital L will be the output of our graph. And L will be P times F.
Okay, so L will be negative eight is the output. So now we don't just draw a D, we draw L.
Okay. And somehow the label of L was undefined. Oops, all that label has to be explicitly
sort of given to it. There we go. So L is the output. So let's quickly recap what we've done so far.
We are able to build out mathematical expressions using only plus and times so far.
They are scalar valued along the way. And we can do this forward pass and build out a mathematical
expression. So we have multiple inputs here, a, b, c, and f, going into a mathematical expression
that produces a single output L. And this here is visualizing the forward pass. So the output
of the forward pass is negative eight. That's the value. Now what we'd like to do next is we'd like
to run back propagation. And in back propagation, we are going to start here at the end, and we're
going to reverse and calculate the gradient along all these intermediate values. And really what
we're computing for every single value here, we're going to compute the derivative of that
node with respect to L. So the derivative of L with respect to L is just one. And then we're
going to derive what is the derivative of L with respect to f with respect to D with respect to C
with respect to E with respect to B and with respect to A. And in neural network setting,
you'd be very interested in the derivative of basically this loss function L with respect to
the weights of a neural network. And here, of course, we have just these variables a, b, c, and f,
but some of these will eventually represent the weights of a neural net. And so we'll need to
know how those weights are impacting the loss function. So we'll be interested basically in
the derivative of the output with respect to some of its leaf nodes. And those leaf nodes will be
the weights of the neural net. And the other leaf nodes, of course, will be the data itself. But
usually we will not want or use the derivative of the loss function with respect to data,
because the data is fixed, but the weights will be iterated on using the gradient information.
So next, we are going to create a variable inside the value class that maintains the derivative
of L with respect to that value. And we will call this variable grad. So there's a dot data,
and there's a cell dot grad. And initially, it will be zero. And remember that zero is basically
means no effect. So at initialization, we're assuming that every value does not impact,
does not affect the output, right? Because if the gradient is zero, that means that changing
this variable is not changing the loss function. So by default, we assume that the gradient is zero.
And then now that we have grad, and it's 0.0, we are going to be able to visualize it here
after data. So here, grad is 0.4. And this will be in the grad. And now we are going to be showing
both the data and the grad initialized at zero. And we are just about getting ready to
calculate the back propagation. And of course, this grad, again, as I mentioned, is representing
the derivative of the output, in this case, L, with respect to this value. So with respect to,
so this is the derivative of L with respect to F, respect to D, and so on. So let's now fill in
those gradients and actually do back propagation manually. So let's start filling in these gradients
and start all the way at the end, as I mentioned here. First, we are interested to fill in this
gradient here. So what is the derivative of L with respect to L? In other words, if I change L
by a tiny amount h, how much does L change? It changes by h. So it's proportional, and therefore
the derivative will be 1. We can of course measure these or estimate these numerical gradients
numerically, just like we've seen before. So if I take this expression, and I create a def
lol function here, and put this here. Now the reason I'm creating a gating function lol here
is because I don't want to pollute or mess up the global scope here. This is just kind of like a
little staging area. And as you know, in Python, all of these will be local variables to this function.
So I'm not changing any of the global scope here. So here L1 will be L.
And then copy-pasting this expression, we're going to add a small amount h
in, for example, A. And this would be measuring the derivative of L with respect to A.
So here this will be L2. And then we want to print test derivatives. So print
L2 minus L1, which is how much L changed, and then normalize it by h. So this is the rise over run.
And we have to be careful because L is a value node, so we actually want its data.
So that these are floats dividing by h. And this should print the derivative of L with respect to
A because A is the one that we bumped a little bit by h. So what is the derivative of L with respect
to A? It's 6. Okay. And obviously, if we change L by h, then that would be here effectively.
This looks really awkward, but changing L by h, you see the derivative here is 1.
That's kind of like the base case of what we are doing here. So basically, we come up here
and we can manually set L.grad to 1. This is our manual back propagation.
L.grad is 1. And let's redraw. And we'll see that we filled in grad is 1 for L. We're now
going to continue the back propagation. So let's here look at the derivatives of L with respect to
d and f. Let's do d first. So what we are interested in, if I create a markdown on here,
is we'd like to know, basically, we have that L is d times f. And we'd like to know what is
dL by dd. What is that? And if you know your calculus, L is d times f. So what is dL by dd?
It would be f. And if you don't believe me, we can also just derive it because the proof would be
fairly straightforward. We go to the definition of the derivative, which is f of x plus h minus
f of x divide h as a limit of h goes to 0 of this kind of expression. So when we have L is d times
f, then increasing d by h would give us the output of d plus h times f. That's basically f of x plus
h, right? Minus d times f and then divide h. And symbolically, expanding out here, we would have
basically d times f plus h times f minus d times f divide h. And then you see how the df minus df
cancels. So you're left with h times f divide h, which is f. So in the limit as h goes to 0 of,
you know, derivative definition, we just get f in a case of d times f.
So symmetrically, dL by df will just be d. So what we have is that f dot grad, we see now,
is just the value of d, which is four. And we see that d dot grad is just the value of f.
And so the value of f is negative two. So we'll set those manually. Let me erase this markdown
node. And then let's redraw what we have. Okay. And let's just make sure that these were correct.
So we seem to think that dL by dd is negative two. So let's double check.
Let me erase this plus h from before. And now we want the derivative with respect to f.
So let's just come here when I create f and let's do a plus h here. And this should print
a derivative of l with respect to f. So we expect to see four. Yeah, and this is four up to floating
point funkiness. And then dL by dd should be f, which is negative two. Grad is negative two.
So if we, again, come here and we change d, d dot data plus equals h right here. So we expect,
so we've added a little h and then we see how l changed. And we expect to print negative two.
There we go. So we've numerically verified what we're doing here is we're kind of like an inline
gradient check. Gradient check is when we are deriving this like back propagation and getting
the derivative with respect to all the intermediate results. And then numerical gradient is just,
you know, estimating it using small step size. Now we're getting to the crux of back propagation.
So this will be the most important node to understand, because if you understand the gradient
for this node, you understand all of back propagation and all of training on neural
nets, basically. So we need to derive dL by dc. In other words, the derivative of l with respect to
c, because we've computed all these other gradients already. Now we're coming here and we're
continuing the back propagation manually. So we want dL by dc. And then we'll also derive dL by dE.
Now here's the problem. How do we derive dL by dc? We actually know the derivative l with respect to
d. So we know how l is sensitive to d. But how is l sensitive to c? So if we wiggle c, how does that
impact l through d? So we know dL by dc. And we also here know how c impacts d. And so just very
intuitively, if you know the impact that c is having on d, and the impact that d is having on l,
then you should be able to somehow put that information together to figure out how c impacts
l. And indeed, this is what we can actually do. So in particular, we know just concentrating on d
first. Let's look at how, what is the derivative basically of d with respect to c? So in other
words, what is dd by dc? So here we know that d is c time c plus e. That's what we know. And now we're
interested in dd by dc. If you just know your calculus again, and you remember that differentiating
c plus e with respect to c, you know that that gives you 1.0. And we can also go back to the basics
and derive this. Because again, we can go to our f of x plus h minus f of x divided by h.
That's the definition of a derivative as h goes to zero. And so here, focusing on c and its effect
on d, we can basically do the f of x plus h will be c is incremented by h plus c. That's the first
evaluation of our function minus c plus e. And then divide h. And so what is this? Just expanding
this out. This will be c plus h plus c minus c minus e divided h. And then you see here how c
minus c cancels, e minus e cancels were left with h over h, which is 1.0. And so by symmetry also,
dd by d e will be 1.0 as well. So basically, the derivative of a sum expression is very simple.
And this is the local derivative. So I call this the local derivative because we have the final output
value all the way at the end of this graph. And we're now like a small node here. And this is a
little plus node. And the little plus node doesn't know anything about the rest of the graph that
it's embedded in. All it knows is that it did a plus. It took a c and an e, added them and created
d. And this plus node also knows the local influence of c on d, or rather the derivative
of d with respect to c. And it also knows the derivative of d with respect to e. But that's
not what we want. That's just a local derivative. What we actually want is dl by dc. And l is here
just one step away. But in a general case, this little plus node could be embedded in like a
massive graph. So again, we know how l impacts d. And now we know how c and e impact d. How do we
put that information together to arrive dl by dc? And the answer, of course, is the chain rule in
calculus. And so I pulled up a chain rule here from Wikipedia. And I'm going to go through this
very briefly. So chain rule, Wikipedia sometimes can be very confusing. And calculus can be very
confusing. Like this is the way I learned chain rule. And it was very confusing. Like what is
happening? It's just complicated. So I like this expression much better. If a variable z depends
on a variable y, which itself depends on a variable x, then z depends on x as well, obviously,
through the intermediate variable y. In this case, the chain rule is expressed as if you want
dz by dx, then you take the dz by dy and you multiply it by dy by dx. So the chain rule
fundamentally is telling you how we chain these derivatives together correctly. So to differentiate
through a function composition, we have to apply a multiplication of those derivatives.
So that's really what chain rule is telling us. And there's a nice little intuitive explanation
here, which I also think is kind of cute. The chain rule states that knowing the instantaneous
rate of change of z with respect to y and y relative to x allows one to calculate the instantaneous
rate of change of z relative to x as a product of those two rates of change, simply the product of
those two. So here's a good one. If a car travels twice as fast as a bicycle and the bicycle is
four times as fast as walking men, then the car travels two times four, eight times as fast as
a man. And so this makes it very clear that the correct thing to do sort of is to multiply. So
cars twice as fast as a bicycle and bicycle is four times as fast as men. So the car will be
eight times as fast as the men. And so we can take these intermediate rates of change, if you will,
and multiply them together. And that justifies the chain rule intuitively. So have a look at
chain rule about here. Really what it means for us is there's a very simple recipe for deriving
what we want, which is dL by dC. And what we have so far is we know what is the impact of d on L.
So we know dL by dD, the derivative of L with respect to dD. We know that that's negative two.
And now because of this local reasoning that we've done here, we know dD by dC.
So how does c impact d? And in particular, this is a plus node. So the local derivative is simply
1.0. It's very simple. And so the chain rule tells us that dL by dC going through this intermediate
variable will just be simply dL by dD times dD by dC. That's chain rule. So this is identical
to what's happening here, except Z is RL, Y is RD, and X is RC. So we literally just have to multiply
these. And because these local derivatives like dD by dC are just one, we basically just copy over dL
by dD because this is just times one. So because dL by dD is negative two, what is dL by dC?
Well, it's the local gradient 1.0 times dL by dD, which is negative two. So literally what a plus
node does, you can look at it that way, is it literally just routes the gradient because the plus
nodes local derivatives are just one. And so in the chain rule, one times dL by dD is just dL by dD.
And so that derivative just gets routed to both C and to E in this case. So basically,
we have that E dot grad, or let's start with C, since that's the one we looked at, is negative two
times one negative two. And in the same way, by symmetry, E dot grad will be negative two.
That's the claim. So we can set those. We can redraw. And you see how we just assigned negative
to negative two? So this back propagating signal, which is carrying the information of like, what
is the derivative of L with respect to all the intermediate nodes? We can imagine it almost
like flowing backwards through the graph. And a plus node will simply distribute the derivative to
all the leaf nodes, sorry, to all the children nodes of it. So this is the claim. And now let's
verify it. So let me remove the plus H here from before. And now instead, what we're going to do
is we want to increment C. So C dot data will be incremented by H. And when I run this, we expect
to see negative two, negative two. And then of course, for E, so E dot data plus equals H,
and we expect to see negative two. Simple. So those are the derivatives of these internal nodes.
And now we're going to recurse our way backwards again. And we're again going to apply the chain
rule. So here we go, our second application of chain rule, and we will apply it all the way
through the graph, which has happened to only have one more node remaining. We have that dL
by dE, as we have just calculated, is negative two. So we know that. So we know the derivative
of L with respect to E. And now we want dL by dA, right? And the chain rule is telling us
that that's just dL by dE, negative two times the local gradient. So what is the local gradient?
Basically dE by dA. We have to look at that. So I'm a little times node inside a massive graph.
And I only know that I did A times B, and I produced an E. So now what is dE by dA,
and dE by dB? That's the only thing that I sort of know about. That's my local gradient.
So because we have that E is A times B, we're asking, what is dE by dA? And of course,
we just did that here. We had a times, so I'm not going to re-derive it. But if you want to
differentiate this with respect to A, you'll just get B, right? The value of B, which in this case
is negative 3.0. So basically we have that dL by dA. Well, let me just do it right here.
We have that A dot grad, and we are applying chain rule here, is dL by dE, which we see here is
negative two times, what is dE by dA? It's the value of B, which is negative three.
That's it. And then we have B dot grad is again dL by dE, which is negative two,
just the same way times, what is dE by dB? Is the value of A, which is 2.0. That's the value of A.
So these are our claimed derivatives. Let's redraw. And we see here that A dot grad turns out to be
six, because that is negative two times negative three. And B dot grad is negative two times two,
which is negative four. So those are our claims. Let's delete this and let's verify them.
We have A here, A dot data plus equals H. So the claim is that A dot grad is six. Let's verify
six. And we have B dot data plus equals H. So nudging B by H and looking at what happens,
we claim it's negative four. And indeed, it's negative four plus minus, again, float, oddness.
And that's it. That was the manual back propagation all the way from here to all the
leaf nodes. And we've done it piece by piece. And really, all we've done is, as you saw,
we iterated through all the nodes one by one and locally applied the chain rule. We always know
what is the derivative of L with respect to this little output. And then we look at how this
output was produced. This output was produced through some operation. And we have the pointers to the
children nodes of this operation. And so in this little operation, we know what the local derivatives
are. And we just multiply them onto the derivative always. So we just go through and recursively
multiply on the local derivatives. And that's what back propagation is. It's just a recursive
application of chain rule backwards through the computation graph. Let's see this power in action
just very briefly. What we're going to do is we're going to nudge our inputs to try to make L go up.
So in particular, what we're doing is we want a dot data, we're going to change it. And if we want
L to go up, that means we just have to go in the direction of the gradient. So a should increase
in the direction of gradient by like some small step amount. This is the step size. And we don't
just want this for B, but also for B. Also for C. Also for F. Those are leaf nodes, which we usually
have control over. And if we nudge in direction of the gradient, we expect a positive influence on L.
So we expect L to go up positively. So it should become less negative. It should go up to say
negative, you know, six or something like that. It's hard to tell exactly. And we have to rerun
the forward pass. So let me just do that here. This will be the forward pass. F would be unchanged.
This is effectively the forward pass. And now if we print L dot data, we expect because we
nudged all the values or the inputs in the direction of gradient, we expect it less negative L. We
expect it to go up. So maybe it's negative six or so. Let's see what happens. Okay, negative seven.
And this is basically one step of an optimization that will end up running. And really this gradient
just give us some power because we know how to influence the final outcome. And this will be
extremely useful for training neural nets as well as COC. So now I would like to do one more example
of manual back propagation using a bit more complex and useful example. We are going to back
propagate through a neuron. So we want to eventually build out neural networks. And in the simplest
case, these are multi-layer perceptrons as they're called. So this is a two-layer neural net. And it's
got these hidden layers made up of neurons. And these neurons are fully connected to each other.
Now biologically, neurons are very complicated devices, but we have very simple mathematical
models of them. And so this is a very simple mathematical model of a neuron. You have some
inputs axis. And then you have these synapses that have weights on them. So the W's are weights.
And then the synapse interacts with the input to this neuron multiplicatively. So what flows to the
cell body of this neuron is W times X. But there's multiple inputs. So there's many W times X's
flowing into the cell body. The cell body then has also like some bias. So this is kind of like the
innate sort of trigger happiness of this neuron. So this bias can make it a bit more
trigger happy or a bit less trigger happy, regardless of the input. But basically, we're
taking all the W times X of all the inputs, adding the bias, and then we take it through
an activation function. And this activation function is usually some kind of a squashing function,
like a sigmoid or 10H or something like that. So as an example, we're going to use the 10H in
this example. NumPy has a np.10H. So we can call it on a range and we can plot it. This is the 10H
function. And you see that the inputs as they come in, get squashed on the white coordinate here.
So right at zero, we're going to get exactly zero. And then as you go more positive in the input,
then you'll see that the function will only go up to one and then plateau out. And so if you pass
some very positive inputs, we're going to cap it smoothly at one. And on the negative side,
we're going to cap it smoothly to negative one. So that's 10H. And that's the squashing function
or an activation function. And what comes out of this neuron is just the activation function
applied to the dot product of the weights and the inputs. So let's write one out.
I'm going to copy paste because I don't want to type too much. But okay, so here we have the inputs
x1, x2. So this is a two dimensional neuron. So two inputs are going to come in.
These are thought of as the weights of this neuron, weights w1, w2. And these weights, again,
are the synaptic strengths for each input. And this is the bias of the neuron, b.
And now what we want to do is, according to this model, we need to multiply x1 times w1
and x2 times w2. And then we need to add bias on top of it. And it gets a little messy here,
but all we are trying to do is x1, w1 plus x2, w2 plus b. And these are multiplied here.
Except I'm doing it in small steps so that we actually have pointers to all these intermediate
nodes. So we have x1, w1 variable, x2, w2 variable, and I'm also labeling them.
So n is now the cell body raw activation without the activation function for now.
And this should be enough to basically plot it. So draw dot of n
n gives us x1 times w1, x2 times w2 being added. Then the bias gets added on top of this.
And this n is this sum. So we're now going to take it through an activation function.
And let's say we use the 10h so that we produce the output. So what we'd like to do here is we'd
like to do the output. And I'll call it O is n dot 10h. Okay, but we haven't yet written the 10h.
Now the reason that we need to implement another 10h function here is that 10h is a
hyperbolic function. And we've only so far implemented a plus and a times. And you can't
make a 10h out of just pluses and times. You also need explanation. So 10h is this kind of a formula
here. You can use either one of these. And you see that there is explanation involved,
which we have not implemented yet for our little value node here. So we're not going to be able
to produce 10h yet. And we have to go back up and implement something like it. Now one option here
is we could actually implement exponentiation, right? And we could return the x of a value
instead of a 10h of a value. Because if we had x, then we have everything else that we need
so because we know how to add and we know how to, we know how to add and we know how to multiply.
So we'd be able to create 10h if we knew how to exp. But for the purposes of this example,
I specifically wanted to show you that we don't necessarily need to have the most atomic pieces
in this value object. We can actually like create functions at arbitrary
points of abstraction. They can be complicated functions, but they can be also very, very simple
functions like a plus. And it's totally up to us. The only thing that matters is that we know how
to differentiate through any one function. So we take some inputs and we make an output. The only
thing that matters can be arbitrarily complex function, as long as you know how to create the
local derivative. If you know the local derivative of how the inputs impact the output, then that's
all you need. So we're going to cluster up all of this expression and we're not going to break
it down to its atomic pieces. We're just going to directly implement 10h. So let's do that.
Depth 10h and then out will be a value of, and we need this expression here. So
let me actually copy paste.
Let's grab n, which is a solid theta. And then this, I believe, is the 10h.
Math.x of 2, no n minus 1 over 2n plus 1. Maybe I can call this x, just so that it matches exactly.
Okay. And now this will be t. And children of this node, there's just one child.
And I'm wrapping it in a tuple. So this is a tuple of one object, just self.
And here the name of this operation will be 10h. And we're going to return that.
Okay. So now values should be implementing 10h. And now we can scroll all the way down here.
And we can actually do n.10h. And that's going to return the 10h output of n.
And now we should be able to draw it out of O, not of n. So let's see how that worked.
There we go. n went through 10h to produce this output. So now 10h is a sort of our little
micrograd supported node here as an operation. And as long as we know the derivative of 10h,
then we'll be able to back propagate through it. Now let's see this 10h in action.
Currently, it's not squashing too much because the input to it is pretty low. So the bias was
increased to say 8. Then we'll see that what's flowing into the 10h now is 2. And 10h is squashing
to 0.96. So we're already hitting the tail of this 10h. And it will sort of smoothly go up to 1
and then plateau out over there. Okay. So now I'm going to do something slightly strange.
I'm going to change this bias from 8 to this number, 6.88, etc. And I'm going to do this for
specific reasons because we're about to start back propagation. And I want to make sure that
our numbers come out nice. They're not like very crazy numbers. They're nice numbers that we can
sort of understand in our head. Let me also add pose label. O is short for output here.
So that's the R. Okay. So 0.88 flows into 10h comes out 0.7. So now we're going to do back
propagation and we're going to fill in all the gradients. So what is the derivative O with respect
to all the inputs here? And of course, in a typical neural network setting, what we really care about
the most is the derivative of these neurons on the weights specifically, the W2 and W1,
because those are the weights that we're going to be changing part of the optimization.
And the other thing that we have to remember is here, we have only a single neuron,
but in the neural net, you typically have many neurons and they're connected.
So this is only like a one small neuron, a piece of a much bigger puzzle. And eventually,
there's a loss function that sort of measures the accuracy of the neural net. And we're back
propagating with respect to that accuracy and trying to increase it. So let's start off back
propagation here and what is the derivative of O with respect to O? The base case sort of,
we know always is that the gradient is just 1.0. So let me fill it in. And then let me split out
the drawing function here. And then here, cell cleared this output here. So now when we draw O,
we'll see that grad is 1. So now we're going to back propagate through the 10h. So to back
propagate through 10h, we need to know the local derivative of 10h. So if we have that O is 10h
of n, then what is dO by dn? Now what you could do is you could come here and you could take this
expression and you could do your calculus derivative taking. And that would work. But we can also
just scroll down Wikipedia here into a section that hopefully tells us that derivative d by dx
of 10h of x is any of these. I like this one, 1 minus 10h square of x. So this is 1 minus 10h
of x squared. So basically what this is saying is that dO by dn is 1 minus 10h of n squared.
And we already have 10h of n. It's just O. So it's 1 minus O squared. So O is the output here.
So the output is this number. O dot data is this number. And then what this is saying is that dO
by dn is 1 minus this squared. So 1 minus O dot data squared is 0.5 conveniently. So the local
derivative of this 10h operation here is 0.5. And so that would be dO by dn. So we can fill in that
n dot grad is 0.5. We'll just fill it in. So this is exactly 0.5, 0.5. So now we're going to continue
the back propagation. This is 0.5. And this is a plus node. So how is back prop going to,
what is back prop going to do here? And if you remember our previous example, a plus is just a
distributor of gradient. So this gradient will simply flow to both of these equally. And that's
because the local derivative of this operation is one for every one of its nodes. So one times 0.5
is 0.5. So therefore, we know that this node here, which we called this, it's grad, it's just 0.5.
And we know that b dot grad is also 0.5. So let's set those and let's draw.
So this is our 0.5. Continuing, we have another plus. 0.5 again we'll just distribute. So 0.5
will flow to both of these. So we can set, there's x2w2 as well, dot grad is 0.5. And let's redraw.
Pluses are my favorite operations to back propagate through because it's very simple.
So now what's flowing into these expressions is 0.5. And so really, again, keep in mind what
derivative is telling us at every point in time along here. This is saying that if we want the
output of this neuron to increase, then the influence on these expressions is positive
on the output. Both of them are positive contribution to the output.
So now back propagating to x2w2. First, this is a times node. So we know that the local derivative
is one of the other term. So if we want to calculate x2 dot grad, then can you think through what it's
going to be? So x2 dot grad will be w2 dot data times this x2w2 dot grad.
And w2 dot grad will be x2 dot data times x2w2 dot grad.
So that's the little local piece of chain rule.
Let's set them and let's redraw. So here we see that the gradient on our weight
2 is 0 because x2's data was 0. But x2 will have the gradient 0.5 because data here was 1.
And so what's interesting here is because the input x2 was 0, then because of the way the times
works, of course this gradient will be 0. And to think about intuitively why that is,
derivative always tells us the influence of this on the final output. If I wiggle w2,
how is the output changing? It's not changing because we're multiplying by 0. So because it's
not changing, there is no derivative and 0 is the correct answer because we're squashing that 0.
And let's do it here. 0.5 should come here and flow through this times. And so we'll have
that x1 dot grad is, can you think through a little bit what this should be?
The local derivative of times with respect to x1 is going to be w1. So w1's data times
x1 w1 dot grad and w1 dot grad will be x1 dot data times x1 w2 w1 dot grad.
Let's see what those came out to be. So this is 0.5, so this would be negative 1.5 and this
would be 1. And we've back propagated through this expression. These are the actual final derivatives.
So if we want this neuron's output to increase, we know that what's necessary is that
w2, we have no gradient, w2 doesn't actually matter to this neuron right now,
but this neuron, this weight should go up. So if this weight goes up, then this neuron's
output would have gone up and proportionally because the gradient is 1. Okay, so doing the
back propagation manually is obviously ridiculous. So we are now going to put an end to this suffering
and we're going to see how we can implement the backward pass a bit more automatically.
We're not going to be doing all of it manually out here. It's now pretty obvious to us by example
how these pluses and times are back propagated ingredients. So let's go up to the value
object and we're going to start codifying what we've seen in the examples below.
So we're going to do this by storing a special self dot backward
and underscore backward and this will be a function which is going to do that little
piece of chain rule at each little node that took inputs and produced output.
We're going to store how we are going to chain the outputs gradient into the inputs gradients.
So by default, this will be a function that doesn't do anything.
So and you can also see that here in the value in micrograd. So with this backward function
by default doesn't do anything. This is a function and that would be sort of the case for example
for a leaf node. For a leaf node, there's nothing to do. But now if when we're creating these out
values, these out values are an addition of self and other. And so we want to set
outs backward to be the function that propagates the gradient.
So let's define what should happen
and we're going to store it in a closure. Let's define what should happen when we call
outs grad. For addition, our job is to take outs grad and propagate it into
self grad and other grad. So basically, we want to sell self grad to something
and we want to set others grad to something.
And the way we saw below how chain rule works, we want to take the local derivative times the
sort of global derivative, I should call it, which is the derivative of the final output
of the expression with respect to outs data, with respect to out. So the local derivative of
self in an addition is 1.0. So it's just 1.0 times outs grad. That's the chain rule. And others
dot grad will be 1.0 times out grad. And what you basically what you're seeing here is that outs grad
will simply be copied onto self grad and others grad as we saw happens for an addition operation.
So we're going to later call this function to propagate the gradient having done an addition.
Let's now do multiplication. We're going to also define out that backward
and we're going to set its backward to be backward.
And we want to chain out grad into self grad and others grad.
And this will be a little piece of chain rule for multiplication. So we'll have
so what should this be? Can you think through?
So what is the local derivative here? The local derivative was others that data.
And then others that data and then times out that grad. That's chain rule.
And here we have self that data times out that grad. That's what we've been doing.
And finally here for 10h that backward.
And then we want to set outs backwards to be just backward.
And here we need to back propagate. We have out that grad and we want to chain it into self grad.
And self grad will be the local derivative of this operation that we've done here,
which is 10h. And so we saw that the local gradient is one minus the 10h of x squared,
which here is t. That's the local derivative because that's t is the output of this 10h.
So one minus t square is the local derivative and then gradient has to be multiplied because
of the chain rule. So out grad is chained through the local gradient into self grad.
And that should be basically it. So we're going to redefine our value node.
We're going to swing all the way down here. And we're going to redefine our expression.
Make sure that all the grads are zero. Okay. But now we don't have to do this manually anymore.
We are going to basically be calling the dot backward in the right order.
So first we want to call oaths dot backward.
So O was the outcome of 10h, right? So calling those oaths backward
will be this function. This is what it will do. Now we have to be careful
because there's times out that grad and out that grad remember is initialized to zero.
So here we see grad zero. So as a base case, we need to set oath dot grad to 1.0
to initialize this with one. And then once this is one, we can call oath dot backward.
And what that should do is it should propagate this grad through 10h. So the local derivative
times the global derivative, which is initialized at one. So this should,
dope. So I thought about redoing it, but I figured I should just leave the error in here
because it's pretty funny. Why is non-tie object not callable? It's because I screwed up. We're
trying to save these functions. So this is correct. This here, we don't want to call the function
because that returns none. These functions return none. We just want to store the function.
So let me redefine the value object. And then we're going to come back in, redefine the expression,
draw dot. Everything is great. O dot grad is one. O dot grad is one. And now,
now this should work, of course. Okay. So all that backward should have,
this grad should now be 0.5 if we redraw. And if everything went correctly, 0.5. Yay.
Okay. So now we need to call ends dot grad, ends dot backward. Sorry.
Ends backward. So that seems to have worked.
So ends dot backward routed the gradient to both of these. So this is looking great.
Now we can, of course, call b dot grad, b dot backward, sorry. What's going to happen?
Well, b doesn't have a backward. b's backward, because b is a leaf node, b's backward is by
initialization the empty function. So nothing would happen, but we can call it on it.
But when we call this one, it's backward,
then we expect this 0.5 to get further routed. Right? So there we go, 0.5. And then finally,
we want to call it here on x2w2 and on x1w1.
Let's do both of those. And there we go. So we get 0.5, negative 1.5 and 1,
exactly as we did before. But now we've done it through calling that backward,
sort of manually. So we have one last piece to get rid of, which is us calling underscore
backward manually. So let's think through what we are actually doing. We've laid out a mathematical
expression and now we're trying to go backwards through that expression. So going backwards
through the expression just means that we never want to call a dot backward for any node before
we've done sort of everything after it. So we have to do everything after it before we're
ever going to call dot backward on any one node. We have to get all of its full dependencies,
everything that it depends on has to propagate to it before we can continue back propagation.
So this ordering of graphs can be achieved using something called topological sort.
So topological sort is basically a laying out of a graph such that all the edges go only from
left to right, basically. So here we have a graph, it's a directory acyclic graph, a DAG.
And this is two different topological orders of it, I believe, where basically you'll see that
it's a laying out of the nodes such that all the edges go only one way from left to right.
And implementing topological sort, you can look in Wikipedia and so on. I'm not going to go through
it in detail. But basically, this is what builds a topological graph. We maintain a set of visited
nodes. And then we are going through starting at some root node, which for us is O, that's where
we want to start the topological sort. And starting at O, we go through all of its children, and we
need to lay them out from left to right. And basically, this starts at O. If it's not visited,
then it marks it as visited. And then it iterates through all of its children,
and calls both topological on them. And then after it's gone through all the children, it adds
itself. So basically, this node that we're going to call it on, like say O, is only going to add
itself to the topo list after all of the children have been processed. And that's how this function
is guaranteeing that you're only going to be in the list once all your children are in the list.
And that's the invariant that is being maintained. So if we build topo on O, and then inspect this
list, we're going to see that it's ordered our value objects. And the last one is the value of
0.707, which is the output. So this is O, and then this is N. And then all the other nodes
get laid out before it. So that builds the topological graph. And really what we're doing
now is we're just calling dot underscore backward on all of the nodes in a topological order.
So if we just reset the gradients, they're all zero. What did we do? We started by
setting O dot grad to be one. That's the base case. Then we built the topological order.
And then we went for node in reversed of topo. Now, in the reverse order,
because this list goes from, you know, we need to go through it in reversed order.
So starting at O, node dot backward. And this should be it. There we go.
Those are the correct derivatives. Finally, we are going to hide this functionality.
So I'm going to copy this. And we're going to hide it inside the value class because we don't want
to have all that code lying around. So instead of an underscore backward, we're now going to
define an actual backward. So that backward without the underscore.
And that's going to do all the stuff that we just arrived. So let me just clean this up a little
bit. So we're first going to build the topological graph starting at self. So build topo of self
will populate the topological order into the topo list, which is a local variable.
Then we set self dot grads to be one. And then for each node in the reversed list,
so starting at us and going to all the children underscore backward.
And that should be it. So save. Come down here. We define. Okay, all the grads are zero.
And now what we can do is, oh, that backward without the underscore. And
there we go. And that's that's back propagation. Please for one neuron.
Now we shouldn't be too happy with ourselves actually, because we have a bad bug.
And we have not surfaced the bug because of some specific conditions that we are.
We have to think about right now. So here's the simplest case that shows the bug.
Say I create a single node a.
And then I create a B that is a plus a. And then I call backward.
So what's going to happen is a is three. And then a is a plus a. So there's two arrows on top of
each other here. Then we can see that B is of course the forward pass works. B is just a plus
a which is six. But the gradient here is not actually correct that we calculated automatically.
And that's because, of course, just doing calculus in your head, the derivative of B with respect to
a should be two. One plus one. It's not one. Incidentally, what's happening here, right?
So B is the result of a plus a. And then we call backward on it. So let's go up and see what that
does. B is the result of addition. So out as B. And then when we call backward, what happened is
self that grad was set to one. And then other that grad was set to one. But because we're doing a plus
a, self and other are actually the exact same object. So we are overriding the gradient,
we are setting it to one, and then we are setting it again to one. And that's why it stays at one.
So that's the problem. There's another way to see this in a little bit more complicated expression.
So here we have a and B. And then D will be the multiplication of the two. And E will be the addition
of the two. And then we multiply E times D to get F. And then we call it F that backward.
And these gradients, if you check, will be incorrect. So fundamentally, what's happening here,
again, is basically, we're going to see an issue anytime we use a variable more than once.
Until now, in these expressions above, every variable is used exactly once. So we didn't
see the issue. But here, if a variable is used more than once, what's going to happen during
backward pass? We're back propagating from F to E to D. So far so good. But now equals a backward.
And it deposits its gradients to a and B. But then we come back to D and called backward. And it
overwrites those gradients at a and B. So that's obviously a problem. And the solution here, if
you look at the multivariate case of the chain rule and its generalization there, the solution
there is basically that we have to accumulate these gradients, these gradients add. And so,
instead of setting those gradients, we can simply do plus equals, we need to accumulate those gradients
plus equals, plus equals, plus equals, plus equals. And this will be okay, remember,
because we are initializing them at zero. So they started zero. And then any contribution
that flows backwards will simply add. So now if we redefine this one,
because the plus equals this now works, because eight grads started at zero, and we call beta
backward, we deposit one, and then we deposit one again. And now this is two, which is correct.
And here this will also work. And we'll get the correct gradients. Because when we call E that
backward, we will deposit the gradients from this branch. And then we get to back into D that
backward, it will deposit its own gradients. And then those gradients simply add on top of each
other. And so we just accumulate those gradients and that fixes the issue. Okay, now before we
move on, let me actually do a bit of cleanup here and delete some of these, some of this
intermediate work. So we're not going to need any of this now that we've derived all of it.
We are going to keep this because I want to come back to it. Delete the 10h,
delete the example, delete the step, delete this, keep the code that draws,
and then delete this example, and leave behind only the definition of value.
And now let's come back to this non-linearity here that we implemented the 10h. Now I told you
that we could have broken down 10h into its explicit atoms in terms of other expressions
if we had the exp function. So if you remember, 10h is defined like this. And we chose to
develop 10h as a single function. And we can do that because we know it's derivative and we can
back propagate through it. But we can also break down 10h into an expressive function of exp.
And I would like to do that now because I want to prove to you that you get all the same results
and all the same gradients. But also because it forces us to implement a few more expressions.
It forces us to do exponentiation, addition, subtraction, division, and things like that.
And I think it's a good exercise to go through a few more of these. Okay, so let's scroll up
to the definition of value. And here, one thing that we currently can't do is we can't do like a
value of say 2.0. But we can't do, you know, here, for example, we want to add a constant 1. And we
can't do something like this. And we can't do it because it's just int object has no attribute data.
That's because a plus one comes right here to add. And then other is the integer one. And then here
Python is trying to access one dot data. And that's not a thing. That's because basically one is not
a value object. And we only have addition for value objects. So as a matter of convenience,
so that we can create expressions like this and make that make sense, we can simply do something
like this. Basically, we let other alone if other is an instance of value. But if it's not an instance
of value, we're going to assume that it's a number like an integer or float, and we're going to simply
wrap it in in value. And then other will just become value of other and then other will have a data
attribute. And this should work. So if I just say this, read the form value, then this should work.
There we go. Okay, now let's do the exact same thing for multiply, because we can't do something
like this again, for the exact same reason. So we just have to go to mall. And if other is
not a value, then let's wrap it in value. Let's redefine value. And now this works.
Now, here's a kind of unfortunate and not obvious part, a times two works, we saw that, but two times
a, is that going to work? You'd expect it to, right? But actually, it will not. And the reason
it won't is because Python doesn't know. Like when we do a times two, basically, so a times two,
Python will go and it will basically do something like a dot mall of two. That's basically what
we'll call. But to it, two times a is the same as two dot mall of a. And it doesn't to can't multiply
value. And so it's really confused about that. So instead, what happens is in Python, the way
this works is you are free to define something called the R mall. And our mall is kind of like
a fallback. So if if Python can't do two times a, it will check if if by any chance a knows how to
multiply two, and that will be called into our mall. So because Python can't do two times a,
it will check is there an R mall in value. And because there is, it will now call that. And what
we'll do here is we will swap the order of the operands. So basically, two times a will redirect
to our mall. And our mobile basically call a times two. And that's how that will work.
So redefining that with our mall, two times a becomes four. Okay, now looking at the other
elements that we still need, we need to know how to exponentiate and how to divide. So let's first
do the explanation part. We're going to introduce a single function X here. And X is going to mirror
10 H in the sense that it's a simple single function that transform a single scalar value and
outputs a single scalar value. So we pop out the Python number, we use method x to exponentiate it,
create a new value object, everything that we've seen before. The tricky part of course is how do
you back propagate through e to the x. And so here you can potentially pause the video and think
about what should go here. Okay, so basically, we need to know what is the local derivative of
e to the x. So d by dx of e to the x is famously just e to the x. And we've already just calculated
e to the x. And it's inside out that data. So we can do out that data times and out that grad,
that's the chain. So we're just chaining on to the current running grad. And this is what the
expression looks like. It looks a little confusing, but this is what it is. And that's the explanation.
So redefining, we should not be able to call a dot x. And hopefully the backward pass works as well.
Okay, and the last thing we'd like to do, of course, is we'd like to be able to divide.
Now, I actually will implement something slightly more powerful than division because
division is just a special case of something a bit more powerful. So in particular, just by
rearranging, if we would have some kind of a b equals value of 4.0 here, we'd like to basically
be able to do a divide b. And we'd like this to be able to give us 0.5. Now, division actually
can be reshuffled as follows. If we have a divide b, that's actually the same as a multiplying one
over b. And that's the same as a multiplying b to the power of negative one. And so what I'd like
to do instead is I basically like to implement the operation of x to the k for some constant k. So
it's an integer or a float. And we would like to be able to differentiate this. And then as a special
case, negative one will be division. And so I'm doing that just because it's more general and
yeah, you might as well do it that way. So basically what I'm saying is we can redefine
division, which we will put here somewhere. What I'm saying is that we can redefine
division. So self divide other can actually be rewritten as self times other to the power of
negative one. And now value raised to the power of negative one, we have to now define that.
So here's, so we need to implement the power function. Where am I going to put the power
function? Maybe here somewhere. This is the skeleton for it. So this function will be called
when we try to raise a value to some power and other will be that power. Now I'd like to make
sure that other is only an int or a float. Usually other is some kind of a different value object,
but here other will be forced to be an int or a float. Otherwise the math won't work for,
for we're trying to achieve in a specific case. That would be a different derivative expression
if we wanted other to be a value. So here we create the active value, which is just, you know,
this data raised to the power of other and other here could be for example, negative one. That's
what we are hoping to achieve. And then this is the backward stub. And this is the fun part,
which is what is the chain rule expression here for back for back propagating through the power
function where the power is to the power of some kind of a constant. So this is the exercise and
maybe pause the video here and see if you can figure it out yourself as to what we should put here.
Okay, so you can actually go here and look at derivative rules as an example,
and we see lots of derivative rules that you can hopefully know from calculus.
In particular, what we're looking for is the power rule, because that's telling us that if we're
trying to take d by dx of x to the n, which is what we're doing here, then that is just n times x
to the n minus one, right? Okay, so that's telling us about the local derivative of this power
operation. So all we want here, basically n is now other and self data is x. And so this now becomes
other, which is n times self data, which is now a Python int or a float. It's not a value object,
we're accessing the data attribute raised to the power of other minus one or n minus one.
I can put brackets around this, but this doesn't matter because power takes precedence over
multiply and by helm. So that would have been okay. And that's the local derivative only,
but now we have to chain it. And we chain it just simply by multiplying by on top ground.
That's chain rule. And this should technically work. And we're gonna find out soon. But now,
if we do this, this should now work. And we get point five. So the forward pass works,
but does the backward password. And I realized that we actually also have to know how to subtract.
So right now, a minus B will not work to make it work. We need one more piece of code here.
And basically, this is the subtraction. And the way we're going to implement subtraction is we're
going to implement it by addition of a negation. And then to implement negation, we're going to
multiply by negative one. So just again, using the stuff we've already built and just expressing it
in terms of what we have. And a minus B does not work. Okay, so now let's scroll again to this
expression here for this neuron. And let's just compute the backward pass here once we've defined
O. And let's draw it. So here's the gradients for all of these leaf nodes for this two dimensional
neuron that has a 10 H that we've seen before. So now what I'd like to do is I'd like to break up this
10 H into this expression here. So let me copy paste this here. And now instead of we'll preserve
the label, and we will change how we define O. So in particular, we're going to implement this
formula here. So we need e to the two x minus one over e to the x plus one. So e to the two x,
we need to take two times and and we need to exponentiate it. That's e to the two x. And
then because we're using it twice, let's create an intermediate variable e and then define O as
e plus one over e minus one over e plus one, e minus one over e plus one. And that should be it.
And then we should be able to draw dot of O. So now before I run this, what do we expect to see?
Number one, we're expecting to see a much longer graph here because we've broken up 10 H into a
bunch of other operations. But those operations are mathematically equivalent. And so what we're
expecting to see is number one, the same result here. So the forward pass works. And number two,
because of that mathematical equivalence, we expect to see the same backward pass and the
same gradients on these leaf nodes. So these gradients should be identical. So let's run this.
So number one, let's verify that instead of a single 10 H node, we have now X and we have
plus, we have times negative one. This is the division. And we end up with the same forward
pass here. And then the gradients, we have to be careful because they're in slightly different
order potentially. The gradients for w two x two should be zero and point five, w two and x two are
zero and point five, and w one x one are one and negative one point five, one and negative one
point five. So that means that both our forward passes and backward passes were correct, because
this turned out to be equivalent to 10 H before. And so the reason I wanted to go through this
exercise is number one, we got to practice a few more operations and writing more backwards passes.
And number two, I wanted to illustrate the point that the level at which you implement your operations
is totally up to you. You can implement backward passes for tiny expressions like a single individual
plus or a single times, or you can implement them for say, 10 H, which is a kind of a potentially
you can see it as a composite operation, because it's made up of all these more atomic operations.
But really, all of this is kind of like a fake concept. All that matters is we have some kind of
inputs and some kind of an output. And this output is a function of the inputs in some way.
And as long as you can do forward pass and the backward pass of that little operation,
it doesn't matter what that operation is, and how composite it is. If you can write the local
gradients, you can change the gradient and you can continue back application. So the design of
what those functions are is completely up to you. So now I would like to show you how you can do the
exact same thing by using a modern deep neural network library, like for example, PyTorch,
which I've roughly modeled micrograd by. And so PyTorch is something you would use in production.
And I'll show you how you can do the exact same thing, but in PyTorch API. So I'm just going to
copy paste it in and walk you through it a little bit. This is what it looks like.
So we're going to import PyTorch. And then we need to define these value objects like we have here.
Now micrograd is a scalar valued engine. So we only have scalar values like 2.0. But in PyTorch,
everything is based around tensors. And like I mentioned, tensors are just n dimensional arrays
of scalars. So that's why things get a little bit more complicated here. I just need a
scalar valued tensor, a tensor with just a single element. But by default, when you work with
PyTorch, you would use more complicated tensors like this. So if I import PyTorch,
then I can create tensors like this. And this tensor, for example, is a two by three array of
scalars in a single compact representation. So you can check its shape. We see that it's a two by
three array. And so on. So this is usually what you would work with in the actual libraries.
So here I'm creating a tensor that has only a single element, 2.0. And then I'm casting it to be
double, because Python is by default using double precision force floating point numbers. So I'd
like everything to be identical. By default, the data type of these tensors will be float 32.
So it's only using a single precision float. So I'm casting it to double
so that we have float 64 just like in Python. So I'm casting to double. And then we get something
similar to value of two. The next thing I have to do is because these are leaf nodes,
by default, PyTorch assumes that they do not require gradients. So I need to explicitly
say that all of these nodes require gradients. Okay, so this is going to construct scalar valued
one element tensors. Make sure that PyTorch knows that they require gradients. Now by default,
these are set to false, by the way, because of efficiency reasons, because usually you would
not want gradients for leaf nodes, like the inputs to the network. And this is just trying to be
efficient in the most common cases. So once we've defined all of our values in PyTorch land,
we can perform arithmetic just like we can here in micrograd land. So this would just work.
And then there's a torch dot 10h also. And when we get back as a tensor again,
and we can just like in micrograd, it's got a data attribute, and it's got grad attributes.
So these tensor objects just like in micrograd have a dot data and a dot grad. And the only
difference here is that we need to call a dot item, because otherwise PyTorch dot item basically
takes a single tensor of one element, and it just returns that element stripping out the tensor.
So let me just run this and hopefully we are going to get this is going to print the forward pass,
which is 0.707. And this will be the gradients, which hopefully are 0.50, negative 1.5, and 1.
So if we just run this, there we go, 0.7, so the forward pass agrees, and then 0.50,
negative 1.5, and 1. So PyTorch agrees with us. And just to show you here basically, oh,
here's a tensor with a single element, and it's a double, and we can call that item on it to
just get the single number out. So that's what item does. And O is a tensor object, like I mentioned,
and it's got a backward function just like we've implemented. And then all of these also have a
dot grad, so like x2 for example, and the grad, and it's a tensor, and we can pop out the individual
number with that item. So basically, Torch can do what we did in micrograd as a special case
when your tensors are all single element tensors. But the big deal with PyTorch is that everything
is significantly more efficient because we are working with these tensor objects, and we can do
lots of operations in parallel on all of these tensors. But otherwise, what we've built very
much agrees with the API of PyTorch. Okay, so now that we have some machinery to build out pretty
complicated mathematical expressions, we can also start building out neural nets. And as I mentioned,
neural nets are just a specific class of mathematical expressions. So we're going to start
building out a neural net piece by piece, and eventually we'll build out a two-layer multi-layer
layer perceptron, as it's called, and I'll show you exactly what that means. Let's start with a
single individual neuron. We've implemented one here, but here I'm going to implement one that
also subscribes to the PyTorch API and how it designs its neural network modules. So just
like we saw that we can like match the API of PyTorch on the autograd side, we're going to try to
do that on the neural network modules. So here's class neuron. And just for the sake of efficiency,
I'm going to copy-paste some sections that are relatively straightforward. So the constructor
will take number of inputs to this neuron, which is how many inputs come to a neuron. So this one,
for example, is three inputs. And then it's going to create a weight that is some random number
between negative one and one for every one of those inputs, and a bias that controls the overall
trigger happiness of this neuron. And then we're going to implement a def underscore underscore
call of self and x sum input x. And really what we're going to do here is w times x plus b,
or w times x here is a dot product specifically. Now if you haven't seen call, let me just return
0.0 here from now. The way this works now is we can have an x which is say like 2.0, 3.0,
then we can initialize a neuron that is two dimensional because these are two numbers.
And then we can feed those two numbers into that neuron to get an output. And so when you use this
notation n of x, Python will use call. So currently call just returns 0.0.
Now we'd like to actually do the forward pass of this neuron instead. So what we're going to do
here first is we need to basically multiply all of the elements of w with all of the elements of
x pairwise. We need to multiply them. So the first thing we're going to do is we're going to zip up
salta w and x. And in Python zip takes two iterators and it creates a new iterator that
iterates over the tuples of their corresponding entries. So for example, just to show you we
can print this list and still return 0.0 here. So we see that these w's are paired up with
the x's, w with x. And now what we want to do is for wi xi in we want to multiply w times wi
times xi. And then we want to sum all of that together to come up with an activation and add
also salta b on top. So that's the raw activation. And then of course we need to pass that through a
normality. So what we're going to be returning is act dot 10h. And here's out. So now we see that
we are getting some outputs and we get a different output from neuron each time because we are
initializing different weights and biases. And then to be a bit more efficient here actually,
sum by the way takes a second optional parameter which is the start. And by default the start is
0. So these elements of this sum will be added on top of 0 to begin with. But actually we can
just start with salta b. And then we just have an expression like this.
And then the generator expression here must be parenthesized by thumb. There we go.
Yep, so now we can forward a single neuron. Next up we're going to define a layer of neurons.
So here we have a schematic for a MLB. So we see that these MLBs each layer, this is one layer,
has actually a number of neurons and they're not connected to each other but all of them are
fully connected to the input. So what is a layer of neurons? It's just a set of neurons evaluated
independently. So in the interest of time I'm going to do something fairly straightforward here.
It's literally a layer is just a list of neurons. And then how many neurons do we have? We take that
as an input argument here. How many neurons do you want in your layer? Number of outputs in this
layer. And so we just initialize completely independent neurons with this given dimensionality
and when we call on it we just independently evaluate them. So now instead of a neuron we can
make a layer of neurons. There are two dimensional neurons and let's have three of them. And now we
see that we have three independent evaluations of three different neurons, right? Okay, finally
let's complete this picture and define an entire multilayer perceptron or MLB. And as we can see
here in an MLB these layers just feed into each other sequentially. So let's come here and I'm
just going to copy the code here in interest of time. So an MLB is very similar. We're taking
the number of inputs as before. But now instead of taking a single N out, which is number of
neurons in a single layer, we're going to take a list of N outs. And this list defines the sizes
of all the layers that we want in our MLP. So here we just put them all together and then iterate
over consecutive pairs of these sizes and create layer objects for them. And then the call function
we are just calling them sequentially. So that's an MLP really. And let's actually
reimplement this picture. So we want three input neurons and then two layers of four and an output
unit. So we want three dimensional input. Say this is an example input, we want three inputs into
two layers of four and one output. And this of course is an MLP. And there we go. That's a forward
pass of an MLP. To make this a little bit nicer, you see how we have just a single element but it's
wrapped in a list because layer always returns lists. So for convenience, return outs at zero if
len outs is exactly a single element. Else return full list. And this will allow us to just get a
single value out at the last layer that only has a single neuron. And finally, we should be able to
draw dot of n of x. And as you might imagine, these expressions are now getting relatively involved.
So this is an entire MLP that we're defining now
all the way until a single output. And so obviously you would never differentiate on pen and paper
these expressions. But with micrograd, we will be able to back propagate all the way through this
and back propagate into these weights of all these neurons. So let's see how that works.
Okay, so let's create ourselves a very simple example data set here. So this data set has four
examples. And so we have four possible inputs into the neural net. And we have four desired targets.
So we'd like the neural net to assign or output 1.0 when it's fed this example, negative one when
it's fed these examples and one when it's fed this example. So it's a very simple binary classifier
neural net basically that we would like here. Now let's think what the neural net currently
thinks about these four examples, we can just get their predictions. Basically, we can just call
n of x for x in axis. And then we can print. So these are the outputs of the neural net on those
four examples. So the first one is 0.91. But we'd like it to be one. So we should push this one
higher. This one we want to be higher. This one says 0.88. And we want this to be negative one.
This is 0.8, we want it to be negative one. And this one is 0.8, we want it to be one.
So how do we make the neural net and how do we tune the weights to better predict the desired
targets? And the trick used in deep learning to achieve this is to calculate a single number
that somehow measures the total performance of your neural net. And we call this single number
the loss. So the loss first is a single number that we're going to define that basically measures
how well the neural net is performing. Right now we have the intuitive sense that it's not
performing very well because we're not very much close to this. So the loss will be high
and we'll want to minimize the loss. So in particular in this case what we're going to do
is we're going to implement the mean squared error loss. So what this is doing is we're going to
basically iterate for y ground truth and y output in zip of y's and y's. So we're going to pair up
the ground truths with the predictions and the zip iterates over tuples of them. And for each
y ground truth and y output we're going to subtract them
and square them. So let's first see what these losses are. These are individual loss components.
And so basically for each one of the four we are taking the prediction and the ground truth.
We are subtracting them and squaring them. So because this one is so close to its target
point nine one is almost one subtracting them gives a very small number. So here we would get
like a negative point one and then squaring it just makes sure that regardless of whether we are
more negative or more positive we always get a positive number. Instead of squaring we should
note we could also take for example the absolute value. We need to discard the sign. And so you
see that the expression is ranged so that you only get zero exactly when y out is equal to y
ground truth. When those two are equal so your prediction is exactly the target you are going
to get zero. And if your prediction is not the target you are going to get some other number.
So here for example we are way off and so that's why the loss is quite high. And the more off we are
the greater the loss will be. So we don't want high loss we want low loss. And so the final
loss here will be just the sum of all of these numbers. So you see that this should be zero
roughly plus zero roughly but plus seven. So loss should be about seven here. And now we want to
minimize the loss. We want the loss to be low because if loss is low then every one of the
predictions is equal to its target. So the loss the lowest it can be is zero and the greater it is
the worse off the neural net is predicting. So now of course if we do loss that backward
something magical happened when I hit enter. And the magical thing of course that happened
is that we can look at and dot layers dot neuron and dot layers at say like the first layer
dot neurons at zero. Because remember that MLP has the layers which is a list
and each layer has a neurons which is a list and that gives us an individual neuron
and then it's got some weights. And so we can for example look at the weights at zero.
Oops it's not called weights it's called W. And that's a value but now this value also has a
grad because of the backward pass. And so we see that because this gradient here on this particular
weight of this particular neuron of this particular layer is negative we see that its influence on
the loss is also negative. So slightly increasing this particular weight of this neuron of this layer
would make the loss go down. And we actually have this information for every single one of our
neurons and all their parameters. Actually it's worth looking at also the draw dot of loss by the
way. So previously we looked at the draw dot of a single neuron that neuron forward pass and that
was already a large expression. But what is this expression? We actually forwarded every
one of those four examples and then we have the loss on top of them with the mean squared error.
And so this is a really massive graph because this graph that we've built up now
oh my gosh this graph that we've built up now which is kind of excessive. It's excessive because
it has four forward passes of a neural nut for every one of the examples and then it has the
loss on top and it ends with the value of the loss which was 7.12. And this loss will now back
propagate through all the forward passes all the way through just every single intermediate
value of the neural net. All the way back to of course the parameters of the weights which are the
input. So these weight parameters here are inputs to this neural net and these numbers here these
scalars our inputs to the neural net. So if we went around here we will probably find some of
these examples this 1.0 potentially maybe this 1.0 or you know some of the others and you'll see
that they all have gradients as well. The thing is these gradients on the input data are not that
useful to us and that's because the input data seems to be not changeable. It's a given to the
problem and so it's a fixed input we're not going to be changing it or messing with it
even though we do have gradients for it. But some of these gradients here
will be for the neural network parameters the W's and the B's and those we of course we want to
change. Okay so now we're going to want some convenience codes to gather up all of the parameters
of the neural net so that we can operate on all of them simultaneously and every one of them we
will nudge a tiny amount based on the gradient information. So let's collect the parameters
of the neural net all in one array. So let's create a parameters of self that just returns
salta w which is a list concatenated with a list of salta b. So this will just return a list
list plus list just you know gives you a list. So that's parameters of neuron and I'm calling it
this way because also PyTorch has a parameters on every single and in module and it does exactly
what we're doing here it just returns the parameter tensors for us is the parameter scalars.
Now layer is also a module so it will have parameters
self and basically what we want to do here is something like this like
params is here and then for neuron in salt.neurons we want to get neuron parameters
and we want to params.extend. So these are the parameters of this neuron and then we want to
put them on top of params so params.extend of piece and then we want to return params.
So this is way too much code so actually there's a way to simplify this which is return
p for neuron in self.neurons for p in neuron dot parameters. So it's a single list comprehension
in Python you can sort of nest them like this and you can then create the desired array. So this
is these are identical we can take this out and then let's do the same here
that parameters salt and return a parameter for layer in self dot layers for
p in layer dot parameters and that should be good. Now let me pop out this so we don't
re-initialize our network because we need to re-initialize our
okay so unfortunately we will have to probably re-initialize the network because we just had
functionality because this class of course I want to get all the end dot parameters but that's not
going to work because this is the old class okay so unfortunately we do have to re-initialize the
network which will change some of the numbers but let me do that so that we pick up the new API
we can now do end dot parameters and these are all the weights and biases inside the entire neural
net so in total this MLP has 41 parameters and now we'll be able to change them if we
recalculate the loss here we see that unfortunately we have slightly different
predictions and slightly different loss but that's okay okay so we see that
this neuron's gradient is slightly negative we can also look at its data right now
which is 0.825 so this is the current value of this neuron and this is its gradient on the loss
so what we want to do now is we want to iterate for every p in end dot parameters
so for all the 41 parameters in this neural net we actually want to change p dot data
slightly according to the gradient information okay so dot dot dot to do here but this will
be basically a tiny update in this gradient descent scheme and gradient descent we are
thinking of the gradient as a vector pointing in the direction of increased loss
and so in gradient descent we are modifying p dot data by a small step size in the direction of
the gradient so the step size as an example could be like a very small number like 0.01 is the step
size times p dot grad right but we have to think through some of the signs here so in particular
working with this specific example here we see that if we just left it like this
then this neuron's value would be currently increased by a tiny amount of the gradient
the gradient is negative so this value of this neuron would go slightly down it would become
like 0.84 or something like that but if this neuron's value goes lower that would actually
increase the loss that's because the derivative of this neuron is negative so increasing this
makes the loss go down so increasing it is what we want to do instead of decreasing it
so basically what we're missing here is we're actually missing a negative sign
and again this other interpretation and that's because we want to minimize the loss we don't
want to maximize the loss we want to decrease it and the other interpretation as I mentioned
is you can think of the gradient vector so basically just the vector of all the gradients
as pointing in the direction of increasing the loss but then we want to decrease it so
we actually want to go in the opposite direction and so you can convince yourself that this
does the right thing here with the negative because we want to minimize the loss
so if we notch all the parameters by a tiny amount
then we'll see that this data will have changed a little bit so now this neuron
is a tiny amount creator value so 0.854 went to 0.857 and that's a good thing because slightly
increasing this neuron data makes the loss go down according to the gradient and so the
correcting has happened signwise and so now what we would expect of course is that because we've
changed all these parameters we expect that the loss should have gone down a bit so we want to
reevaluate the loss let me basically this is just a data definition that hasn't changed
but the forward pass here of the network we can recalculate
and actually let me do it outside here so that we can compare the two loss values
so here if I recalculate the loss we'd expect the neuron loss now to be slightly lower than
this number so hopefully what we're getting now is a tiny bit lower than 4.84 4.36 okay and remember
the way we've arranged this is that low loss means that our predictions are matching the targets
so our predictions now are probably slightly closer to the targets and now all we have to do
is we have to iterate this process so again we've done the forward pass and this is the loss
now we can lost that backward let me take these out and we can do a step size
and now we should have a slightly lower loss 4.36 goes to 3.9 and okay so
we've done the forward pass here's the backward pass nudge and now the loss is 3.66
3.47 and you get the idea we just continue doing this and this is a gradient descent
we're just iteratively doing forward pass backward pass update forward pass backward
pass update and the neural net is improving its predictions so here if we look at white bread now
white bread we see that this value should be getting closer to 1 so this value should be
getting more positive these should be getting more negative and this one should be also getting
more positive so if we just iterate this a few more times actually we may be able to
afford go to go a bit faster let's try a slightly higher learning rate
oops okay there we go so now we're at point three one
if you go too fast by the way if you try to make it too big of a step you may actually overstep
it's overconfidence because again remember we don't actually know exactly about the loss
function the loss function has all kinds of structure and we only know about the very local
dependence of all these parameters on the loss but if we step too far we may step into you know
a part of the loss that is completely different and that can destabilize training and make your
loss actually blow up even so the loss is now point oh four so actually the predictions should
be really quite close let's take a look so you see how this is almost one almost negative one
almost one we can continue going so yep backward update oops there we go so we went way too fast
and we actually overstepped so we got to uh two eager where are we now oops okay seven
in negative nine so this is very very low loss and the predictions are basically perfect
so somehow we basically we were doing way to the updates and we briefly exploded but then somehow
we ended up getting into a really good spot so usually this learning rate and the tuning
of it is a is a subtle art you want to set your learning rate if it's too low you're going to
take way too long to converge but if it's too high the whole thing gets unstable and you might
actually even explode the loss depending on your loss function so finding the step size to be just
right it's it's a pretty subtle art sometimes when you're using sort of vanilla gradient descent
but we happen to get into a good spot we can look at um end dot parameters
so this is the setting of weights and biases that makes our network predict the desired targets
very very close and um basically we've successfully trained in neural net
okay let's make this a tiny bit more respectable and implement an actual training loop and what
that looks like so this is the data definition that stays this is the forward pass um so for uh k
in range you know we're going to take a bunch of steps first you do the forward pass we evaluate
the loss let's re-initialize the neural net from scratch and here's the data
and we first do the forward pass then we do the backward pass
and then we do an update that's gradient descent
and then we should be able to iterate this and we should be able to print the current step
loss um let's just print the sort of number of the loss and that should be it
and then the learning rate 0.01 is a little too small 0.1 we saw is like a little bit dangerous
if you buy let's go somewhere in between and we'll optimize this for not 10 steps but let's go for
say 20 steps let me erase all of this junk and let's run the optimization
and you see how we've actually converged slower in a more controlled manner and got to a loss that
is very low so i expect widespread to be quite good there we go um and that's it okay so this is
kind of embarrassing but we actually have a really terrible bug in here and it's a subtle bug
and it's a very common bug and i can't believe i've done it for the 20th time in my life especially
on camera and i could have reshot the whole thing but i think it's pretty funny and you know you get
to appreciate a bit what um working with neural nuts maybe is like sometimes we are guilty of
a common bug i've actually tweeted the most common neural that mistakes a long time ago now
and i'm not really gonna explain any of these except for we are guilty of number three you
forgot to zero grad before dot backward what is that basically what's happening and it's a subtle bug
and i'm not sure if you saw it is that all of these weights here have a dot data and a dot grad
and the dot grad starts at zero and then we do backward and we fill in the gradients
and then we do an update on the data but we don't flush the grad it stays there
so when we do the second forward pass and we do backward again remember that all the backward
operations do a plus equals on the grad and so these gradients just add add up and they never
get reset to zero so basically we didn't zero grad so here's how we zero grad the forward
backward we need to iterate over all the parameters and we need to make sure that p dot grad is set to
zero we need to reset it to zero just like it is in the constructor so remember all the way here
for all these value nodes grad is reset to zero and then all these backward passes do a plus equals
from that grad but we need to make sure that we reset these grads to zero so that when we do
backward all of them start at zero and the actual backward pass accumulates the loss derivatives
into the grads so this is zero grad in PyTorch and we will get a slightly different optimization
let's reset the neural net the data is the same this is now I think correct and we get a much more
you know we get a much more slower descent we still end up with pretty good results and we
can continue this a bit more to get down lower and lower and lower
yeah so the only reason that the previous thing worked it's it's extremely buggy the only reason
that worked is that this is a very very simple problem and it's very easy for this neural net
to fit this data and so the grads ended up accumulating and it effectively gave us a massive
step size and it made us converge extremely fast but basically now we have to do more steps
to get to very low values of loss and get y-pred to be really good we can try to step a bit greater
yeah we're going to get closer and closer to one minus one and one so
working with neural nets is sometimes tricky because you may have lots of bugs in the code
and your network might actually work just like ours worked but chances are is that if we had a more
complex problem then actually this bug would have made us not optimize the loss very well
and we were only able to get away with it because the problem is very simple so let's now bring
everything together and summarize what we learned what are neural nets neural nets are these
mathematical expressions fairly simple mathematical expressions in the case of multi-layer perceptron
that take input as the data and they take input the weights and the parameters of the neural net
mathematical expression for the forward pass followed by a loss function and the loss function
tries to measure the accuracy of the predictions and usually the loss will be low when your
predictions are matching your targets or where the network is basically behaving well so we manipulate
the loss function so that when the loss is low the network is doing what you want it to do on your
problem and then we backward the loss use back propagation to get the gradient and then we know
how to tune all the parameters to decrease the loss locally but then we have to iterate that
process many times in what's called the gradient descent so we simply follow the gradient information
and that minimizes the loss and the loss is arranged so that when the loss is minimized
the network is doing what you want it to do and yeah so we just have a blob of neural stuff
and we can make it do arbitrary things and that's what gives neural nets their power
it's you know this is a very tiny network with 41 parameters but you can build significantly
more complicated neural nets with billions at this point almost trillions of parameters
and it's a massive blob of neural tissue simulated neural tissue roughly speaking
and you can make it do extremely complex problems and these neural nets then have all
kinds of very fascinating emergent properties in when you try to make them do significantly hard
problems as in the case of GPT for example we have massive amounts of text from the internet
and we're trying to get a neural net to predict to take like a few words and try to predict the
next word in a sequence that's the learning problem and it turns out that when you train
this on all of internet the neural net actually has like really remarkable emergent properties
but that neural net would have hundreds of billions of parameters but it works on fundamentally
these exact same principles the neural net of course will be a bit more complex but otherwise the
evaluating the gradient is there and will be identical and the gradient descent would be there
and would be basically identical but people usually use slightly different updates this is a
very simple stochastic gradient descent update and the loss function would not be a mean squared
error they would be using something called the cross entropy loss for predicting the next token
so there's a few more details but fundamentally the neural network setup and neural network training
is identical and pervasive and now you understand intuitively how that works under the hood
in the beginning of this video i told you that by the end of it you would understand everything
in micrograd and then we'd slowly build it up let me briefly prove that to you
so i'm going to step through all the code that is in micrograd as of today
actually potentially some of the code will change by the time you watch this video because
i intend to continue developing micrograd but let's look at what we have so far at least
init.py is empty when you go to engine.py that has the value everything here you should mostly
recognize so we have the data dot data dot grad attributes we have the backward function
we have the previous set of children and the operation that produced this value
we have addition multiplication and raising to a scalar power we have the relu non-linearity which
is slightly different type of non-linearity than 10h that we used in this video both of them are
non-linearity and notably 10h is not actually present in micrograd as of right now but i intend
to add it later we have the backward which is identical and then all of these other operations
which are built up on top of operations here so value should be very recognizable except for the
non-linearity used in this video there's no massive difference between relu and 10h and sigmoid
and these other non-linearity they're all roughly equivalent and can be used in mlp's so i use 10h
because it's a bit smoother and because it's a little bit more complicated than relu and therefore
it's stressed a little bit more the the local gradients and working with those derivatives
which i thought would be useful nn.py is the neural networks library as i mentioned so you
should recognize identical implementation of neuron layer and mlp notably or not so much
we have a class module here there's a parent class of all these modules i did that because
there's an nn.module class in pytorch and so this exactly matches that api and nn.module
in pytorch has also a zero grad which i refactored out here um so that's the end of micrograd really
then there's a test which you'll see basically creates two chunks of code one in micrograd and one
in pytorch and we'll make sure that the forward and the backward paths agree identically for a
slightly less complicated expression a slightly more complicated expression everything agrees
so we agree with pytorch on all of these operations and finally there's a demo that
hypymb here and it's a bit more complicated binary classification demo than the one i covered
in this lecture so we only had a tiny data set of four examples um here we have a bit more complicated
example with lots of blue points and lots of red points and we're trying to again build a binary
classifier to distinguish uh two dimensional points as red or blue it's a bit more complicated mlp
here with it's a bigger mlp the loss is a bit more complicated because it supports batches so
because our data set was so tiny we always did a forward pass on the entire data set of
four examples but when your data set is like a million examples what we usually do in practice
is we uh we basically pick out some random subset we call that a batch and then we only process the
batch forward backward and update so we don't have to forward the entire training set uh so this
supports batching because there's a lot more examples here we do a forward pass the loss is
slightly more different this is a max margin loss that i implement here the one that we used was
the mean squared error loss because it's the simplest one there's also the binary cross entropy loss
all of them can be used for binary classification and don't make too much of a difference in the
simple examples that we looked at so far there's something called l2 regularization used here
this has to do with generalization of the neural net and controls the overfitting in machine learning
setting but i did not cover these concepts in concepts in this video potentially later
and the training loop you should recognize so forward backward with zero grad and update and
so on you'll notice that in the update here the learning rate is scaled as a function of
number of iterations and it shrinks and this is something called learning rate decay so in the
beginning you have a high learning rate and as the network sort of stabilizes near the end you
bring down the learning rate to get some of the fine details in the end and in the end we see the
decision surface of the neural net and we see that it learns to separate out the red and the blue
area based on the data points so that's the slightly more complicated example in the demo
demo.ipymb that you're free to go over but yeah as of today that is micrograd i also wanted to
show you a little bit of real stuff so that you get to see how this is actually implemented in
production grade library like PyTorch so in particular i wanted to show i wanted to find and
show you the backward pass for 10h in PyTorch so here in micrograd we see that the backward
pass for 10h is 1 minus t square where t is the output of the 10h of x times of that grad which
is the chain rule so we're looking for something that looks like this now i went to PyTorch which
has an open source github code base and i looked through a lot of its code and honestly i spent
about 15 minutes and i couldn't find 10h and that's because these libraries unfortunately they grow
in size and entropy and if you just search for 10h you get apparently 2,800 results and 400 and
406 files so i don't know what these files are doing honestly and why there are so many mentions
of 10h but unfortunately these libraries are quite complex they're meant to be used not really
inspected um eventually i did stumble on someone who tries to change the 10h backward code for some
reason and someone here pointed to the CPU kernel and the CUDA kernel for 10h backward
so this so basically depends on if you're using PyTorch on a CPU device or on a GPU which these
are different devices and i haven't covered this but this is the 10h backward kernel for
CPU and the reason it's so large is that number one this is like if you're using a complex type
which we haven't even talked about if you're using a specific data type of bfloat 16 which we haven't
talked about um and then if you're not then this is the kernel and deep here we see something that
resembles our backward pass so they have a times 1 minus b square so this b b here must be the output
of the 10h and this is the out dot grad so here we found it deep inside PyTorch on this location
for some reason inside binary ops kernel when 10h is not actually a binary op and then this is the
GPU kernel um we're not complex we're here and here we go with one line of code so we did find it
but uh basically unfortunately these code bases are very large and micrograd is very very simple
but if you actually want to use real stuff finding the code for it you'll actually find that difficult
i also wanted to show you a whole example here where PyTorch is showing you how you can register
a new type of function that you want to add to PyTorch as a lego building block so here if you
want to for example add a legionder polynomial three uh here's how you can do it you will register
it as a class that subclasses torch dot hardware that function and then you have to tell PyTorch how
to forward your new function and how to backward through it so as long as you can do the forward
pass of this little function piece that you want to add and as long as you know the the local derivative
the local gradients which are implemented in the backward PyTorch will be able to back propagate
through your function and then you can use this as a lego block in a larger lego castle of all the
different lego blocks that PyTorch already has and so that's the only thing you have to tell
PyTorch and everything would just work and you can register new types of functions uh in this way
following this example and that is everything that i wanted to cover in this lecture so i hope you
enjoy building out micrograd with me i hope you find it interesting insightful and uh yeah i will
post a lot of the links uh that are related to this video in the video description below i will
also probably post a link to a discussion forum or discussion group where you can ask
questions related to this video and then i can answer or someone else can answer your questions
and i may also do a follow-up video that answers some of the most common questions
but for now that's it i hope you enjoyed it if you did then please like and subscribe so that
youtube knows to feature this video to more people and that's it for now i'll see you later
now here's the problem we know dl by wait what is the problem
and that's everything i wanted to cover in this lecture so i hope um you enjoyed us building
out micrograb micrograb okay now let's do the exact same thing for multiply because we can't
do something like eight times two oops i know what happened there
