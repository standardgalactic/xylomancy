Okay, G'day all and welcome to another video.
Today we're going to be talking about computing things.
But not just anything, today we are talking about computing everything.
The topic of today is going to be an adventure through the amazing world of discrete maths.
We're going to time travel through the Victorian era and talk about some crazy ideas that a
follicle George had once.
And we're going to travel through the 1940s and meet a brilliant little follicle Alan.
And we're going to look at how to compute every single thing ever along the way.
It's going to be fun.
Okay, I have written a little e-book for this video and I'll be putting that up for the
Patreons as a big thank you for supporting the channel.
It really, really does mean a lot to me.
If you, humble viewer, would like to become a Patreon of this very channel, there will
be a link down below and another one up above.
Okay, that's good, but computing things.
Let's imagine that we've got a very, very tiny computer.
It's extremely tiny, so small that a lot of people wouldn't even regard this as a computer
but I tell you what it is, it's just our tiny computer and it's brilliant.
Anyway, our tiny computer is very excellent and it reads only two inputs and it produces
one output.
For its inputs, they're both going to be binary and its output is also going to be binary.
So you could think of this like a computer and it just has two buttons, A and B, they're
either pushed or they're not.
And it's also got a monitor, but the monitor is kind of a rubbish resolution and this monitor
is either on or off.
The monitor just shows a one or a zero.
So if we've got our little computer here and the inputs are labeled A and B, then these
are all four possible inputs that we could give to our computer.
These are the questions that we could ask this little computer.
Now there is no more.
We're either pushing button A or we're not.
We're pushing button B or we're not.
It's either off, off, off, on, on, off, or on, on.
That's all there is.
Now for each of those questions or input patterns, the computer can answer either zero or one.
It just puts it up on its monitor, zero or one.
We could add another little column just here for our little computer specification, the
output.
And this is going to list the answers to each of the questions.
So let's define what the answers to each of the questions is.
We can just make this up as we go.
Well I happen to like one zero zero zero.
So let's define that as the output, shall we?
Now some of you, possibly a lot of you, might recognize exactly what this little bad boy
is, but keep stumbling, keep stumbling.
Okay but that is our inputs and our outputs.
So when we input zero zero to our computer, it returns zero.
And if we input zero one or one zero, our little computer will also return zero and
zero.
But and the exciting bit, I use the word exciting quite loosely, but the exciting bit is when
we input one one to our tiny computer, it returns one.
Good stuff.
Now a lot of you are probably thinking, well that's the dumbest computer I've ever seen.
Who would ever use a computer like this?
But what if I was to tell you that this little operation just here is computed literally
billions of times per second by basically every single computer on Earth.
For this, humble little operation is none other than Boolean and, well there you go.
Mr George Boole was a mathematician from Victorian era England.
Largely self-taught, he defined a logical algebra which bears his name to this very
day.
It would be quite amazing what this man thought of.
Like we're talking, you know, a good hundred years or so before computers really existed.
We're talking like Sherlock Holmes days, you know, this is Jack the Ripper era.
People were still getting around with horses and carts.
I mean there was barely any electric lighting.
He sat down one morning with his cup of tea and just thought, you know what, I'm tired
of doing algebra with numbers, I'm going to do it with some logic instead.
How's about that?
Everybody around here must have just looked at him and thought, what on earth are you,
George?
What are you talking about?
What are you doing?
Well it turns out, it turns out that Mr Boole was onto something, I tell you what, the dude
was onto something, holy mackerel.
Another fellow, Charles Babbage, was going absolutely ballistic making crazy machines
to do just incredible things.
He had a machine called the Difference Engine, was performing calculus with a bunch of valves
and tubes and craziness.
But anyway, a lot of the ideas that these Victorian era mathematicians, your Booles
and your Babbage's, a lot of their ideas actually went on to be extremely useful.
And form the foundation of modern computing.
What a history we have here on earth, eh?
What an amazing place, amazing time, Victorian era, good stuff, well done, the lot he is.
So this is Boolean AND, it takes two bits of input, A and B, and it returns a single
output, O. And the output is zero for all of the combinations of inputs except where
A and B are one.
And the way that we've drawn this out in columns like this, actually has a name, this
is called a truth table.
Truth tables are a common way to specify logical operations such as Boolean AND, anyway, for
George Boole AND was not enough for his algebra, so he defined a couple more operations.
We've also got Boolean OR, and we've got Boolean NOT as well.
And here's Boolean OR, takes two bits, just like Boolean AND, it returns one bit, the
output column just here, and the pattern of zeros and ones that it returns is different.
So that's really what defines these different operations, it's the output.
But at any rate, Boolean OR returns a one for all of the input patterns except for the
first one.
Whenever the inputs are zero, zero, Boolean OR returns zero, otherwise it returns one.
We can think about this in a whole bunch of different ways, really the operation is asking
is A OR B, one, and if either of them is one or both of them are one, then the answer is
one, or yes, or true, and if both of the inputs are zero or false, then the answer is false.
Boolean OR.
The final operation that Mr. Boole defined is Boolean NOT.
NOT actually only takes one input, and it just returns whatever the opposite is.
So if we've got A as our input, if A is zero, then NOT A is one.
A is one, then NOT A is zero.
So Boolean NOT is sometimes called the complement, or the bitwise complement, sometimes also
called the ones complement, it just depends on the circumstance, but Boolean NOT just flips
the bit.
I want to also mention that sometimes along with calling these things operations or functions
or whatever, you'll often see them called gates, especially when they're implemented
in hardware, using transistors and electricery.
Yeah, logic gate, logic operation, Boolean operation, whatever you want to call it, it's
all the same thing.
But we've got our three Boolean operations here, Boolean AND, Boolean OR, and Boolean
NOT.
You might be tempted to ask something like why those three operations?
Why those three, AND OR and NOT?
I mean they seem interesting enough, but why those three?
You might also be tempted to ask, well, if those three exist, how many other operations
are there?
And what we can do here to figure out the answer to this, we can say, well, the output
column has four bits in it.
And if each of these operations is defined by a different output pattern, then that means
that there must be two to the power of four different patterns, sixteen different operations.
And here they all are, in all their glory, all sixteen binary operations.
Now, it looks a little bit messy, I mean there's just a bunch of 1s and 0s everywhere, but there
should be some familiar faces in there.
So right here, that's Boolean AND, and here's Boolean OR.
You'll also notice that some of these operations have redundant information in them, for instance,
the operation NOT A, just here, which produces the opposite of the A input, well NOT A actually
only reads A, doesn't read the B variable at all, and NOT B is the sort of reverse of
that.
This means the opposite of the B variable, and it doesn't read the A variable at all.
The first operation just here doesn't even read the inputs, it just writes 0 to the output.
And the final operation just writes 1, regardless of the input.
Anyway, let's have a look at the first operation, shall we?
So the first operation returns 0, no matter what we input.
But if we just remember back to what Boolean AND does, Boolean AND returns a 1, only if
both of the inputs A and B are 1, otherwise it returns a 0.
So what we might do is something a little bit interesting, we might say A AND NOT A.
We're performing a Boolean AND with the complement of the same variable.
And what's going to happen if we do that?
Well if the variable A is set to 0, then NOT A will be 1, and we'll end up with 0 AND 1.
The AND operation will return 0.
Likewise, if the A variable is 1 to begin with, then 1 AND its complement, 0, is also
0.
Regardless of what the value of the input is, if we perform A AND NOT A, we're going
to get 0 as the output, no matter what.
We've got a sequence of these little Boolean operations that we can perform, and we can
emulate the 0 gate.
Let's have a look at the final gate.
So the final gate writes 1, no matter what the inputs are.
Let's have a go at creating that using the Boolean operations.
What we can do is we can say A OR NOT A.
If we remember back to the OR gate, it returns 1 for all situations except for the input
0 0.
If we OR A with the complement of itself, it's either going to be 0 OR 1, or if A was
1, it's going to be 1 OR 0, but either way, we're going to get 1 as a result.
A OR NOT A returns 1 no matter what.
It emulates this final gate, this 1 gate.
And so you might have a bit of an inkling of where we're going just here.
Those 3 Boolean operations, believe it or not, can emulate all 16 of this complete set
of operations.
And it looks a little bit messy, but here is an example of how we might emulate each
of the 16 gates.
You don't need to implement all 16 of the original complete set of gates.
You can just implement the Boolean operations and OR NOT, and you know that you can generate
all 16 of the other gates.
Okay, but let's be a little bit serious here for a moment.
So our computer has 2 bits of RAM and a monitor that's either on or off.
That's not very useful.
Let's move up to a computer with 3 inputs, A, B and C.
We've got 8 rows now in our truth table, and we can define our little 3 input operation.
Once again, if we're talking about binary just here, the output values just here can
each be 0 or 1.
Just make up a gate while we go.
We've got alright, the output column might be for 0 0 0.
The output might be 0, for the input 0 0 1, the output might be 0, then it might output
a 1, and a 1, and a 1, and a 0, and a 0, and a 1, whatever.
We've got some gate just here.
And now using this truth table here, we could figure out what our little computer is going
to return given any input pattern.
Anyway, let's make another gate, shall we?
That first one was so much fun, 1 0 0 0, 1 1 1 0, there's another gate, good stuff.
Just by changing the pattern of bits in the output column, we get a new gate every time.
But you might be tempted to ask, how many of these 3 input gates are there?
Well, you can see from the output column that there's 8 bits, and if there's 8 different
bits, then 2 to the power 8 gives you 256.
Pretty crazy, we went from the 2 input set of operations, there's only 16 of them.
We added one more input, we've suddenly got 256.
Now it would seem that these 3 input gates are far too numerous for something so simple
as Boolean operations to emulate, but let's have a look at an interesting technique.
If we look at this gate just here, we could actually split it into 2 halves, the upper
half and the lower half.
If we look at the upper half, just by itself, and we take away the A variable, we just imagine
it doesn't exist for a moment.
If we look at this upper half, what we can see is that we've actually got one of the
original 16 gates, I mean this is a 2 input gate with 1 output, the inputs here happen
to be B and C, but it doesn't really matter to a Boolean operation, I mean it doesn't
care what the variables are called, and we could do the same with the lower half.
If we just ignore the A variable for a moment, what we've got here is a little 2 input single
output gate.
We've got these 2 halves, and we know that the Boolean operations can emulate both of
these halves separately.
So what we really want to do is say something like if the A variable is 0, in other words
if it's the upper half, then you want to use this first expression as the answer.
Then you want to say if the A variable is 1, then we want to use this second lower half
as the answer.
We need an if statement, but we're in Boolean algebra, we don't have an if statement.
What we've got, what we've got is Boolean and to the rescue.
What we do is this, for the upper half, we and that upper half with not A. We only want
that upper half to apply when the A variable is 0, in other words when not A is 1.
Likewise, for the lower half, we only want that half to apply when the A variable is
1.
So we can and that lower half with A. And what we end up with is 2 expressions.
We've got not A and the upper half, and we've got A and the lower half.
And if we all those 2 expressions together, wouldn't you know it, we've actually emulated
a 3 input gate using nothing but Boolean operations.
And what's interesting about that technique is that it wouldn't matter what the bit pattern
is in the 3 input gate.
It doesn't matter.
Any of the 256 different 3 input gates, we know for certain that we could split them
in halves, we could and the upper half with not A, the lower half with A, and we could
all those 2 together.
And we would have the 3 input gate.
This is really where we start to see just how powerful this algebra is, just how good
Mr. Boole's operations were.
I mean, you can start to read these as little numbers.
I mean, 0 1 0, that's binary for the number 2.
0 1 1 is binary for the number 3.
Don't read those as numbers and we've got gates here like this one just here.
This actually tells you if a number is prime or not.
It's an interesting gate.
This gate just here tells you if a number is divisible by 3.
There's all sorts of questions that these gates answer.
But no matter what the question is, any input that can be mapped to the range 0 to 7, we
can emulate it with Boolean operations.
Now of course, the interesting part is that we could actually take this further.
Let's say that we had 4 inputs.
Now if we've got 4 inputs, A, B, C and D, and a single output column, or even if we've
got more than one output column, it doesn't really matter.
You write as many outputs as you want.
If we've got 4 inputs, there's a total of 16 different rows in the truth table.
And if we want to ask a question like, well, how many different gates are there like that
that take 4 inputs and return a single output?
Well, the answer is 2 to the power of 16.
I mean 6, 5, 5, 3, 6, I think, 65,536 gates of this size.
And it might seem a little bit absurd to try and emulate that with Boolean algebra, but
we know that we can emulate all of the 3 input gates just by splitting the output column into
upper and lower halves.
And we could actually apply exactly the same logic here.
We could split the upper and lower halves.
We know that we can generate each of these halves and we can actually mask then with
the B variable this time, just as we did with the A variable previously.
And then we could mask again with the A variable.
And what we'd have is rather a long and very messy and complicated looking expression,
but we know that no matter what the output column is, doesn't matter how complicated
those bit patterns are, we know that we can emulate that 4 input gate using nothing but
Boolean operations.
And then we could move up to 5 inputs and 10 inputs and 1,000 inputs, a million inputs.
It wouldn't matter.
It doesn't matter how complicated the input is or how long the output column is.
We know for 100% certainty that we could emulate that using nothing but Boolean operations.
And that's quite profound, really.
That's absolutely extraordinary because it means that no matter what questions we ask,
no matter how complicated the questions are, or how many outputs we need, we know for 100%
certainty that we could, at least in theory, compute the result using and or and not.
Now, it might not seem that strange to a programmer, but if you think about it, that
is quite odd.
We've got no if statements, we've got no functions, no objects, I mean, there's no
branching or loops of any kind required.
We just read the input, perform exactly the same set of steps that exists.
Some Boolean algebra that will give us the right answer.
It means that Boolean algebra is universal.
It's complete.
There's not a single finite question that we couldn't answer using Boolean algebra,
not one.
That really is something.
I'd tell you what, things are about to get even crazier.
I mean, they're going to get crazier.
Let's have a look at another little operation way, way back when we were looking at the
original operations.
There's a gate just here, a funny little gate, a strange gate.
It returns the opposite of and.
It returns not and.
In other words, NAND for short.
It's like an and and then you're not the result.
And it's a strange gate because let's have a bit of a look at something.
If we go a NAND a, if we input the same variable for both parameters, then it's either going
to be zero, zero as the input or one, one as the input for NAND.
If we input zero, zero, it returns one.
And if we input one, one NAND returns zero.
If we NAND a variable with itself performs a Boolean not, but that's just to start my
friends, because have a look at this, NAND is not and, right?
It's not and it's NAND.
It's great.
If we NAND a and b together and then we NAND that result with itself, what we'll get is
the not of the not and we'll get Boolean and we can perform Boolean not and Boolean and
using a single weird little gate.
Here's an interesting fact.
If you take a truth table that's output from some Boolean expression, if you compliment
each of the inputs, so wherever the variables are clean, you put a not beside them like
a becomes not a and wherever there's a not, you get rid of it.
If you compliment each of the variables to this Boolean expression, then the truth table
of this function will actually be the reverse of the original truth table.
It will be the same thing flipped upside down.
If we look at the NAND gates output, we've got one, one, one, zero.
This is what the all gate returns, but it's upside down.
So, if you wanted to emulate Boolean or using nothing but NAND, all you would have to do
is compliment the two inputs a and b and we know already that we can compliment the inputs
using nothing but NAND.
If we go a, NAND a, NAND b, NAND b, wouldn't you know it?
We've got Boolean or.
Now that's a little bit strange.
The original Boolean set is universal.
You can compute literally anything at all, be it an operating system, a video game, a
weather forecaster, doesn't matter, anything at all.
But you can compute the original Boolean set of operations using nothing but NAND.
And what does that mean?
Well, it means that NAND itself is universal, can compute absolutely anything.
You don't need any loops, you don't need any objects, no if statements, all you need is
a long string of NAND.
This is often implemented in transistors, in CPUs and various other hardware themselves.
I mean, this is how computers work, this is how they work.
Absolutely astonishing stuff.
Shout out to NOR as well.
The NOR gate is also universal.
And expressions of course to produce the various Boolean operations, but NOR is also universal.
I should mention at some point that it's not even remotely practical to use NAND to write
something like an operating system.
For example, if you wanted to write a video game, the number of NANDs in your code, if
you write code like this, I mean, it would be absolutely astronomically large.
I mean, we're not even talking millions or billions here.
It would be like a Google Plex or like Graham's number or something, you know, these are completely
and utterly impractical.
But it is interesting to see that, at least in theory, no matter what the input bit patterns
are and no matter what output you need, you need nothing other than NAND to generate that
output.
Okay.
And so we can't talk about a lot of this stuff without mentioning the incredible Mr. Alan
Turing, really one of the most magnificent people ever to walk the earth.
Just an astonishing, astonishingly intelligent man.
Of course, his life was really cut quite short with, you know, terrible tragedy.
But his work and influence survives today in a very, very big way.
So Alan Turing really wrote the book on what it means to compute things.
And he envisaged these machines.
I think he called them automatons at the time, but they came to be known as Turing machines.
And what he said was if you had a tape and there was a head that was reading and writing
to the tape, zeros and ones, or using some alphabet, he pointed out that you could in
theory write code for this machine to solve any problem out there.
And so Turing complete means that any set of inputs can be used to produce any outputs.
Alan Turing, what a guy.
There's been movies made about him, books made about him.
Yeah, so we can never meet Mr. Alan Turing.
You know, we can never say thank you to him.
But for what it's worth, I just want to say here on a little YouTube video, Mr. Alan
Turing, thanks mate.
You were amazing.
