Welcome to my list of the top things that Python noobs do.
I'm also giving away four professional licenses to PyCharm, so comment, hashtag PyCharm if
you want a chance to win.
Some of these are actual issues for your code, but a lot of them don't actually matter
much.
Nevertheless, these things will tip people off to your inexperience, so whether you're
an actual noob looking to get better, or if you just want to catch any newbie habits
that you still hold on to, let's dive in.
Alright, newbie thing number one.
Professional string formatting, a.k.a. putting things together with the plus sign.
Instead use fstrings, they're more readable, easier to write, and less prone to errors.
Number two.
Manually closing a file.
I can't tell you how many beginner tutorials recommend doing something like this.
Open the file, write to it, and then call close.
If this right call throws an exception, the file will never be closed.
Instead use a with statement which will ensure the file is closed even if an exception is
thrown.
On a similar note, number three is using try finally instead of a context manager.
I usually see this one from more experienced developers but coming from a different language.
In Python, most resources that need to be closed have their own context manager.
Use it.
Number four.
Using a bear accept clause.
In Python, keyboard interrupts and system exits are propagated using exceptions.
That means, for example, a bear accept is going to catch something like the user hitting
control C. That's almost never what you actually want to do.
If you still want to be lazy but you don't want to trap your user in a box, then use
an exit capital exception.
Or if you want to do the right thing, then catch the actual exception that's going to
be thrown.
Number five.
Thinking the carrot means exponentiation.
Nope, it's bitwise XOR.
Okay, that one's a really newbie one but I gotta pad the list somehow, right?
Number six is any use of default mutable arguments.
Argument defaults are defined when the function is defined, not when it's run.
In this case, that means every call to the function is sharing the same list.
Meaning the second time we call it, it's not starting out as the empty list.
It's starting out as the list containing zero from the previous call.
Probably not what you wanted.
If you want a mutable default, first set it to none and then check if it's none inside
the function, setting the default there.
Number seven.
Never using comprehensions.
Or if they do use comprehensions, only list comprehensions.
A lot of code can be made both shorter and clearer by using comprehension.
You can have dictionary, list, set, and even generator comprehensions.
Learn how to use them when they're appropriate.
Number eight.
He's using comprehensions.
I get it.
You just learned about comprehensions and now it's time to flex.
But stop for a moment.
You don't need to turn every single loop into a comprehension.
Sometimes this actually makes things less readable.
I guess readability is really in the eye of the beholder, so you may not agree with this
particular example.
But I hope you can agree that not every loop should be turned into a comprehension.
Number nine.
Checking for a type with equals equals.
There are some rare cases where you do want to do this, but most of the time this is not
what you want.
The reason is inheritance.
A named tuple is a tuple, so this point class is a tuple.
But it's not literally the built-in tuple, it's a subclass.
In most cases, you should program in a way where you should be able to substitute a subclass
for its parent.
This is called the Liskov substitution principle and checking a type for equality is a violation
of it.
In most cases, what you probably wanted instead was an is instance check.
Number ten.
Using equals equals to check for none true and false.
Instead of equality, you should check for identity using the is comparison.
This is what equals equals was going to do anyway, so just cut out the middleman and
use is directly.
Eleven.
Using an if bool or if length check.
There's nothing particularly wrong about these, it's just that they're usually equivalent
to just a plain if x.
So using an if bool or if length check kind of just shows that you don't know the language
that well.
Number twelve.
Using the range length idiom.
A lot of beginners, especially those coming from other languages, think about loops in
terms of indices.
So they loop over the indices but only ever use them to grab out the elements.
Instead, just loop over the underlying container and get the elements directly.
It's much easier to read and less error prone.
If you did actually want to use the index though, you still shouldn't use range length,
use enumerate to get the index and the element at the same time.
Another reason I see people use this is to use I as kind of a synchronizing variable
to get corresponding elements from two different objects.
Of course, the better way to do that is using zip.
And if you still need the index, use enumerate zip.
Number thirteen.
Looping over the keys of a dictionary.
Don't you know, that's the default.
If you're modifying the dictionary as you're looping over it, then it would be okay to
make a copy of the keys.
Depending on the situation, this might add a little bit of clarity.
But even in this case, the dot keys is unnecessary.
Number fourteen.
Not knowing about the dictionary items method.
If you're looping over the keys of a dictionary and the first thing you do is grab the value
out for each key, then what you really want is to loop over the items of the dictionary,
which are key value pairs.
Number fifteen.
Not using tuple unpacking.
Do you have a tuple and want to get all of its elements out as separate variables?
Well you're in luck, that's exactly what tuple unpacking does.
Number sixteen.
Creating your own index counter variable.
If you're starting at zero and adding one to something at the end of every loop, then
once again what you really want is enumerate.
Number seventeen.
Using time dot time to time.
I think we gotta give the noobs a break on this one.
How are they supposed to know that time dot time is not for timing your code?
Time dot time is for telling you what time it currently is, and it's not as accurate
as using perf counter.
Subtracting two subsequent calls to perf counter gives you the most accurate way of measuring
how much time it took your code to run.
Number eighteen.
Litering your code with print statements instead of using the logging module.
You can set up logging easily in your main function with your own custom format.
You can also set the logging level or take it as a parameter so that you can filter out
messages that you're not interested in.
There doesn't that look a lot better?
Nineteen.
Using shell equals true on any function in the sub-process library.
Shell equals true is the source of a lot of security problems, and let's be honest,
the reason you probably did this in the first place is to avoid putting your arguments
into a list.
Number twenty.
Doing math or pretty much any kind of data analysis in Python.
Learn to use NumPy for array operations and learn to use pandas for more general data
analysis.
Twenty-one.
Using import star outside of an interactive session.
Import star usually litters your namespace with variables.
Instead just import the things you actually need.
Number twenty-two.
Depending on a specific directory structure for your project, a lot of beginner code
assumes that all of your source files are going to be in one flat source directory.
They probably unknowingly are depending on the fact that when you import something, Python
checks for it in your system path.
Python also adds the directory of the file being run to the path, so this usually works.
However, this can really get you into trouble if you have multiple scripts that aren't
in the same directory.
Take the time to learn how to package your code and install it into your current environment.
Number twenty-three.
The common misconception that Python is not compiled.
Have you ever seen those .pyc files next to your py files?
Or maybe they were in a pycache directory.
Those files are compiled Python code.
But of course, Python is also an interpreted language.
So what's going on?
Well, Python is compiled, but it's not compiled all the way down to machine code.
Instead it's compiled to bytecode.
That bytecode is then run by the interpreter.
Number twenty-four.
Not following pep eight.
Pep eight is nothing more than a style guide.
It doesn't actually affect your code at run time.
Nevertheless, your coworkers, contributors, and friends will nag at you incessantly until
you conform.
At this point, whether it actually looks better or makes any difference at all is kind of
irrelevant.
Experts do it this way to avoid the nagging.
And I saved the best for last number twenty-five.
Pretty much anything to do with Python two.
Python two hit its end of life years ago.
And the only reason you should still be using it is if you already have millions of lines
of Python two written and it would be too much work to migrate.
All new projects moving forward should be using Python three.
And with that comes to spelling some rumors leaking over from Python two.
Even though X is really big, this code will execute instantly.
Ranges are not created in memory.
Even checking if something is in a range will happen quickly.
Given the endpoints of the range, you don't need to construct all the numbers to tell
whether something is in that range.
You just check how it compares to the boundary elements.
And that's exactly what this in does.
There are also things like the change behavior of keys.
This no longer creates a copy of the keys of the dictionary.
Instead it produces a view.
That means if you delete a key, it'll no longer be in the view either.
There are so many of these Python two to three things that have changed.
It could probably be its own whole video.
So just always be sure to check the docs if you're not sure.
As always, thank you to my patrons and donors for supporting me.
If you like the video, don't forget to comment, subscribe and slap that like button an odd
number of times.
And if you especially like the video, please consider becoming one of my patrons on Patreon.
Thanks and see you next time.
