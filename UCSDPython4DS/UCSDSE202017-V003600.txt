In this lesson, we'll get started with the basics of working with ndarrays.
By the end of this video, you should be able to create both rank1 and rank2 ndarrays.
You should be able to access elements in ndarrays using basic indexing
and use built-in functions to create ndarrays with different shapes and initial values.
Just like our basic data structures from Python,
we'll get started working with ndarray by creating ndarrays and accessing their elements.
First, we'll start by creating a rank1 ndarray.
But before we can create the array, we'll need to import the numpy package.
Typically, we import it as np and then use np to access the functions from that package.
Now, let's create our first ndarray called anarray.
Rank1 ndarrays are simply a single-dimensional array or a vector.
Here, I'm giving it the values 3, 33, and 333.
In order to create this as an ndarray, I had to call the function in numpy called array,
which returns the ndarray object.
Let's look at the type of the ndarray object to see what class it is.
We find the result is a numpy. ndarray object, and that's exactly what we'd expect.
Next, let's see what the shape is of that object we just created by using the shape function.
We find that it has only one dimension, and in that dimension, we have three elements.
Next, let's access those elements using brackets, just like we might do with a list.
If I ask for an array at index 0, I should get back 3 and so on.
Here, I'm printing the elements 0, 1, and 2, and what I get back is exactly what I'd expect.
ndarrays are mutable, which means that we can switch their elements.
To do this, we can use an assignment.
Here, we're changing the contents of the first element to be 888, and then we're printing the result.
The first element is now 888.
Remember that these arrays are tight, and we'll see more of this later, but if I try to assign it to be a string,
like this,
I'm going to get an error.
You can't assign an integer to be a string, and for those of you with a background in strongly typed languages like C or C++ or Java,
this will be pretty familiar to you, but for those of you with a background primarily in Python,
you'll need to keep this in mind when you're working with ndarrays.
Let me fix that code real quickly.
Next, we'll create a rank 2 array.
A rank 2 array is a two-dimensional array, which is effectively a matrix.
Because we're creating a 2D array, notice how I have nested brackets.
The first row will have the elements 11, 12, and 13, and our second row will have 21, 22, and 23.
So let's see how this code works.
When I printed the array, I got back its elements.
I then tested its shape, and I got back that it's a 2x3 matrix with two rows and three columns.
Lastly, we accessed the elements of the array at position 00, 01, and 10, and got back the elements at those locations.
When specifying the two values, we're asking for the row, first, and then the column.
That's why 0, 1 corresponded to 12, and 1, 0 corresponds to 21.
One of the nicest features to NumPy is the variety of library functions available to create arrays of varying sizes with different prefilled values.
For example, in this segment of code, we're asking for a 2x2 array of 0s, using the function 0s, and that's what we'll get back.
Next, if I want an array to be prefilled with the same value, I can do that by using the function full, specifying the dimensions I want here.
Here, I'm asking for a 2x2 matrix, and then I have to specify the initial value by giving it 9.0.
What I should get back is a 2x2 array full of the value 9.0, and I do.
What if you want to create an n by n matrix where the diagonals are all 1, and all the other values are 0?
The i function can do this for you like this.
If you want it to be all 1s, you can use the 1s function.
Notice that I just created a 1 by 2 matrix.
This is different than a rank 1 matrix in that it's still rank 2, and I can see that by testing its shape.
I find that its shape is 1 by 2.
In order to index, I have to use two dimensions.
There are more functions for building arrays, but the last one I want to point you to is pretty useful.
You give yourself a random array pretty easily by calling the random function an np random.
By specifying its size, you get back a matrix filled with random values.
This is particularly useful for algorithms which need a random state in order to get kick-started.
By now, you should feel fairly comfortable creating any arrays and accessing the elements.
In the next video, we'll start looking at more advanced indexing features.
