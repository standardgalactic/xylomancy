In this video, we're going to learn how to use the tiny tape out GitHub template
to turn your design into the ASIC files we need to manufacture the chip.
If you don't already have a GitHub account, you'll need to create one.
Then navigate to one of the template repositories.
We have one for walkway designs and another one for Verilog or other HDLs.
I'll use the walkway template for now.
Click the use this template button.
This creates your own copy of the repository.
For open source projects, GitHub pays for the cloud compute,
which we use to make the ASIC files.
It's turned on by default, but we still need to allow the actions to create the results page.
We have the instructions here, but I'll show you how to do it now.
Go to your repository settings page, pages, then set build and deploy source to GitHub actions.
Now we're ready to adapt the template to our own projects by editing the info.yaml file.
For walkway projects, you need to change the project's walkway ID to match the number in
your walkway project. For HDL projects like Verilog or Amaranth,
use the source file section here. That's covered in a separate video called Working with an HDL.
Okay, so let's set the walkway ID to match our project.
I'll copy the last part of the project's URL and replace the zero with it.
Most simple designs will fit into one tile.
If you need more space, you can change the tile setting to get more space.
Bigger designs cost more. If you're not sure, just start with one and see what happens.
We also need to fill out the title, author and so on.
If you use Discord, then put your Discord name here and when you submit a design,
we'll add you to the tape out roll. Further down in the file,
there's a section to describe what the pins do.
And this is really useful for testing other people's designs, so please fill it in.
Then hit the commit button to save your changes.
There's one more file you have to edit, the info.md inside the docs directory.
This is important for a few reasons. First is that because everyone who orders a chip will also
get your design, it's nice if they can understand how to experiment with it.
The second reason is that by the time the chips come back,
you'll probably have forgotten how it works and you'll be glad you wrote down some instructions.
You can make the documentation better by adding pictures and links to extra documentation.
After filling in all the details, press the commit button.
This starts the GitHub actions running. You can access the results using the actions tab at the
top here. We have three actions, one for documentation that shows how your documentation
will look when it's printed and other will be used for automatic testing of walkway designs
if you've used the truth table option. And finally, we have the GDS action which is used
to build the ASIC files for manufacturing. If you want to find out more about that,
we have a separate video showing how it works. It's called How the GitHub Action Creates the ASIC
Files. Let's take a quick look at the docs action. This is useful to see how your documentation
will be formatted for the online and print datasheet. We get a PDF file we can download and
check to see if the formatting in the picture works. Let's take a look at the GDS action results.
We have this nice page with some warnings, utilisation statistics and standard cell usage.
If you don't understand a warning, join us on the Discord chat server and post in the GitHub
Actions channel. You can take a look at the cells in use by clicking these links, for example this
XNOR2 gate. Let's take a closer look at the 3D viewer. Right click to pan, left click to change
the perspective, scroll wheel to zoom in and out. On the right we can see which cells are used and
how many, above we have the control for layer visibility. We also have some shortcut keys on
the right. Pressing 1 hides all the filler cells, 2 hides the wiring and 3 isolates the currently
selected cell. I'd really appreciate it if you took a screenshot of your design and posted it on
social media with a description of what it does along with a tiny tape out hashtag. Back on the
front page of the repository you'll see we have these three green lights now for the docs, test
and GDS all passing. The GDS status needs to be green to submit your design. Sometimes the GDS
action will fail. A walkway design should almost always work, if not then it's probably our problem
and you should let us know in the walkway channel of the Discord chat server. If you're using an
HDL it's usually because of an error in your design or because the design is too large. To get
more details you can look at the logs here in the action results or download the zipped GDS logs
artifact and take a look inside. First check the synthesis log file under runs, walkway, logs,
synthesis, synthesis errors dot errors for design errors. If your design is too large then the failure
will normally be to do with the placement or routing part of the flow. You can try to reduce
your design size or upgrade to a larger design by increasing the number of tiles in your info.yaml
config. When you're ready to submit go to tinytapeout.com and then scroll down to the submission
section. Click the button to go to our submission app. Sign in with your github account then copy
and paste the URL of your github repository into the form and press submit. If you have a coupon
you can apply it here otherwise you'll need to pay to continue. At this point you've created your
project but it's not yet part of the tape out you have to submit a revision first. Once that's
happened that version of your design is committed to the shuttle. If you want to make any changes you
need to come back here and submit a new revision. So that's it. Happy hacking and I look forward to
seeing what you make on your ASIC.
