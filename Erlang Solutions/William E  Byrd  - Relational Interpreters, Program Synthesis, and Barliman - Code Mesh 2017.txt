Thank you. This always happens to me at CodeMesh. I have an idea for a talk, and then after
seeing a keynote or having a conversation with someone, I'm like, throw that out. Actually,
Boodle last night tried to convince me to give a talk on StarCraft instead, which I'm
sorely tempted to do, but maybe next year. Yes. But I saw Guy Steele's keynote last night,
which I loved, and I have to say that I love Scheme. I agree with Alan Kay that Lisp is
the most important programming language ever created, and for my money Scheme is the most
important Lisp. So I think Scheme is one of the great joys of my life. I love programming
and Scheme, and when I went to Indiana University to get my PhD, I went there specifically to
work with Dan Friedman and get my PhD in Scheme. On the first day of grad school, I walk up
to Dan, and I said, I'm so excited to be here at Indiana University so that you could teach
me Scheme, and he says, I don't do Scheme anymore. I do logic programming. It's like
something you could have told me two weeks ago, and I would have gone Northeastern, but
I didn't. Anyway, but Dan should have told me something else instead. He shouldn't have
said, I don't do Scheme anymore. I do logic programming. He should have said something
else, and so this talk is kind of about what Dan really should have told me, and sort of
trying to explain what we've been doing the last 13 plus years. I've been doing it for
the last 13 years. Dan's been doing it longer than that. What is it we're trying to do,
and what is this weird mini-canon language we're working on, and why is it not prologue,
and how does that fit into Guy's keynote, and all these other things. The original talk
was relational interpreters, program census, and Barlaman strange, beautiful, and possibly
useful. Maybe it'll be useful someday, but I don't really care about useful so much,
as you might see. The language we're working on is called mini-canon, and I got to get
my memes in, and my ponies for Boodle, but someone made this up. Fresh is one of the
key operators. There are only three operators in the core language, but here's my second
meme, and this is something I've heard a lot of. Mini-canon is the worst logic programming
language I've ever heard of, but you have heard of it, right? People often say, well,
this is terrible. Prologue has all these extra features, or prologue implementations
are faster, so why use mini-canon? The point is, in my mind, isn't to build a logic language.
That's not what I'm trying to do, at least. I don't care about logic programming. I don't
care about mini-canon. That's not what I'm trying to do.
Let me tell you a story, and I'll do my first live coding. I'm going to show you the first
program I ever wrote. I was nine years old, and my father bought this beautiful computer.
Anyone know what this is? No one knows what that computer is, really. TRS-80-Coco, Trash-80,
color computer, okay? Believe it or not, but one point in the time, this was the most popular
computer in the world, and Radio Shack actually had summer camps. My first class in programming
was taught by Radio Shack, the summer school in programming in Logo.
So the TRS-80-Coco, that came out in 1980, hence the name, and let's see if I can show
you the program. We got this new computer, and normally I used to think that I'd seen
Wargames or whatever, and I knew how to program, but Wargames I don't think was out yet, so
I must have seen Star Wars, but I thought I knew how to program. So we get this computer,
and it's like, all right, I'm going to show off to my brother, my little brother, because
I'd watched all these movies. So here is exactly the program that I wrote. Oh, I got
a click on it, okay. Okay? That, as I recall, is the exact program I wrote 37 years ago,
and that's the exact result I got. And I basically flipped the table, and I said, this is not
for me, and I didn't touch the computer or programming for several years after. And in
effect, I haven't really changed. Okay, this is really my philosophy of what programming
should be like. And so the fact that I have become an expert and have a Ph.D. in programming
to me is offensive. It's not something joyful. It's like the same thing where writing books
with Dan, or writing latex papers, or whatever. The fact that I've become a master in mangling
latex files and post-processing latex files with Perl scripts is not something I'm proud
of. It's something I'm ashamed of. So the fact that I still, to this day, have to program
at a much higher level, in a sense. I can't write that sort of program really offends
me. So, let's see. So really, I think you can sum up my attitude with this epigram in
programming. And if you haven't read Alan Perlis' epigrams in programming, you should
read those. They're fantastic. The epigram 93. When someone says, I want a programming
language in which I need only say what I wish done, give him a lollipop. Okay, so I understood
Dan his philosophy, or why he said that, but if someone wants to just type something in
sort of naively, I think we should give him or her a lollipop, but we should also give
them what they ask for. And so if you think of it that way, what I really want to do is
lollipop-driven development. So Chris, or sorry, Rich Hickey has this idea of hammock-driven
development, which is fine, but I prefer lollipop-driven development. I want to just be able to say
what should happen and just have it happen.
I think it's milkshake-driven.
Milkshake-driven development, yes. And going back to Guy's keynote last night, so he showed
inference rules, typing judgments, context-free grammars, BNF, all these sorts of things.
When I went to Indiana, really what Dan was trying to do at the time, which took a while
for me to understand, was he wanted a way to write these sorts of rules down, make them
executable, and be able to explore the resulting system. That's really what he was interested
in. But anyway, we want some way to explore this. So going back to Guy's naming of the
sort of informal language use, computer science meta notation, basically we want to have an
executable relational version of computer science meta notation. And just one other source
of inspiration for the Commodore Amiga, which was my third computer, I think. There was
a fantastic program for it called Doug's Math Aquarium. I love this program. You can see
it. This was on the September 87 issue of Info. You can see the lower left image again.
So you can do Manobrot, plus you can do wireframe. There are a whole bunch of ways you could visualize
mathematics. And the way it would work is like, hey, I want to zoom in on the Manobrot
set. And the computer was so slow, and the software was so slow, like you would hit return
and you would see it draw each pixel, right? And then you would go away, and like eight
hours later, you would see a little bit of the Manobrot set. But it was still amazing.
It was still incredibly inspiring to me. And so what I want is a computer science meta
notation aquarium, just like the Math Aquarium. And even if it's slow, and even it's awkward
to use, just being able to explore and play around with it to me would be far, far better
than just writing interpreters the standard way. So that's really what we're trying to
do, I'd say. So I'm going to not teach you the Minikanron language, and I'm not going
to teach you how it's implemented. So we actually have lots of resources and talks and things
like that about this, about Minikanron and how to use it and how to write Minikanron
programs. And to really do it right would take far more time than I have, but I just
want to show you maybe a couple examples of what the rules look like. So this is a type
inferencer for the simply typed lambda calculus on the left, how we would write it with the
computer science meta notation. Was that right, CSM? Computer science meta notation,
that's how we might write it on the left. And then on the right is how you might write
it in Minikanron using a macro called matchee, it's a little higher level syntax than what
we normally use, but you can see it's roughly the same. It's still kind of awkward, it's
not the greatest notation, but you can see it's not 100 times longer or 10 times longer
or whatever. Here we have something similar for commentatory logic, so we have another
meta notation and on the right is the Minikanron and that's roughly the same length. Here
is the program that we're going to play with today in Explorer. This is an environment
passing interpreter for a subset of scheme or a subset of racket. And if you know the
rules, this is procedure application, this is abstraction or lambda, that's variable
reference. Here we have lists, there we've got quote, we've actually added some other
forms to various versions of the interpreter. I'll show you this version first. And then
here on the right is sort of the Minikanron code that corresponds to it. And then we
also have to have some extra code for doing things like environment lookup and some side
conditions where in the math when you write it down, you don't have to worry about it
as much. But anyway, the point is we can write something that doesn't really look like the
notation, so it would be very nice to have something much closer to the notation. But
it's roughly the same length or maybe twice as long or something like that. So we're going
to assume that we've already implemented an environment passing interpreter in Minikanron
and we've already implemented Minikanron. And Minikanron is a language that is sort of
a combination of logic programming and constraint programming. It's basically a constraint logic
programming language. So it's a mixture of constraints and logic programming. And I heard
Peter Van Roy, so that question last night to Guy, both logic programming and constraint
programming came up. So basically you can think of it as a language that's been optimized
to write rules like this, not necessarily in terms of the syntax, like how you write
them down, but more in terms of if you want to explore the resulting rules. The language
is optimized for that, and the implementation is optimized for that. Okay. So now is the
most fun part. This is always the part that scares me, loading a file. All right. So we
haven't really solved the loading the file part. Let me make sure I can do this. Oh,
okay, great. Let me see if I can do this one. Okay. So I'm going to go ahead and write
it down. Good. All right. Okay. Can people see that? Is that big enough? Yeah, great.
Okay. So show of hands, please. Who here can read scheme, racket, closure, or some other
Lisp? At least a little bit. Emax Lisp, absolutely. Okay. So most people, maybe not 100%. I think
in the interest of time, I'm going to ask the people who aren't as familiar as parentheses
to please try to bear with me and try to think at the high level of what we're trying to
do. Okay. Just from the standpoint of time, I can't also teach you all of scheme, unfortunately.
Although I gave a talk at papers we love recently where I actually do teach enough scheme to
do all the things we do, but I had an hour and a half then. So if you look on YouTube,
you can find papers we love to talk on called the most beautiful program ever written, where
I talk about some of these topics. Okay. So what I've loaded is an interpreter for a subset
of scheme. And a language like scheme, sort of like a language like Python, maybe, we
have something called a vowel. So a vowel is an evaluator. It can evaluate an expression,
which we quote. So I could do plus three, five. And this expression, a scheme uses a prefix
notation. We're adding three plus five. That quote means that we're delaying evaluation.
We're turning the plus three, five. We're treating that as a list of data instead of
as a procedure call. So you can see the difference. If I put the quote mark, we get back the list.
If I don't put the quote mark, it evaluates immediately. We get back eight. Okay. So a
vowel sort of cancels out the quote mark. If you want to think of it that way. We're
taking this list and we're going to evaluate it. So we're going to look at the parts of
lists and do some evaluation procedure. Okay. So that's a vowel in scheme. What we're going
to do is use something called a vowel. So a vowel is the relational version of the vowel
function. So the vowel function takes one argument, which is going to be a scheme expression
as quoted, evaluates that and gives us back the value. The vowel, however, is going to
take two arguments instead of one. It's going to take an expression as the first argument
and it's going to take a value as the second argument. So let's try using a vowel.
How about... Okay. Great. So it's working. All right. How about I do something simple
like... I think this will work. Oh, yeah. Okay. So for the people who don't know scheme,
lisp stands for list processing. So the list is a very common data structure we use. So
list 3, 4 creates a list containing 3 and 4. What I just did with this run expression
is I called a vowel, which is my relational evaluator. And the quoted expression is list
3, 4, just like I typed directly in the scheme. So that's the expression. The first part of
the first argument to a vowel is the expression I want to evaluate. Q is a query variable.
You can say I introduce it right after the run 1 in parentheses. Q is my query variable.
And I'm putting Q in the place of the value. I'm saying that whatever a list 3, 4 evaluates
to, bind that to the variable Q. Okay. So Q is a logic variable, a query variable, whatever
you want to call it. Unification variable. Run 1, the 1 means that I want one answer
back. Sometimes we can get more than one answer back. Sometimes we can get infinitely many
answers back. And in fact, we also might want to prove or show that there are only a finite
number of answers, that there are only five answers that exist. Run is our interface operator
between scheme and mini-canron. So mini-canron is embedded in a host language, most implementations.
This implementation of mini-canron is embedded in scheme. I'm running it in Shea scheme.
All right. So that's the basic interface. The underlying language that we wrote a valo
in is quite simple. It basically extends scheme with three operators, core operators.
And then we've got a couple extensions for helping write interpreters and typing. There's
things like that. Okay. So that's a valo. And you can see that we can write things like
list 3, 4. Now, what's interesting is that a valo is written as a relation. And so Guy
talked about this a little bit yesterday. But the interesting thing about the rules,
and in fact, I can show you the rules for interpreter, the interesting thing about these
sorts of rules is that they don't really have a direction. Okay. So here is a paper
that was an ICFP in Oxford this year. And in this paper, you can see these rules written
as inference rules. And the code on the right, which is mini-canron. This is kind of lower
level mini-canron, so it's a little longer. But the important thing is to realize that
there's this bar here, right, that Guy was talking about. And normally the way we read
it is we have some antecedents and consequences. So we have some things that have to hold.
And if these three things hold, then we can infer the thing on the bottom. And we also
sort of read it as, okay, so this turn style operator, we can read it as like an interpret
or evaluate. So in a certain environment row, this particular expression, which is a procedure
application, evaluates to the value of v3. And the rules up top tell you what v3 is.
So if you're writing an interpreter in a standard way, you would read these rules as, okay,
I'm going from left to right. Here's my expression, here's my value. Notice there's an arrow
instead of an equal sign. So that's how you would often think about it. But there's no
reason that we have to go in any sort of direction. We could actually consider this more like
an algebra problem where we have variables that we want to place in the different parts.
Maybe the row p. We replace that with some variable x. I don't know what x is. Or the
expression or the value. So if we can put variables in and then have a system that can
do a mixture of maybe things like search and constraint solving, then we can try putting
variables in to get more flexibility. So that's exactly what we've done. So what that means
is, if I go back to this valo call, I don't have to just put in an expression that's known
in the first position and then put an unknown in the value position. I can do the opposite.
So what I can do is I say, okay, well, I know that the list is supposed to be 3, 4, right?
I can grab this list. The extra prems, by the way, and that answer up top have to do
with, first of all, the fact that we can get more than one answer back and also that we
can get some side conditions to help interpret the answer. Anyway, I'm going to replace that
query variable with quote 3, 4. So that's the expected value. And I'm going to replace
the expression with my query variable q. So now what I'm asking is give me an expression
in scheme that evaluates the list 3, 4. So what would be one such expression, do you think?
List 3, 4. Okay. So list 3, 4 is one. Quote 3, 4 is another. So I can ask for, you know,
let me ask for two answers. Okay. So list 3, 4 was the second one I got. And I can ask
for three answers. And we can see list 3, quote 4. So it turns out that if you quote
3 or 4, it's the same as just writing 3 or 4. And so you can see that we have a number
of answers, right? And so some of those answers involve things like lambda and procedure application.
So as I say, hey, as function call can give you the list 3, 4. All right. Now I'll go
back to lollipop land. So Matt might, who's giving keynote tonight and whose lab I work
in and who I've worked with for many years, he wrote a blog post for Valentine's Day a
couple years ago called 99 Ways to Say I Love You and Racket. So the idea of this was to
teach students and beginning racket programmers a little bit of racket and a little bit of
how to manipulate lists, because racket's a lisp and lisp is list processing. So, you
know, the idea is to show 99 different expressions and they're, you know, various complicated
ones and so forth that would evaluate to the list I love you. And PD Aldous, who's one
of the grad students said, hey, do you think you could use mini-canon to graduate, to generate
such programs? So let's try doing that. We're going to generate 99 programs that evaluate
to I love you. So can you help me out with the query? What would that look like? Run
99? Sure. Okay. What else is going to change? Sure. Okay. How about I love you? All right.
So here are 99 programs that evaluate to I love you. So, I don't know. Let me, what's
a fun one? How about, yeah, let's just start down here.
Let's grab that out. And I'm running it in scheme now. And you can see that evaluates
I love you. So we've got list, quote, I, quote, love. And then the last sub-expression is
a procedure call to a function which is variadic. It takes any number of arguments. The underscore
dot zero represents a symbol representing, that's a symbol representing a variable. The
name doesn't matter. That's why I picked underscore dot zero. That's our convention saying, doesn't
matter. You could pick foo if you wanted there. And this quote underscore one thing.
So this is a quoted symbol also. If you look at the side conditions, you'll see these things.
So that could be any quoted symbol and this will hold. There may be some other side conditions
like the symbol can't be called quote. Under score zero can't be called quote because you
don't want a shadow quote, that kind of thing. Okay. So that's a simple example. And after
we started playing around with this a little bit, Dan Friedman and I gave a talk at Closure
Conge and we showed this relational interpreter or a variant of it. And Stu Holloway at the
end said, well, you know, you should be able to generate quines using this. Anyone know
what a quine is? What's a quine? A program that outputs itself. That's right. Okay. In
fact, if we go back to history, let's see if we can go back and, you know, I love the
fact the guy went through so many papers, old papers. Well, this is a paper I really
like by John McCarthy who is the creator of Lisp called a micromanual for Lisp, not the
whole truth. And in this he gives rules for the Lisp language. So you can see like what
equal means, what cons means and so forth. Notice by the way he uses an equal sign. Right.
Not an arrow. But then he has this neat little problem. Difficult mathematical type exercise.
Finalist E such that value of E equals E. So value is the name of his evaluator function,
his eval. So basically, what he's calling value is what we would call eval or evalo.
And so he's trying to find an expression E such that the value of E is E. So that is
also trying to find a quine. So he was trying to find a quine or get us to find a quine in
I think 1978. So let's try to do that. So given what you know, how would we find a quine?
How would we change our query so we could generate a quine? QQ, a value of QQ, that's
right. Now of course there's nothing special about the name Q. So why don't we, out of
respect for John McCarthy, call it E instead. Valo EE. And let's do a run one. So we're
trying to find an expression E that evaluates to itself. This is pretty close to what John
McCarthy wrote. We're calling it a valo instead of value. But this is exactly what you would
want to be able to type into a system. So let's see what Minikennan gives us back. Well, the
first thing it says is that underscore zero is a number, which is true. Okay, so in scheme
five is a quine. So five evaluates to itself. That's true. Okay, so that's what Minikennan
is telling us. Let's ask for a second one. It says hash t. Hash t is true in scheme. All
right, so those are all quines. Hash f is a quine. How about four? Now it's thinking for
a minute. Okay, now we've got something a little more interesting. I'm going to grab
that expression and type it in. And sure enough, that's a quine. So that's a self-evaluating
expression. In fact, if you look at the quines page, you will see this quine. This is sort
of the canonical quine. And we can generate all sorts of quines. We can generate twin quines
and triple quines and that kind of thing. But what I love about this, and in some sense
this is probably my favorite Minikennan query using a relational interpreter, but I love
it as the query is so simple. This is actually the shortest query you can write in terms of
a number of distinct identifiers. This is like the shortest thing you can write, and it
generates quines and it actually works. And I personally was shocked that like, oh yeah,
this actually, you can actually do something with this. You type it in. I figured it would
take a million years or something. Okay, so at that point, a grad student at Utah named
Michael Ballantyne said, well, that's kind of fun, but what if you, now you have this
interpreter, what if you were to take a scheme program and fill in the scheme program in the
first expression, but leave some of the arguments to that program, to that function, you know,
make those variables. Could you get interesting behavior? And so he suggested append. So let's
try doing that. So append in scheme takes two lists, like ABC and DE, and concatenates the
lists to get ABC, DE in this case. So what we're going to do is we're going to write append.
And the way I'll write append is using something called let rec. Let's me define a recursive
relation or a function.
Okay, so that's append. Did I get it right? I think I did. And now we're going to call append.
I'll use the same arguments as before, ABC to DE. Okay, so I just ran it forward. So what did I do? I
took the scheme definition of append. This is not many can run code. This is not logic
programming code or constraint logic programming code. This is just scheme code. I ran it inside
of a valo as the first argument. This is the expression argument. And I said we have an
unknown value, right? So my query variable q represents the unknown value. So what can we do?
Okay. So now what we can do is we can say we know ABC, DE is the output. And where else could I put a
variable? Where could I put this q variable? Well, how about I put it in a position of one of the
arguments to append? How about I put it right here? I have to put a comma there because this whole
thing is backwarded if you know scheme. All right, so what do you think I'm going to get back in the
place of the q variable? ABC, right? So let's see if that works.
Yeah, quote ABC. Is there a second answer? What if I do a run two? Should there be a second answer or should
it say no? No more answers. List ABC. All right. Well, let's see if we get something like that. Ah, we
get, it's not list ABC, but we get a procedure application. And if I evaluate that in scheme, I get
back ABC. So what happens is we get an expression that evaluates to ABC. If I put a quote, I get back ABC
itself. Okay. So that's a little subtle if you're not a schemer, but the point is we're making a distinction
between expressions and values. So if I put a quote in front of the comma q, that's going to say, well, I
want the value, the list that's going to concatenate to give me ABC, DE. If I don't put the quote, that
means this could be an arbitrary expression in my subset of scheme that I'm holding, handling. All right. Where
else can I put q? Inside the list, like here. Sure. Yep. And in fact, I could have two variables. I could do
like x and y. All right. And I can do things like, in fact, I can ask for all the answers. So if you're
familiar with logic programming and prologue or mini-canon or something like that, you've seen this before, things
like a pen, that's a standard answer, or a standard program, but we didn't write a pen in, in a mini-canon or
prologue. We wrote a pen in scheme. We get the relationality through the relational interpreter. All right. What
else can we do? Where else can we put variable? How about if we put a variable inside the code? What if I put a
variable where the s is? Okay. That used to be the symbol s. What should I get back? I get back the s, right? So I
could also replace it here, like the car of L. Oh, I got two, I was doing a run two. Yeah. So I got car of L and
another expression, which is the same as car of L, equivalent to it. All right. Now, I could show you much, much
more. If you're interested in that sort of thing, I recommend you look at our, our, our paper in ICFP, 2017. But I
just wanted to show you what happens if you sort of put an interface on this, and you also speed up the naive
version by about nine orders of magnitude, because that's, that's what we've done. Michael Valentine and Greg
Rosenblatt have been speeding up the system. So Greg gave us eight orders of magnitude in eight months or
something. So now what we're going to do is we're going to do some program synthesis. So this, what's happening
underneath the hood is we're just generating calls to our valo. We're doing example-based program synthesis. So here I
have a call to append. I've got a fragment of the append definition, the comma a, comma b, comma c. Those are logic
variables representing holes in our program. And you can see at the bottom that Barleman's trying to figure out what we
have. I can do this in various ways, but one way I might want to do it to try to keep the system from over-specializing
is to use these g1, g2 things, which sort of represent universally quantified variables, if you want to think of that way, or
sort of like Jensen's or Scholem variables. So I don't quite have enough structure, so let me try one more example.
Let that think for a minute. Okay. Now it's figured out the recursion. And it's a little hard to read it, so I'm going to just
put in variable names, concrete variable names. And now you can see, you can read a little more. And if you know scheme, this is the
correct definition of append. So what's happened? We've taken minicanron, we've implemented the semantics written in
something similar to the CMS, computer science meta, or is it CMN, whatever it's called, the computer science meta notation
or whatever. Something like that. And through some cleverness on the back end, which we're hoping to generalize, so it's not just
for our interpreter, but we'll work with a wider range of semantics and type systems and things like that, you would just type in.
We can also do this for grammars, regular expressions, and so forth. We're able to get to the point where we can just type in
input-output examples, and the system is able to do recursive, higher-order synthesis for our subset of scheme. We can also
write type inferences in this way, so I'm hoping we can combine those. We'd write type inferences in the same way. We'd write the
operational semantics for the evaluator. And we can also write grammars. There's also a grammar written in exactly the same style
underneath this. So we can do grammars, we can generate expressions in exactly the same way. So I'm hoping as we
improve this technology that we'll get closer and closer, and I don't think we'll ever get there perfectly, but we'll get closer
and closer to being able to be naive and just take a paper or some operational semantics or typing judgments or whatever, just type it
in, hopefully with a nicer syntax, and then be able to start exploring this world and asking queries that, you know, maybe other
people haven't thought of before, or just, you know, being surprised. That's the best part for me. That's why I like Doug's
math aquarium. It would surprise you, and that's why I like playing around with many canneries. There's things like
Quines that surprise me. There are all sorts of programs that we're generating that surprise me. I didn't think it would be either
possible, or I had a different idea of which program would meet a certain specification, and many canneries said, hey, this
program meets it also, often sort of trolling me in the process. So anyway, this is lollipop-driven development, if you will,
where you just type down the semantics, sort of like you'd read in the paper, write down examples, maybe write down types and things
like that, get the system to fill in the unknowns for you in an exploratory way. So that's basically what Dan should have told
me. He should have said, well, you know, eight years from now, Guy Steele will give a keynote at CodeMesh, and at that point,
you know, we want to be able to type in those rules and just have it do things like infer the program. So that's the idea. If you're
interested in this, look at an ICFP 2017 paper, go to minicanron.org, look at the paper on microcanron, which shows an
implementation of a simple version, and look for the second edition of the Reason Schemer, which is about to come out. Thank you.
Yeah, we actually have two minutes left. I think this is the first for you, Will, so we can take a question if you want.
So the second test didn't work. Could you just go back and do that again, but fill it in with kind of the readable symbols so you can see why?
So you want this one?
Yeah, so what?
Well, the second one did work, in a sense. It depends what you mean by work. So minicanron or Barleman's idea is, prove me wrong, right? So, you know, this
absolutely matches that specification, but you're right that it's not what we had in mind, and this is part of the problem, right? So even if you can imagine Barleman being
500 orders of magnitude faster, and in some sense it solves program synthesis by example, in another sense, you still have the problem of writing down a
specification that is complete enough and correct enough that you're going to get the right output, even if we're much, much faster, right? So this shows that synthesis really has at least two
problems. One is the speed problem of dealing with this exponential space and dealing with, you know, synthesizing programs that could go in infant loops, but there's also the specification problem.
So how did you know what to type in the box labeled test three?
How do you know what to type in there? Well, so that's a good question. There are different ways to give a specification. So you could write types, right? We don't currently support that, but you could write types, you could write
examples, you could write properties, high-level properties, right? The other thing you could do, which I didn't show you, is that this is an IDE. So you can edit the code. So you can be writing some of the code and writing some of the tests
and writing some of the types, and it's going to fill in the rest for you. So you could also use it as sort of like an IDE. But at some point, if you don't know what the program should do and you don't know any of the code, it's not going to
figure that out for you. So you're going to have to do a little work. You know, even with my example, my stupid box example, I still had to figure out that I wanted a box that was two inches by two inches, right? So yes, thank you.
So basically, this is automated TDD, isn't it?
That's part of it. But the reason I gave that intro is the problem is every time I give a talk, and I've given many variants of this talk, every single time I give a talk, someone comes away thinking, oh, well, so your research is on program
synthesis, or your research is on test-driven development, or your research is on logic programming, or your research is like, no, no, that's not it. The research is on lollipops. The research is on lollipops and being able to do things like just write down the rules and explore it.
So that's really what the dream is. Program synthesis falls out of this. Now, if we can do, if we make the system much faster, and we can get a useful program synthesis tool, or a useful test-driven development tool, or a useful IDE, great. But that's only a very small part of really the overall goal.
Thank you, Will.
Thank you.
