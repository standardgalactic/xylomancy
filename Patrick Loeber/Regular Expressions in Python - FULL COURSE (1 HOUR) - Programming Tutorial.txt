Hey guys, welcome to a new Python tutorial. Today I want to show you how we can work with
regular expressions in Python. Regular expressions or short RE or REGX is a powerful method that is
used to search for matching text patterns. For example, typical patterns that can be extracted
from large text files with regular expressions are emails or domain names. So at the end of this
tutorial, you will be able to understand what this regular expression here does. And there's a lot
to cover in this tutorial. Don't be overwhelmed. I promise that once you have understood the concepts,
it's not so hard anymore, and it can simplify and speed up your search tasks a lot. So if you
watch the whole tutorial and you will be able to understand any pattern that you want to look up.
So now let me quickly show you what we will cover in this video. So of course we will see
how we work with the RE module in Python. Then I will show you what methods we have to search for
matches, what we can do with a match object. Then we will talk about matter characters and
more special sequences that can be used in patterns. Then we talk about sets, quantifiers,
conditions, and then grouping, then modifications, so how we can modify strings with REs.
And at the end, I show you some different compilation flags. So let's start. So as I already said,
Python has a built in module that is called RE, which we can use to work with regular expressions.
So we have to import RE. And then we can start working with regular expressions. So let me show
you a very simple example first. So let's say here I have some test strings already. So let me copy
and paste this here. So this is our test strings. And now let's say for example, we want to search
for the pattern ABC. So we see we have this three times here. And now let's say we want to look for
ABC, then we create a pattern. So let's say pattern equals and then we use the RE module
and the compile method. And then here we say R and then the string ABC. So I will explain what
R means in a second. And then we can use this pattern to find matches. So we say matches equals
pattern dot find iter. And then we want to find the matches from the test string.
And now this will be a object that we can iterate over. So we can say for match in
matches. And then we simply print the match. So now let's run this. And then we see we have two
matches. So this is a match object. And we can see more details. So for example, we can see the
span. So this is the start and the end position. So this is three, four and five. And this is our
match ABC and a second match at position 12. So this is position or index 12 in our string.
So we see that we have two matches here. And what we also see here that our regular expression is
case sensitive. So it doesn't include the uppercase ABC into our matches.
So this is one thing that we must know. So one thing that I want to mention here is that instead
of compiling our pattern explicitly, we can use the find iter method directly on the RE module.
So we could also just write that our matches equals RE dot find iter. And then we want to look
for our, let's say string, our ABC, and then from our test string. So you can use it directly on
the RE module. And then we will, if we run this, we will see that we get the same results. So there
is not much of a difference here. But I prefer to do it this way to explicitly compile them
pattern and bind it to this object here. So this improves readability. And it's also a little
bit more flexible. So I prefer it this way, but you should know that you can use both ways.
And now let's talk about the why I'm using this R here briefly. So this means that this is a raw
string. So for example, if I have a string a, and this includes some special characters like a
tap, so a backslash t that this is a tap or a backslash n for new line. And then I have a string.
So now if I print this, then you will see that we have the tap here at the beginning. So it didn't
print the backslash t. And in a pattern, I usually want to look for the actual
characters in my pattern. So then I can write an R here. And then this means that this,
this is a raw string. So Python will print this the same way as it is specified here.
And yeah, so I recommend to always use a raw string for your patterns, you can use just a
normal string. But remember that you should use a raw string. And yeah, so this is a short example
how a regular expression is used. So typically, we come up with our pattern, then we compile it.
And then we use the pattern to find our matches. And I will show you the different methods that
we have on the matches now. So now let's go over the methods to search for matches. So we already
have seen the find iter method. And this will give us a match object. And I will show you what we
can do with a match object in a second. So now let's talk about the other methods. So there are
three other methods. So we can use the dot match method. So here dot match, then we have
search. And then we also have find all. So now let's look about the find all method first. So
if we can say pattern dot find all, then we will simply get the string. So if you see here,
I'm printing the whole match object. So now if I want just a string, then I can use find all. And
now if I run this, then it will just print the two strings that I'm looking for. So this is the
find all method. Now the match method determines if the expression matches at the beginning of the
string. So this will only return one match. So here I can say match equals pattern, and then match.
And now if I print the match, so let's print the match and run this, then we will see this is none
because the match looks only for patterns at the beginning of our string. So ABC is not at the
beginning. So now if I use 123 as a pattern, then we will see this is at the beginning.
So this will return one match. And we also have the pattern here again. But again,
the match does only return the first match if it is at the beginning of the string.
And now we also have the search method. So the search method scans through the string and looks
for any location where the RE matches. So if you use for example, let's look for the match ABC again,
then we will see this will return none because ABC has to be at the beginning.
And now if we use this search method, then it will find the match object again, and
it will simply return the first match. So we have search match find all and find iter. And this is
my preferred method. So from now on, I will only use this one. And then we also have some
functions that can be used to modify an object. So we also have split and sub.
So I will come to them later. So now let's continue using the find iter method. And let's
have a look at what we can do with the match object. So again, let's say our matches equals
pattern, and then find iter. And then let's iterate over this. So for match in matches,
and then we want to print the match. Then again, we see we have the whole match object here.
And we can use four different methods on this. So we can use the group method.
We can use the start and the end method. And we can get the span. So
let's start with the span. So this will give me the start and the stop index where this pattern
is located. So let's print the match dot span. So then we simply get this as a tuple here. So
we get three and six. So this is a tuple. And we can also get the
just the start and the end right away by saying print match dot start and print match dot end.
Oh, sorry, here is a dot match dot start. So then we get the start in the stop index.
And now let's talk about the group method. So now if we call match dot group,
then we will get or print the actual string of the match. And we can also give this group method
arguments to find the group zero or one and or two. And we will talk about this grouping later.
But for now on, if you just want the string then from the match, then just call match dot group
or group zero. So this is the same. And yeah, so these are the four different methods that we can
use on a match object. And now let's come to the matter characters. So in regular expressions,
there are these method characters that have a special meaning. So these are all the method
characters we must know. And you don't have to know them by heart. So I recommend that you
keep a cheat sheet somewhere with all this stuff. And I will also provide a cheat sheet on my website.
So you can check that out on Python minus engineer dot com. And this is all you need to know.
So now let's talk about these method characters one by one. And then I will show you what this
means. So the first one is the dot. So the dot means that we want to look for any character. So
any character except a new line character, then the carrot means that we want to look for a pattern
that starts with that starts with the pattern we are looking for. So that starts with the string
hello, for example, then the dollar sign is the opposite. If you want to look for a string at the
end of our text, then we have some quantifiers. So the asterisk, the plus and square brackets.
And I will talk about them later in more detail. Then we have the set operator,
which I will also cover later. Then we have conditions and grouping with parentheses. So
I will also talk about this later. And of course, we have to look, we have the backslash. So with
the backslash, we can get more special sequences, or we can escape characters. So for example, if
we actually want to search for the dot, then we have to escape this in our pattern. So now let's
talk about the first three and show you some examples. And then later we will cover the other
meta characters in more detail. So now first, let's say we want to look for the dot and then
print all the matches. Then we see we get all all the characters in our string,
because the dot is looking for any character except new line. So this is the dot. And now
let's say we have a dot here at the end. And we actually want to get this dot. So then we escape
it with a backslash. And now if we run this, then we just get the dot. So now let's print the whole
match object. Then we get the dot and we see that it is at this position. So this is the
dots. And then let's have a look at the carrot. So this is the carrot. So let's say we want to look
for 123 if it starts with this, and then we get one match object. And for example, now if we look
for ABC, then it will return nothing, because it's not at the beginning. And the opposite if you
want to have a look, if we want to look if this is at the end, so then we can say dollar here. And
now if you run this, then this will find nothing because I'm sorry, we have the
colon here. This will find nothing. Because as I said, it is case sensitive. Now if I am looking
for uppercase ABC, and dollar at the end. So then it found the match at the end. All right, so
now we will talk about the other meta characters later. And now let's look at some more special
characters. So there are more special characters that start with a backslash. So there is the
backslash and small D. This looks for any digit so zero until nine. Then there's the capital
backslash capital D. So this matches any non digit character. Then there is backslash, small s,
this matches any white space character, for example, space, tap or new line. Then we have
backslash capital is as this matches any non white space character. So for all these patterns,
all these special characters, the capital pattern is kind of the opposite of the small
character here. So then we have backslash, small w, this matches any word character. So we have
characters from A to C. We also have all the capital characters. And also ditches and the underscore.
Then the capital W is the opposite. So any non word character, non alphanumeric character.
Then we have the backslash B. So this matches where the specified characters are at the beginning
or at the end of a word. And again, we have the opposite. So where this is not at the beginning.
So let's have a look at them in detail. So let's use another test string here. So let's for example
use this one. And now if we want to look for any digit here, we can simply say we want to look for
backslash D. And now if you run this, then we will see we have three matches, the digits one,
two and three. Now if we use the opposite, so capital D, so any non digit, then it will find
all the characters except one, two and three. Then let's have a look at the white space. So
backslash S finds any white space character. So here we see we have a space here, a space here
and a space here. And then again, the opposite, so any non white space character is any other
character. So this is the S special character. Then let's have a look at the w characters,
so any alphanumeric character. So if I put in a w here, then it finds all the word characters.
And again, the opposite capital D, this will just find the spaces in this example. And now let's
have a look at the backslash B. So now if I am looking for hello, then it will find it because
it is at the beginning of a block. And a block is not only the beginning of a string, but the
beginning of any block that follows a white space character. So for example, if we look for
hay, then it will also find the hay, but it will only find this pattern and not this one because
it's looking for matches that are at the beginning of a block. So for example, if we put this
and before a space, then it will find and then it will find this pattern or this match to.
And again, the opposite. Now if we are looking for this, and we put
hoe hay here again, then it will find this hay because it is not at the beginning of a block
where this is at the beginning of a block. So these are the special sequence,
special characters that we should know. And now let's continue with sets.
So we can use square brackets to look for sets. And let me show you what this means.
So let's say we only have this string now. And now let's say we only want to look for
a non-numeric character. So only for these ones, then we can use a set for this.
So a set is a pattern between square brackets. And now here in the set, we can use multiple
characters that we want to look up. For example, we want to look for a L and a O.
And now if we run this, then it will find all these characters. And you must be careful here
because it doesn't look for L O, but for any single character that we put into this set.
And we can also specify ranges here. So we can instead of, let's say we also want to have the
H and the E, then it will find any character here that is not a number and also not the
not the underscore. So we can also specify a range here. And this is a very typical,
very common example in regular expressions to use A dash C, so A to C. So all the lower case
characters, now if you run this, sometimes it's not saving this file automatically.
So now if you run this, then we see that we will find
all the letters here. And we can also look for digits. So let's say we want only the digits
two and three. And again, here we can have a range. So we can say one to nine. So this is
or let's say zero to nine. And this will find all the digits. So this is the same as
using backslash D to find a digit. And so yeah, so if you want to specify a
range, then that the dash can be used to declare to define the range. And now if we use it after a
range, then it's looking for the actual dash. So now if you also want to look up a dash,
then we can find it here. And if we put it between two things, then it is a range. So be careful here.
And we can also write our different ranges back to back. So for example, if we have
hello here in uppercase letters, and first of all, let's say we only want the lower case letters.
And then we also want to have all the uppercase characters from A to C, then we can write this
back to back. So we can say small a to C or a dash C, then capital A dash C. Then this will also
include all the uppercase characters. And again, we can use back to back and also include numbers.
So, yeah, then it also finds the numbers here. So the digits. So yeah, so this is how we can
use sets with this brackets. And now let's talk about quantifier. So we have these quantifier,
the meta meta characters. So we have a an an asterisk. So a the multiplication sign,
this means zero or more, then we have the plus this means one or more, then we have the question
mark. So this means zero or one. And this means or this can be used when we want to look for an
optional character. So it may be there, but it may also be not there. Then if we want to look
for a specific exact number, we can use curly braces and then a number here will look for the
exact number. And then we can also specify a range with minimum and maximum. So if we put two
numbers between the curly braces, then it's looking for a range. Okay, so let's have a
look at them in detail. So let's say we have a string, let's say hello underscore 123. And now
let's say we want to have a or we want to find digits. And remember, we can do this with with
backslash D. And then it will find all the digits. And let's say we want to look if we have zero or
more. So then we use an asterisk. And then it will also find all the other characters here.
Because here there is no digit, but it was looking for zero or more. And in this case,
our match is just an empty string. And then again, an empty string, empty string, empty string. And
then here we have digits and then it will combine them into one match. So now if we just use the
and use it without a quantifier, then it puts any every single digit as one match.
And if we want to look for zero or more, we can use this with an asterisk. And now in this case,
a plus is better. So we want to look for one or more. And then we will see it has only one match.
And it combined all the digits into one match. And let's say we want to look for a digit that has
an underscore in front of it. So let's say we want to look for underscore and then the digit,
then it will find the one. And but now let's say we don't know if there is an underscore or not.
So now if the string looks like this, and then if we run it, then it doesn't find a string,
a match. And then we can say that the underscore is optional by using the question mark. And now
if we run it, it finds all the matches, because it doesn't has an underscore. And now if we do it
like this, then it will find the same matches because it can also have an underscore here.
So this is the question mark. And now let's talk about specific ranges or a specific number of
characters. So now if you want to look for three digits, then we can say a digit and then curly
raise and then three, then it will find our match. So now if we are looking for four of the digits
and run it, then we don't have a match. And we can also use a range here. So this can be between
can be between one and three. And then it will also find the match. So these are the quantifiers.
Now let's stop for a second with all the concepts and just make or just do an example.
So let me copy this string here. And now let's use some of the concepts that we already know.
So let's say our string is now the date string. So this is dates in different formats. So for
example, here, we have the day and the month and then the year and this is separated by a
colon. Then here is it's the year first than a colon. Then here we have year, month and day
separated by a dash and here by a slash and also by an underscore. And now let's say we only want
to extract the dates with this format. So year, month and day, and only with a dash in between.
So let's do this. So the first thing we can do is now here is to look for
this pattern. So four, two and again two digits. So we can write this up. So backslash D backslash
D backslash D. And then let's say first of all, we want to look for any character between. So
remember the point is a meta character. So this is looking, if we have a look at this here,
this is looking for any character except new line. Then we have two digits. So backslash D then
again, we can have any character and then D and backslash D. So for example, if our string has
also some text in it. And now if we run this, now it's called dates, the string. Now if we run this,
then it will find all the all the states with with the numbers, but only in this format. So four,
two, two. So for example, it didn't put the text here, the hello text in here, and it didn't put
this date in here because it has a different format. So now this is our first try. And now what we
can do here is, for example, the next thing we want to do is to find only these in this format. So
now let's have a look at. So let's exchange the dot by a dash. So this is looking for an actual
dash. And then we have only the dates in this format. So four, two, and two numbers separated by a
dash. And let's say we this may also be a valid date. So we can also looking for a
slash as a separator here. So then we can use a set. So remember, a set is defined in square
records. And then we can define the characters that may be at this position. So for example,
we have a dash. And we have also or may have a slash. And again, here we are using a set. So then
we have dash slash and are closing our set. And now if we run this again, then we see,
sorry, we see that this is also included in the matches. And now let's say, for example, we are
looking only for dates in May or June. So how do we do that? So the month here.
So what we do here is now this is not any digit. So here we are only looking for month
oh five and oh six. So we always have a zero here. And then we can again use a set.
And here we can use, let's say, only five and six. And now if we run this, then we only have the
dates in May or June. And remember, we can also use a range here. So let's say we want to have
May, June and July, then we can say five to seven. And then we have all the dates from May to July.
And now let's use a quantifier here. So instead of writing for these here, backslash D, we can say D
and then curly braces and use the quantifier for so we want to have exactly four digits here.
And here we want to have exactly two digits. So then we can do it like this. So this finds all
the dates in May, June or July in this format. So this is one typical example how regular
expressions are useful. And yeah, so now let's continue. So we already covered a lot here.
So let's talk about conditions next. So let me copy another string and do another example.
So here I have another string with some names. So let me copy and paste this here. So this is my
new string. So here we have a Mr. Simpson, a Mrs. Simpson, a Mr. Brown, a Miss Smith,
and a Mr. T. And sometimes we have a dot between Mr. And sometimes not. And now let's just extract
all the different names here. So for example, there's some more in our file. So for example,
we have Hello World 123 date. And now we only we want to extract only the names and we want
to have the whole name. So let's build up our pattern here. So let's look for Mr. First. So
first we want to look for a Mr. So Mr. And then we have a white space. So backslash s.
And then we have one or more characters, so word characters. So here we use a backslash w.
And then we say plus. So this remember this is a quantifier. So one or more. And then I'm looking
for the my string here. And I don't actually write the space here because I have this backslash s.
And now if I run this, then we see that we have one match here. So this is our Mr. Simpson. So
here we have the Mr. And then a space and then one or more word characters. And now as a next step,
let's also include a Mr. Where we have the dot here. So we can have the dot. And now if you just
write it like this and run it, then it finds a sorry, I have to use backslash dot of course here
because it's looking for an actual, I want to look for the actual dot. And now it only finds Mr.
Brown and Mr. T, but not Mr. Simpson anymore. So now as we just learned, we have the optional
quantifier with a question mark. So now let's make our dot optional. And now if we run this,
then we have all the Mr. And now let's talk about where conditions are useful. So in this case,
we may not only have Mr, but we may also have a miss or a misses. So then we can use a condition.
So we use parentheses here. And then we separate them. So let's have a look at this here. This
meta character is the either or. So now if we use this, we can write Mr or miss or misses.
And then if we run this, then we see it extracted all the names from this text.
So this is where a condition is useful. And as we have just seen, we grouped this condition
together with the parentheses. So this is again one meta character. And now let's talk about
grouping a little bit more. So let's do another example for this. This is also a typical
example. So let's copy some emails into our text. And let's say we only want to extract the emails
from this string here. So again, let's build up our pattern. So what we can do here is
we can use sets to do this. So let's build this up. So let's say we want to have some characters here.
So this may be word characters, but this may also be a dash and numbers. So let's use a set here.
And let's use back to back ranges here. So we can use small a to C or capital A to C
or also the digits zero to nine. Or we may also have a dash here. So now we are looking for
any of these characters here. And we want to have multiple of them. So we say we want to have
multiple so one or more. So this combines this group into one match. And then it is followed by an
ad sign. So now if we compile this and run this, then we see that it extracted all these patterns
here with any words or numbers or dashes and then an ad sign. So this is the name before the email.
And then our email can have different domains. So for example, we have at gmail.com at gmx.de or
at my domain or my dash domain dot org. So we want to extract all the different domains.
And the next thing we want to look is to look for only for word characters. So the domain
doesn't have a digit in it. So the only allowed characters are let's use another set. And here
we use again, it may be A to C, capital A to C, and also a dash. And then we have the dot.
So now let's run this. And of course, there are again, one or more. So here I have to do a plus.
And then it's looking for one or more. So now we see our match also includes the domain name
and the dot. And then here at the very end, let's do another set. So here we say our ending.
And for example, we can say here we have dot.
Sorry, again, I missed, I was not looking for an actual dot here. So this is a typical
mistake that I make. So now it for example, it would have also found this one here. But this is
not a valid email address. So I have to look for the actual dot by using the backslash.
And then let's say I'm looking only for dot com. But it can also be dot de or dot org.
So for example, I can use a group here by using parentheses and then use the condition here
com or de or dot org. So now it would only find these
endings here. And now let's not use a condition, but I just wanted to show you the condition here
again. But we can also just use a set here. So let's use the set. And again, here we may have
a to C and a to C and capital and then one or more. And no digits here. So now if you run this,
then then this will extract all the emails for us. So this is a typical
regular expression pattern to look for emails. And this is what I showed you in the beginning.
So now you understand what this means. And now let's talk about grouping a little bit more.
So there was one case just where I used the condition and then I have had to use parentheses.
But we can also explicitly group our match object here into different substrings.
So for example, I can put all of these before the ad sign
into a group. So now let's use parentheses. And then let's use the ad sign. And then let's use
that the main name. So this is one group until the dot. And then we have one group to have the
ending here. And now we have three groups here. And as I showed you in the beginning,
now if we run this, then this will give the same results. And here we are printing the whole
match object. And then we can use the dot group to return the actual string. And this is by default,
this is group zero. So this is the whole match string. But now we can also print the single
groups that we just defined. So for example, we have group one, two and three now.
And now if we run this and print this, then we see, let's just print the group one for now.
Here, let's comment this out too. Then we see it only prints this group here. So only the name
of the email before the ad sign. Then here, this is the second group. So now if we print the group
two, then this is the domain name. And if we want to have the ending, then we can print group three.
So this is where grouping is useful. If we only want to have a look at specific things in our
match, then we can use parentheses. Now let's move on. So now let's see, we talked about grouping.
Now let's talk about modifications. So we have two methods to modify a string. So we have the
split method, and we have the sub method. So let's talk about both of them. So the split method
will split the string into a list and splits wherever our regular expression matches.
And the sub method will find all substrings where the regular expression matches and replaces them
with a different string. So let's look at two examples. So let's say, let me grab a string here.
So let's use this one again. So this is our test string. And now we use the pattern equals
re.compile. And then we are looking for the raw string 123.
Oh, sorry, let's use a different one. Do I have it here? No, let's write it myself. So let's say
abc123abcdef and capital letters again 123 and abc. And now let's say this is our pattern. So one,
two and three. And now we say our split it equals and then we say pattern dot split.
And give the test string as argument. And now let's print this split it. Now this will be a list
where our string split it. Oh, sorry, this was a bad example. So let's use abc as split. And then we
have splits where it's split it our string into different substrings and use this pattern here
as the split. So here as the matching split. So here it has abc. So it's split our string into
this part. So there we have 123. And then this part. And then it found our pattern again abc.
And then again, it's split it the string. And then at the end, we have the rest of the string. So
this is the third substring that it found and and returned with this split method. So this is the
split method. And now the sub method with the sub method, we find all the substrings where our
pattern matches and then replace them with a different string. So let's say our test string
equals hello world. And then let's say you are the best world. And use the so we use the word
world two times. And then let's say we want to look for the pattern world. So we say pattern equals
re.compile. And then an R raw string. And here we have world. And then we say our sub string
equals and then we use pattern dot sub. And then what we want to put in as replacement,
let's say we want to put in planet. And we also have to put in the test string.
Now it took our test string, looked for all the matches, where pattern matches, so it looked for
world and replaced them with planet. So now this will return another string that was modified.
And now if you print this, then we see it printed hello planet, you are the best planet.
So this is the sub method. And now let's do another example to combine all that we have learned.
And again, use the sub method. And yeah, so let's do this. So
so let me grab this string here. So this is our URL strings. So here we have,
again, let's say we have different things here.
And then we are only looking for URLs, but they may have different formats. So for example,
we have an HTTP URL, an HTTPS URL. And then sometimes we have a www and sometimes we don't
have this. And then we have the typical domain name and ending. So yeah, so let's extract this.
So let's build up our pattern again. So pattern equals RE dot compile, and then a raw string.
So now let's start by saying it starts with HTTP. And then a colon and two slashes.
And then we have www and then we have a dot. So an actual dot. And then we have
one or more word characters. So for example, we can use a set here again and use a to C and
uppercase a to C. And also a dash here. So like here. And so then we have a plus so one or more.
And let's put this into a group here right away. So this will return the same thing.
And then we can later use this group here. And the next thing we again have a dot so backslash
dot. And then again, we can use a set here a to C and capital a to C. And now let's try this out.
So let's say matches equals pattern dot find iter. And then we call this URLs and then for
match in matches, we want to print the match. And let's try this and run this. And then we see
we made some mistakes here. And this is because here I have to say plus, of course, so one or more.
And now it only found this URL, because it didn't find this one because we have HTTPS here. And
this one doesn't have www. So the first thing we can do here is to use an S and this is an optional
S. So remember S question mark. So this is optional then. And if we don't put this into a group,
then the question mark will only refer to this character here. So now let's try this out. And
now we see it also found the HTTPS URL. And now the same thing with the www. So this may be there
or may not be there. So again, let's put this into a group. And then use an question mark to make
this optional. And now if you run this again, then it still doesn't find it. And this is because
our it must be www. So backslash dot, which must be optional. And then I don't need it here anymore.
So let's run this. And then we see that it found all of the URLs and extracted them. And
now let's say our string has only the URLs here. And now let's say we want to return a new string
where we replaced all of these optional beginnings. So it should only print the actual
domain name with the ending. So as we have learned, we can use the SUP method. So we can say
instead of just finding the matches, what we want to do here is let's also print this. And then let's
say our SUP URLs equals and then we use pattern and then SUP. And then what we want to put in the
replacement here. So for example, if we just say hello, and then URLs as a string and then print
the SUP URLs. So then we see that this is the new string here. So it replaced all of the matches
with hello. And now let's say we only want to put this in our string and only this, then what we can
do here is we can group this and we already did this. So we have a group here, we have a group here.
And let's also put this into our group, into a group. And then what we can do is we can use
back references to replace them. So here we can say backslash two, and we must use a string, so a raw
string. And then we say backslash two, and backslash three. And now if we run this, then this is our
new string. So if I comment this out, then we see, then this is our new string. And what
happened here, again, if we have a look at the group, so we can say, let's print all the different
groups. So we have match dot group. So this will be the whole string.
And so now, so this is group zero again. Now let's have a look at what is group one.
So for example, here, this is the group one, the first one in parentheses. And because this may be
optional, this may also be none. So the first URL has none as the first group, because it doesn't
have w w w. And this is the first group. So now let's print the second group. So this is the actual
name of the domain. So the beginning. And then the group three is the ending so dot com dot com
dot net. And now here, we use this group two and group three with this back reference.
And then replace the whole found pattern only with the domain name. So this is what happens here.
And so this is also very often used in regular expressions. And now you know what this means.
And I guess now we are almost through with all the context all the things that I wanted to show
you. And now as a last thing, let's quickly talk about compilation flags. So when we compile
the pattern, then we also have to option to use different compilation flags. So here,
I listed them. And again, you don't have to remember them, just keep a cheat sheet. So here
we have the different compilation flags. So asky dot all ignore case local multi line or verb
both. So I recommend that you check out the official documentation to see what all of them
mean in detail. And now I just want to show you the ignore case compilation flag. So this is also
a very common use case. So let's say we have the string my string equals hello world. And then
we want to look for the string world. And now if we compile this, and then try to find the
matches and print them. So print the match. Now if you run this, sorry, this is called my string.
Now if you run this, then it doesn't find a string. So because remember, this is case
sensitive. Now if you make a capital W, then it finds the match world. And let's say we don't
know what our string is. So it may be uppercase, but it may not be uppercase. So it doesn't matter
for us. For us, then we can just use the compilation flag, our e dot ignore case. So we can write this
out. So we can say ignore case. Or we can just say our re dot I. And then if we use a small w,
then it will still find the match. Because now it ignored the cases. So this is the ignore case
compilation flag. And now, yeah, you also have these compilation flags. So I recommend that
you check them out for yourself. I will provide a link to the official documentation in the
description. And now I think we are done. And now you should be able to understand all the
different regular expressions. I hope it wasn't too complicated for you. And I hope you enjoyed
this tutorial. If you liked this, then please consider subscribing to the channel and leave me
a like and see you next time. Bye.
